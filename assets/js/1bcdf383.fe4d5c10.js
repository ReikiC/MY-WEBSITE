"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4001],{2441:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>_,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/practical-optimization","title":"C/C++\u5b9e\u8df5\u4e0e\u4f18\u5316","description":"\u5728\u5b9e\u9645\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u638c\u63e1C/C++\u7684\u6700\u4f73\u5b9e\u8df5\u3001\u6027\u80fd\u4f18\u5316\u6280\u5de7\u548c\u8c03\u8bd5\u65b9\u6cd5\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u672c\u6587\u6c47\u603b\u4e86\u5b9e\u6218\u7ecf\u9a8c\u548c\u5de5\u7a0b\u6280\u5de7\u3002","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/05_practical-optimization.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/01_c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/practical-optimization","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/practical-optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/05_practical-optimization.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"knowledgSidebar","previous":{"title":"\u73b0\u4ee3C++\u7279\u6027 (C++11/14/17/20)","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/modern-cpp"},"next":{"title":"\u547d\u540d\u7a7a\u95f4 namespace","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/namespace"}}');var s=t(4848),r=t(8453);const a={sidebar_position:5},o="C/C++\u5b9e\u8df5\u4e0e\u4f18\u5316",l={},c=[{value:"\ud83c\udfaf \u6027\u80fd\u4f18\u5316\u7b56\u7565",id:"-\u6027\u80fd\u4f18\u5316\u7b56\u7565",level:2},{value:"\u26a1 <strong>\u7f16\u8bd1\u5668\u4f18\u5316</strong>",id:"-\u7f16\u8bd1\u5668\u4f18\u5316",level:3},{value:"<strong>\u7f16\u8bd1\u5668\u6807\u5fd7\u4f18\u5316</strong>",id:"\u7f16\u8bd1\u5668\u6807\u5fd7\u4f18\u5316",level:4},{value:"<strong>\u5185\u8054\u51fd\u6570\u4f18\u5316</strong>",id:"\u5185\u8054\u51fd\u6570\u4f18\u5316",level:4},{value:"\ud83d\ude80 <strong>\u5185\u5b58\u4f18\u5316</strong>",id:"-\u5185\u5b58\u4f18\u5316",level:3},{value:"<strong>\u5185\u5b58\u5e03\u5c40\u4f18\u5316</strong>",id:"\u5185\u5b58\u5e03\u5c40\u4f18\u5316",level:4},{value:"<strong>\u5185\u5b58\u6c60\u6280\u672f</strong>",id:"\u5185\u5b58\u6c60\u6280\u672f",level:4},{value:"\ud83d\udd27 <strong>\u7b97\u6cd5\u4f18\u5316</strong>",id:"-\u7b97\u6cd5\u4f18\u5316",level:3},{value:"<strong>\u5faa\u73af\u4f18\u5316</strong>",id:"\u5faa\u73af\u4f18\u5316",level:4},{value:"<strong>\u7f13\u5b58\u53cb\u597d\u7684\u6570\u636e\u7ed3\u6784</strong>",id:"\u7f13\u5b58\u53cb\u597d\u7684\u6570\u636e\u7ed3\u6784",level:4},{value:"\ud83d\udee1\ufe0f \u5185\u5b58\u5b89\u5168\u4e0e\u8c03\u8bd5",id:"\ufe0f-\u5185\u5b58\u5b89\u5168\u4e0e\u8c03\u8bd5",level:2},{value:"\ud83d\udd0d <strong>\u5185\u5b58\u9519\u8bef\u68c0\u6d4b</strong>",id:"-\u5185\u5b58\u9519\u8bef\u68c0\u6d4b",level:3},{value:"<strong>\u667a\u80fd\u6307\u9488\u6700\u4f73\u5b9e\u8df5</strong>",id:"\u667a\u80fd\u6307\u9488\u6700\u4f73\u5b9e\u8df5",level:4},{value:"<strong>\u8fb9\u754c\u68c0\u67e5\u548c\u65ad\u8a00</strong>",id:"\u8fb9\u754c\u68c0\u67e5\u548c\u65ad\u8a00",level:4},{value:"<strong>\u5185\u5b58\u8c03\u8bd5\u5de5\u5177</strong>",id:"\u5185\u5b58\u8c03\u8bd5\u5de5\u5177",level:4},{value:"\ud83d\udd27 <strong>\u8c03\u8bd5\u6280\u5de7</strong>",id:"-\u8c03\u8bd5\u6280\u5de7",level:3},{value:"<strong>\u65ad\u70b9\u548c\u65e5\u5fd7</strong>",id:"\u65ad\u70b9\u548c\u65e5\u5fd7",level:4},{value:"<strong>\u6761\u4ef6\u7f16\u8bd1\u548c\u914d\u7f6e</strong>",id:"\u6761\u4ef6\u7f16\u8bd1\u548c\u914d\u7f6e",level:4},{value:"\u2699\ufe0f \u5de5\u7a0b\u5b9e\u8df5",id:"\ufe0f-\u5de5\u7a0b\u5b9e\u8df5",level:2},{value:"\ud83d\udcda <strong>\u4ee3\u7801\u7ec4\u7ec7</strong>",id:"-\u4ee3\u7801\u7ec4\u7ec7",level:3},{value:"<strong>\u5934\u6587\u4ef6\u6700\u4f73\u5b9e\u8df5</strong>",id:"\u5934\u6587\u4ef6\u6700\u4f73\u5b9e\u8df5",level:4},{value:"<strong>\u73b0\u4ee3CMake\u6784\u5efa</strong>",id:"\u73b0\u4ee3cmake\u6784\u5efa",level:4},{value:"<strong>\u5355\u5143\u6d4b\u8bd5</strong>",id:"\u5355\u5143\u6d4b\u8bd5",level:4},{value:"\ud83d\udcc8 <strong>\u6027\u80fd\u5206\u6790</strong>",id:"-\u6027\u80fd\u5206\u6790",level:3},{value:"<strong>\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5</strong>",id:"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5",level:4},{value:"<strong>\u5185\u5b58\u4f7f\u7528\u5206\u6790</strong>",id:"\u5185\u5b58\u4f7f\u7528\u5206\u6790",level:4}];function d(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"cc\u5b9e\u8df5\u4e0e\u4f18\u5316",children:"C/C++\u5b9e\u8df5\u4e0e\u4f18\u5316"})}),"\n",(0,s.jsx)(e.p,{children:"\u5728\u5b9e\u9645\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u638c\u63e1C/C++\u7684\u6700\u4f73\u5b9e\u8df5\u3001\u6027\u80fd\u4f18\u5316\u6280\u5de7\u548c\u8c03\u8bd5\u65b9\u6cd5\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u672c\u6587\u6c47\u603b\u4e86\u5b9e\u6218\u7ecf\u9a8c\u548c\u5de5\u7a0b\u6280\u5de7\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"-\u6027\u80fd\u4f18\u5316\u7b56\u7565",children:"\ud83c\udfaf \u6027\u80fd\u4f18\u5316\u7b56\u7565"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u7f16\u8bd1\u5668\u4f18\u5316",children:["\u26a1 ",(0,s.jsx)(e.strong,{children:"\u7f16\u8bd1\u5668\u4f18\u5316"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u7f16\u8bd1\u5668\u6807\u5fd7\u4f18\u5316",children:(0,s.jsx)(e.strong,{children:"\u7f16\u8bd1\u5668\u6807\u5fd7\u4f18\u5316"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u7f16\u8bd1\u547d\u4ee4\u4f18\u5316\u793a\u4f8b\n// \u5f00\u53d1\u9636\u6bb5\uff1a\u8c03\u8bd5\u4fe1\u606f + \u57fa\u7840\u4f18\u5316\n// g++ -g -O1 -Wall -Wextra -std=c++17 main.cpp\n\n// \u53d1\u5e03\u9636\u6bb5\uff1a\u6700\u5927\u4f18\u5316\n// g++ -O3 -DNDEBUG -march=native -flto main.cpp\n\n// \u6027\u80fd\u654f\u611f\u4ee3\u7801\u7684\u7f16\u8bd1\u5668\u63d0\u793a\n#pragma GCC optimize("O3,unroll-loops")\n#pragma GCC target("avx,avx2,fma")\n\n// \u5206\u652f\u9884\u6d4b\u4f18\u5316\ninline bool likely_condition(int x) {\n    if ([[likely]] x > 0) {  // C++20\u5c5e\u6027\n        return true;\n    }\n    return false;\n}\n\n// \u4f20\u7edf\u65b9\u5f0f\uff08GCC\uff09\n#define LIKELY(x)   __builtin_expect(!!(x), 1)\n#define UNLIKELY(x) __builtin_expect(!!(x), 0)\n\nbool check_condition(int x) {\n    if (LIKELY(x > 0)) {\n        return true;\n    }\n    return false;\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"\u5185\u8054\u51fd\u6570\u4f18\u5316",children:(0,s.jsx)(e.strong,{children:"\u5185\u8054\u51fd\u6570\u4f18\u5316"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u6b63\u786e\u7684\u5185\u8054\u4f7f\u7528\nclass FastMath {\npublic:\n    // \u7b80\u5355\u8ba1\u7b97\u9002\u5408\u5185\u8054\n    [[nodiscard]] inline constexpr double square(double x) const noexcept {\n        return x * x;\n    }\n    \n    // \u590d\u6742\u8ba1\u7b97\u4e0d\u9002\u5408\u5185\u8054\n    [[nodiscard]] double complex_calculation(double x, double y) const;\n    \n    // \u5f3a\u5236\u5185\u8054\uff08\u8c28\u614e\u4f7f\u7528\uff09\n    [[gnu::always_inline]] inline int force_inline_add(int a, int b) {\n        return a + b;\n    }\n};\n\n// \u6a21\u677f\u51fd\u6570\u7684\u5185\u8054\u4f18\u5316\ntemplate<typename T>\nconstexpr T max_value(T a, T b) noexcept {\n    return (a > b) ? a : b;  // \u7f16\u8bd1\u65f6\u5c55\u5f00\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u5185\u5b58\u4f18\u5316",children:["\ud83d\ude80 ",(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u4f18\u5316"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u5185\u5b58\u5e03\u5c40\u4f18\u5316",children:(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u5e03\u5c40\u4f18\u5316"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u7ed3\u6784\u4f53\u5b57\u8282\u5bf9\u9f50\u4f18\u5316\nstruct BadAlignment {\n    char c1;     // 1 byte\n    int i;       // 4 bytes (\u9700\u89813\u5b57\u8282\u586b\u5145)\n    char c2;     // 1 byte\n    double d;    // 8 bytes (\u9700\u89817\u5b57\u8282\u586b\u5145)\n};  // \u603b\u8ba1: 24\u5b57\u8282\n\nstruct GoodAlignment {\n    double d;    // 8 bytes\n    int i;       // 4 bytes\n    char c1;     // 1 byte\n    char c2;     // 1 byte (2\u5b57\u8282\u586b\u5145)\n};  // \u603b\u8ba1: 16\u5b57\u8282\n\n// \u624b\u52a8\u63a7\u5236\u5bf9\u9f50\nstruct __attribute__((packed)) PackedStruct {\n    char c;\n    int i;\n    char c2;\n}; // \u7d27\u5bc6\u5305\u88c5\uff0c\u4f46\u53ef\u80fd\u5f71\u54cd\u6027\u80fd\n\n// \u7f13\u5b58\u884c\u5bf9\u9f50\nstruct alignas(64) CacheLineAligned {  // 64\u5b57\u8282\u5bf9\u9f50\n    int data[16];\n};\n"})}),"\n",(0,s.jsx)(e.h4,{id:"\u5185\u5b58\u6c60\u6280\u672f",children:(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u6c60\u6280\u672f"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <memory_resource>\n\n// \u7b80\u5355\u5185\u5b58\u6c60\u5b9e\u73b0\nclass SimpleMemoryPool {\nprivate:\n    struct Block {\n        Block* next;\n    };\n    \n    std::unique_ptr<char[]> memory;\n    Block* free_list;\n    size_t block_size;\n    size_t pool_size;\n    \npublic:\n    explicit SimpleMemoryPool(size_t block_sz, size_t num_blocks)\n        : block_size(std::max(block_sz, sizeof(Block)))\n        , pool_size(num_blocks)\n        , memory(std::make_unique<char[]>(block_size * num_blocks))\n        , free_list(nullptr) {\n        \n        // \u521d\u59cb\u5316\u81ea\u7531\u5217\u8868\n        char* current = memory.get();\n        for (size_t i = 0; i < num_blocks; ++i) {\n            Block* block = reinterpret_cast<Block*>(current);\n            block->next = free_list;\n            free_list = block;\n            current += block_size;\n        }\n    }\n    \n    void* allocate() {\n        if (!free_list) return nullptr;\n        \n        Block* block = free_list;\n        free_list = free_list->next;\n        return block;\n    }\n    \n    void deallocate(void* ptr) {\n        if (!ptr) return;\n        \n        Block* block = static_cast<Block*>(ptr);\n        block->next = free_list;\n        free_list = block;\n    }\n};\n\n// \u4f7f\u7528C++17\u5185\u5b58\u8d44\u6e90\nvoid pmr_example() {\n    // \u5355\u8c03\u5185\u5b58\u8d44\u6e90\uff08\u53ea\u5206\u914d\u4e0d\u91ca\u653e\uff09\n    char buffer[1024];\n    std::pmr::monotonic_buffer_resource pool{buffer, sizeof(buffer)};\n    \n    // \u4f7f\u7528\u5185\u5b58\u6c60\u7684\u5bb9\u5668\n    std::pmr::vector<int> vec{&pool};\n    vec.resize(100);  // \u4ecepool\u5206\u914d\u5185\u5b58\n    \n    // \u6c60\u5316\u5b57\u7b26\u4e32\n    std::pmr::string str{"Hello, Memory Pool!", &pool};\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u7b97\u6cd5\u4f18\u5316",children:["\ud83d\udd27 ",(0,s.jsx)(e.strong,{children:"\u7b97\u6cd5\u4f18\u5316"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u5faa\u73af\u4f18\u5316",children:(0,s.jsx)(e.strong,{children:"\u5faa\u73af\u4f18\u5316"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u5faa\u73af\u5c55\u5f00\nvoid unrolled_sum(const std::vector<int>& data, int& result) {\n    size_t size = data.size();\n    size_t unroll_count = size / 4;\n    \n    const int* ptr = data.data();\n    int sum = 0;\n    \n    // 4\u8def\u5c55\u5f00\n    for (size_t i = 0; i < unroll_count; ++i) {\n        sum += ptr[0] + ptr[1] + ptr[2] + ptr[3];\n        ptr += 4;\n    }\n    \n    // \u5904\u7406\u5269\u4f59\u5143\u7d20\n    for (size_t i = unroll_count * 4; i < size; ++i) {\n        sum += data[i];\n    }\n    \n    result = sum;\n}\n\n// SIMD\u4f18\u5316\uff08\u9700\u8981\u76f8\u5e94\u786c\u4ef6\u652f\u6301\uff09\n#include <immintrin.h>\n\nvoid simd_add_arrays(const float* a, const float* b, float* result, size_t size) {\n    size_t simd_size = size / 8;  // AVX\u5904\u74068\u4e2afloat\n    \n    for (size_t i = 0; i < simd_size; ++i) {\n        __m256 va = _mm256_load_ps(&a[i * 8]);\n        __m256 vb = _mm256_load_ps(&b[i * 8]);\n        __m256 vr = _mm256_add_ps(va, vb);\n        _mm256_store_ps(&result[i * 8], vr);\n    }\n    \n    // \u5904\u7406\u5269\u4f59\u5143\u7d20\n    for (size_t i = simd_size * 8; i < size; ++i) {\n        result[i] = a[i] + b[i];\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h4,{id:"\u7f13\u5b58\u53cb\u597d\u7684\u6570\u636e\u7ed3\u6784",children:(0,s.jsx)(e.strong,{children:"\u7f13\u5b58\u53cb\u597d\u7684\u6570\u636e\u7ed3\u6784"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u6570\u7ec4\u7ed3\u6784\uff08SoA - Structure of Arrays\uff09\nclass ParticleSystemSoA {\nprivate:\n    std::vector<float> positions_x, positions_y, positions_z;\n    std::vector<float> velocities_x, velocities_y, velocities_z;\n    std::vector<float> masses;\n    \npublic:\n    void update_positions(float dt) {\n        size_t size = masses.size();\n        \n        // \u7f13\u5b58\u53cb\u597d\uff1a\u8fde\u7eed\u8bbf\u95ee\u76f8\u540c\u7c7b\u578b\u6570\u636e\n        for (size_t i = 0; i < size; ++i) {\n            positions_x[i] += velocities_x[i] * dt;\n            positions_y[i] += velocities_y[i] * dt;\n            positions_z[i] += velocities_z[i] * dt;\n        }\n    }\n};\n\n// \u7ed3\u6784\u6570\u7ec4\uff08AoS - Array of Structures\uff09- \u9002\u5408\u9891\u7e41\u8bbf\u95ee\u5b8c\u6574\u5bf9\u8c61\nstruct Particle {\n    float pos_x, pos_y, pos_z;\n    float vel_x, vel_y, vel_z;\n    float mass;\n    \n    void update_position(float dt) {\n        pos_x += vel_x * dt;\n        pos_y += vel_y * dt;\n        pos_z += vel_z * dt;\n    }\n};\n\nclass ParticleSystemAoS {\nprivate:\n    std::vector<Particle> particles;\n    \npublic:\n    void update_all(float dt) {\n        for (auto& particle : particles) {\n            particle.update_position(dt);  // \u8bbf\u95ee\u76f8\u5173\u6570\u636e\n        }\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-\u5185\u5b58\u5b89\u5168\u4e0e\u8c03\u8bd5",children:"\ud83d\udee1\ufe0f \u5185\u5b58\u5b89\u5168\u4e0e\u8c03\u8bd5"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u5185\u5b58\u9519\u8bef\u68c0\u6d4b",children:["\ud83d\udd0d ",(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u9519\u8bef\u68c0\u6d4b"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u667a\u80fd\u6307\u9488\u6700\u4f73\u5b9e\u8df5",children:(0,s.jsx)(e.strong,{children:"\u667a\u80fd\u6307\u9488\u6700\u4f73\u5b9e\u8df5"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// RAII\u8d44\u6e90\u7ba1\u7406\nclass ResourceManager {\nprivate:\n    std::unique_ptr<FILE, decltype(&fclose)> file;\n    std::unique_ptr<int[], std::default_delete<int[]>> buffer;\n    \npublic:\n    explicit ResourceManager(const std::string& filename)\n        : file(fopen(filename.c_str(), "r"), &fclose)\n        , buffer(std::make_unique<int[]>(1024)) {\n        \n        if (!file) {\n            throw std::runtime_error("Failed to open file");\n        }\n    }\n    \n    // \u81ea\u52a8\u91ca\u653e\u8d44\u6e90\uff0c\u65e0\u9700\u624b\u52a8\u7ba1\u7406\n};\n\n// \u5f31\u5f15\u7528\u6253\u7834\u5faa\u73af\u4f9d\u8d56\nclass TreeNode {\npublic:\n    std::vector<std::shared_ptr<TreeNode>> children;\n    std::weak_ptr<TreeNode> parent;  // \u5f31\u5f15\u7528\u907f\u514d\u5faa\u73af\n    \n    void add_child(std::shared_ptr<TreeNode> child) {\n        child->parent = shared_from_this();\n        children.push_back(std::move(child));\n    }\n};\n'})}),"\n",(0,s.jsx)(e.h4,{id:"\u8fb9\u754c\u68c0\u67e5\u548c\u65ad\u8a00",children:(0,s.jsx)(e.strong,{children:"\u8fb9\u754c\u68c0\u67e5\u548c\u65ad\u8a00"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <cassert>\n\n// \u8fd0\u884c\u65f6\u68c0\u67e5\nclass SafeArray {\nprivate:\n    std::vector<int> data;\n    \npublic:\n    explicit SafeArray(size_t size) : data(size) {}\n    \n    int& at_checked(size_t index) {\n        if (index >= data.size()) {\n            throw std::out_of_range("Index out of bounds");\n        }\n        return data[index];\n    }\n    \n    // \u8c03\u8bd5\u7248\u672c\u68c0\u67e5\uff0c\u53d1\u5e03\u7248\u672c\u4f18\u5316\u6389\n    int& at_debug(size_t index) {\n        assert(index < data.size() && "Index out of bounds");\n        return data[index];\n    }\n};\n\n// \u9759\u6001\u65ad\u8a00\ntemplate<size_t N>\nclass StaticArray {\n    static_assert(N > 0, "Array size must be positive");\n    static_assert(N <= 1000, "Array size too large");\n    \nprivate:\n    std::array<int, N> data;\n};\n'})}),"\n",(0,s.jsx)(e.h4,{id:"\u5185\u5b58\u8c03\u8bd5\u5de5\u5177",children:(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u8c03\u8bd5\u5de5\u5177"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// Valgrind\u4f7f\u7528\u793a\u4f8b\n/*\n\u7f16\u8bd1\uff1ag++ -g -O0 -std=c++17 program.cpp\n\u8fd0\u884c\uff1avalgrind --tool=memcheck --leak-check=full ./a.out\n\nAddressSanitizer\u4f7f\u7528\uff1a\n\u7f16\u8bd1\uff1ag++ -fsanitize=address -g -O1 program.cpp\n\u8fd0\u884c\uff1a./a.out\n*/\n\n// \u81ea\u5b9a\u4e49\u5185\u5b58\u8ddf\u8e2a\nclass MemoryTracker {\nprivate:\n    static std::atomic<size_t> total_allocated;\n    static std::atomic<size_t> total_deallocated;\n    \npublic:\n    static void* tracked_malloc(size_t size) {\n        void* ptr = malloc(size + sizeof(size_t));\n        if (ptr) {\n            *static_cast<size_t*>(ptr) = size;\n            total_allocated += size;\n            return static_cast<char*>(ptr) + sizeof(size_t);\n        }\n        return nullptr;\n    }\n    \n    static void tracked_free(void* ptr) {\n        if (ptr) {\n            char* real_ptr = static_cast<char*>(ptr) - sizeof(size_t);\n            size_t size = *reinterpret_cast<size_t*>(real_ptr);\n            total_deallocated += size;\n            free(real_ptr);\n        }\n    }\n    \n    static size_t get_memory_usage() {\n        return total_allocated - total_deallocated;\n    }\n};\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u8c03\u8bd5\u6280\u5de7",children:["\ud83d\udd27 ",(0,s.jsx)(e.strong,{children:"\u8c03\u8bd5\u6280\u5de7"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u65ad\u70b9\u548c\u65e5\u5fd7",children:(0,s.jsx)(e.strong,{children:"\u65ad\u70b9\u548c\u65e5\u5fd7"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <fstream>\n#include <chrono>\n#include <iomanip>\n\n// \u8c03\u8bd5\u5b8f\n#ifdef DEBUG\n    #define DBG(x) std::cout << #x " = " << x << std::endl\n    #define DBG_FUNC() std::cout << "Entering: " << __FUNCTION__ << std::endl\n#else\n    #define DBG(x)\n    #define DBG_FUNC()\n#endif\n\n// \u6027\u80fd\u8ba1\u65f6\u5668\nclass Timer {\nprivate:\n    std::chrono::high_resolution_clock::time_point start_time;\n    const char* name;\n    \npublic:\n    explicit Timer(const char* timer_name) : name(timer_name) {\n        start_time = std::chrono::high_resolution_clock::now();\n    }\n    \n    ~Timer() {\n        auto end_time = std::chrono::high_resolution_clock::now();\n        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(\n            end_time - start_time).count();\n        std::cout << name << " took " << duration << " microseconds\\n";\n    }\n};\n\n#define TIMER(name) Timer _timer(name)\n\n// \u4f7f\u7528\u793a\u4f8b\nvoid performance_critical_function() {\n    TIMER("Critical Function");\n    DBG_FUNC();\n    \n    // \u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\n    std::vector<int> data(1000000);\n    std::iota(data.begin(), data.end(), 1);\n    \n    int sum = 0;\n    for (int x : data) {\n        sum += x;\n    }\n    \n    DBG(sum);\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"\u6761\u4ef6\u7f16\u8bd1\u548c\u914d\u7f6e",children:(0,s.jsx)(e.strong,{children:"\u6761\u4ef6\u7f16\u8bd1\u548c\u914d\u7f6e"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u6784\u5efa\u914d\u7f6e\n#ifdef RELEASE_BUILD\n    constexpr bool DEBUG_MODE = false;\n    #define LOG_LEVEL 1  // \u53ea\u8bb0\u5f55\u9519\u8bef\n#else\n    constexpr bool DEBUG_MODE = true;\n    #define LOG_LEVEL 3  // \u8bb0\u5f55\u6240\u6709\u4fe1\u606f\n#endif\n\n// \u65e5\u5fd7\u7cfb\u7edf\nenum LogLevel { ERROR = 1, WARNING = 2, INFO = 3 };\n\ntemplate<LogLevel level>\nclass Logger {\npublic:\n    template<typename... Args>\n    static void log(Args&&... args) {\n        if constexpr (level <= LOG_LEVEL) {\n            std::cout << "[" << level_to_string<level>() << "] ";\n            ((std::cout << args << " "), ...);\n            std::cout << std::endl;\n        }\n    }\n    \nprivate:\n    template<LogLevel L>\n    static constexpr const char* level_to_string() {\n        if constexpr (L == ERROR) return "ERROR";\n        else if constexpr (L == WARNING) return "WARN";\n        else return "INFO";\n    }\n};\n\n// \u4f7f\u7528\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7\nvoid logging_example() {\n    Logger<ERROR>::log("Critical error occurred!");\n    Logger<WARNING>::log("This is a warning");\n    Logger<INFO>::log("Information message", 42, 3.14);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-\u5de5\u7a0b\u5b9e\u8df5",children:"\u2699\ufe0f \u5de5\u7a0b\u5b9e\u8df5"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u4ee3\u7801\u7ec4\u7ec7",children:["\ud83d\udcda ",(0,s.jsx)(e.strong,{children:"\u4ee3\u7801\u7ec4\u7ec7"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u5934\u6587\u4ef6\u6700\u4f73\u5b9e\u8df5",children:(0,s.jsx)(e.strong,{children:"\u5934\u6587\u4ef6\u6700\u4f73\u5b9e\u8df5"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// math_utils.hpp\n#pragma once  // \u73b0\u4ee3\u5934\u6587\u4ef6\u4fdd\u62a4\n\n#include <cmath>      // \u7cfb\u7edf\u5934\u6587\u4ef6\n#include <vector>     // \u6807\u51c6\u5e93\u5934\u6587\u4ef6\n#include <memory>     // \u667a\u80fd\u6307\u9488\n\n#include "config.hpp" // \u9879\u76ee\u5185\u5934\u6587\u4ef6\n\nnamespace math_utils {\n    \n// \u524d\u5411\u58f0\u660e\nclass ComplexNumber;\nstruct Vector3D;\n\n// \u6a21\u677f\u58f0\u660e\ntemplate<typename T>\nclass Matrix;\n\n// \u5185\u8054\u51fd\u6570\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\ninline double fast_sqrt(double x) {\n    return std::sqrt(x);\n}\n\n// \u6a21\u677f\u5b9e\u73b0\ntemplate<typename T>\nconstexpr T clamp(T value, T min_val, T max_val) {\n    return (value < min_val) ? min_val : \n           (value > max_val) ? max_val : value;\n}\n\n// \u5916\u90e8\u6a21\u677f\u58f0\u660e\uff08\u51cf\u5c11\u7f16\u8bd1\u65f6\u95f4\uff09\nextern template class Matrix<float>;\nextern template class Matrix<double>;\n\n} // namespace math_utils\n'})}),"\n",(0,s.jsx)(e.h4,{id:"\u73b0\u4ee3cmake\u6784\u5efa",children:(0,s.jsx)(e.strong,{children:"\u73b0\u4ee3CMake\u6784\u5efa"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cmake",children:'# CMakeLists.txt\ncmake_minimum_required(VERSION 3.16)\nproject(MyProject VERSION 1.0.0 LANGUAGES CXX)\n\n# \u8bbe\u7f6eC++\u6807\u51c6\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# \u7f16\u8bd1\u5668\u7279\u5b9a\u8bbe\u7f6e\nif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")\n    add_compile_options(-Wall -Wextra -Wpedantic)\n    if(CMAKE_BUILD_TYPE STREQUAL "Release")\n        add_compile_options(-O3 -march=native)\n    endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")\n    add_compile_options(/W4)\n    if(CMAKE_BUILD_TYPE STREQUAL "Release")\n        add_compile_options(/O2)\n    endif()\nendif()\n\n# \u67e5\u627e\u4f9d\u8d56\nfind_package(Threads REQUIRED)\n\n# \u521b\u5efa\u5e93\nadd_library(mylib STATIC\n    src/math_utils.cpp\n    src/memory_pool.cpp\n)\n\ntarget_include_directories(mylib PUBLIC \n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>\n)\n\ntarget_link_libraries(mylib PRIVATE Threads::Threads)\n\n# \u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\nadd_executable(myapp src/main.cpp)\ntarget_link_libraries(myapp PRIVATE mylib)\n\n# \u6d4b\u8bd5\nenable_testing()\nadd_subdirectory(tests)\n'})}),"\n",(0,s.jsx)(e.h4,{id:"\u5355\u5143\u6d4b\u8bd5",children:(0,s.jsx)(e.strong,{children:"\u5355\u5143\u6d4b\u8bd5"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u4f7f\u7528Google Test\n#include <gtest/gtest.h>\n#include "math_utils.hpp"\n\nclass MathUtilsTest : public ::testing::Test {\nprotected:\n    void SetUp() override {\n        // \u6d4b\u8bd5\u524d\u51c6\u5907\n    }\n    \n    void TearDown() override {\n        // \u6d4b\u8bd5\u540e\u6e05\u7406\n    }\n};\n\nTEST_F(MathUtilsTest, ClampFunction) {\n    EXPECT_EQ(math_utils::clamp(5, 1, 10), 5);\n    EXPECT_EQ(math_utils::clamp(-5, 1, 10), 1);\n    EXPECT_EQ(math_utils::clamp(15, 1, 10), 10);\n}\n\nTEST_F(MathUtilsTest, PerformanceTest) {\n    const int iterations = 1000000;\n    auto start = std::chrono::high_resolution_clock::now();\n    \n    for (int i = 0; i < iterations; ++i) {\n        math_utils::fast_sqrt(static_cast<double>(i));\n    }\n    \n    auto end = std::chrono::high_resolution_clock::now();\n    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\n    \n    EXPECT_LT(duration.count(), 1000);  // \u5e94\u8be5\u57281\u79d2\u5185\u5b8c\u6210\n}\n\n// \u53c2\u6570\u5316\u6d4b\u8bd5\nclass ClampParameterizedTest : public ::testing::TestWithParam<std::tuple<int, int, int, int>> {};\n\nTEST_P(ClampParameterizedTest, ClampValues) {\n    auto [input, min_val, max_val, expected] = GetParam();\n    EXPECT_EQ(math_utils::clamp(input, min_val, max_val), expected);\n}\n\nINSTANTIATE_TEST_SUITE_P(\n    ClampTests,\n    ClampParameterizedTest,\n    ::testing::Values(\n        std::make_tuple(5, 1, 10, 5),\n        std::make_tuple(-5, 1, 10, 1),\n        std::make_tuple(15, 1, 10, 10)\n    )\n);\n\nint main(int argc, char** argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u6027\u80fd\u5206\u6790",children:["\ud83d\udcc8 ",(0,s.jsx)(e.strong,{children:"\u6027\u80fd\u5206\u6790"})]}),"\n",(0,s.jsx)(e.h4,{id:"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5",children:(0,s.jsx)(e.strong,{children:"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u4f7f\u7528Google Benchmark\n#include <benchmark/benchmark.h>\n#include <vector>\n#include <algorithm>\n#include <random>\n\n// \u6d4b\u8bd5\u4e0d\u540c\u6392\u5e8f\u7b97\u6cd5\nstatic void BM_StdSort(benchmark::State& state) {\n    std::vector<int> data(state.range(0));\n    std::random_device rd;\n    std::mt19937 gen(rd());\n    \n    for (auto _ : state) {\n        state.PauseTiming();\n        std::iota(data.begin(), data.end(), 0);\n        std::shuffle(data.begin(), data.end(), gen);\n        state.ResumeTiming();\n        \n        std::sort(data.begin(), data.end());\n    }\n    \n    state.SetComplexityN(state.range(0));\n}\n\nstatic void BM_StdStableSort(benchmark::State& state) {\n    std::vector<int> data(state.range(0));\n    std::random_device rd;\n    std::mt19937 gen(rd());\n    \n    for (auto _ : state) {\n        state.PauseTiming();\n        std::iota(data.begin(), data.end(), 0);\n        std::shuffle(data.begin(), data.end(), gen);\n        state.ResumeTiming();\n        \n        std::stable_sort(data.begin(), data.end());\n    }\n    \n    state.SetComplexityN(state.range(0));\n}\n\n// \u6ce8\u518c\u57fa\u51c6\u6d4b\u8bd5\nBENCHMARK(BM_StdSort)->Range(8, 8<<10)->Complexity();\nBENCHMARK(BM_StdStableSort)->Range(8, 8<<10)->Complexity();\n\nBENCHMARK_MAIN();\n"})}),"\n",(0,s.jsx)(e.h4,{id:"\u5185\u5b58\u4f7f\u7528\u5206\u6790",children:(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u4f7f\u7528\u5206\u6790"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u76d1\u63a7\nclass MemoryMonitor {\nprivate:\n    size_t peak_memory_usage = 0;\n    size_t current_memory_usage = 0;\n    \npublic:\n    void allocate(size_t bytes) {\n        current_memory_usage += bytes;\n        peak_memory_usage = std::max(peak_memory_usage, current_memory_usage);\n    }\n    \n    void deallocate(size_t bytes) {\n        current_memory_usage = (current_memory_usage > bytes) ? \n                              current_memory_usage - bytes : 0;\n    }\n    \n    size_t get_peak_usage() const { return peak_memory_usage; }\n    size_t get_current_usage() const { return current_memory_usage; }\n};\n\n// \u81ea\u5b9a\u4e49\u5206\u914d\u5668\u76d1\u63a7\u5185\u5b58\u4f7f\u7528\ntemplate<typename T>\nclass MonitoringAllocator {\nprivate:\n    static inline MemoryMonitor monitor;\n    \npublic:\n    using value_type = T;\n    \n    T* allocate(size_t n) {\n        T* ptr = static_cast<T*>(std::malloc(n * sizeof(T)));\n        if (ptr) {\n            monitor.allocate(n * sizeof(T));\n        }\n        return ptr;\n    }\n    \n    void deallocate(T* ptr, size_t n) {\n        if (ptr) {\n            monitor.deallocate(n * sizeof(T));\n            std::free(ptr);\n        }\n    }\n    \n    static MemoryMonitor& get_monitor() { return monitor; }\n};\n\nvoid memory_monitoring_example() {\n    using MonitoredVector = std::vector<int, MonitoringAllocator<int>>;\n    \n    MonitoredVector vec;\n    vec.reserve(1000);\n    \n    for (int i = 0; i < 1000; ++i) {\n        vec.push_back(i);\n    }\n    \n    auto& monitor = MonitoringAllocator<int>::get_monitor();\n    std::cout << "Peak memory usage: " << monitor.get_peak_usage() << " bytes\\n";\n    std::cout << "Current usage: " << monitor.get_current_usage() << " bytes\\n";\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"\u5b9e\u8df5\u51fa\u771f\u77e5\uff1a\u9ad8\u8d28\u91cfC/C++\u4ee3\u7801\u7684\u5de5\u7a0b\u5316\u4e4b\u8def"})})]})}function _(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);