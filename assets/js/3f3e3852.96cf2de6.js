"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9176],{97:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/STL","title":"C++ STL \u5b8c\u5168\u6307\u5357","description":"\ud83d\udcda \u76ee\u5f55","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/08_STL.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/01_c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/STL","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/STL","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/08_STL.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"knowledgSidebar","previous":{"title":"C++ Template \u5b8c\u5168\u6307\u5357","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/Template"},"next":{"title":"C# \u7f16\u7a0b\u8bed\u8a00 \u548c .Net \u6846\u67b6","permalink":"/docs/knowledge/Computer-Science/programming-languages/csharp-dotnet/"}}');var s=i(4848),t=i(8453);const l={},d="C++ STL \u5b8c\u5168\u6307\u5357",c={},u=[{value:"\ud83d\udcda \u76ee\u5f55",id:"-\u76ee\u5f55",level:2},{value:"STL\u7b80\u4ecb",id:"stl\u7b80\u4ecb",level:2},{value:"\u4ec0\u4e48\u662fSTL\uff1f",id:"\u4ec0\u4e48\u662fstl",level:3},{value:"STL\u7684\u516d\u5927\u7ec4\u4ef6",id:"stl\u7684\u516d\u5927\u7ec4\u4ef6",level:3},{value:"\u4e3a\u4ec0\u4e48\u4f7f\u7528STL\uff1f",id:"\u4e3a\u4ec0\u4e48\u4f7f\u7528stl",level:3},{value:"\u5bb9\u5668\uff08Containers\uff09",id:"\u5bb9\u5668containers",level:2},{value:"\u5bb9\u5668\u5206\u7c7b",id:"\u5bb9\u5668\u5206\u7c7b",level:3},{value:"1. vector - \u52a8\u6001\u6570\u7ec4",id:"1-vector---\u52a8\u6001\u6570\u7ec4",level:3},{value:"2. list - \u53cc\u5411\u94fe\u8868",id:"2-list---\u53cc\u5411\u94fe\u8868",level:3},{value:"3. deque - \u53cc\u7aef\u961f\u5217",id:"3-deque---\u53cc\u7aef\u961f\u5217",level:3},{value:"4. set - \u96c6\u5408\uff08\u552f\u4e00\uff0c\u81ea\u52a8\u6392\u5e8f\uff09",id:"4-set---\u96c6\u5408\u552f\u4e00\u81ea\u52a8\u6392\u5e8f",level:3},{value:"5. map - \u6620\u5c04\uff08\u952e\u503c\u5bf9\uff09",id:"5-map---\u6620\u5c04\u952e\u503c\u5bf9",level:3},{value:"6. unordered_map - \u54c8\u5e0c\u6620\u5c04",id:"6-unordered_map---\u54c8\u5e0c\u6620\u5c04",level:3},{value:"7. stack - \u6808\uff08LIFO\uff09",id:"7-stack---\u6808lifo",level:3},{value:"8. queue - \u961f\u5217\uff08FIFO\uff09",id:"8-queue---\u961f\u5217fifo",level:3},{value:"9. priority_queue - \u4f18\u5148\u961f\u5217",id:"9-priority_queue---\u4f18\u5148\u961f\u5217",level:3},{value:"\u8fed\u4ee3\u5668\uff08Iterators\uff09",id:"\u8fed\u4ee3\u5668iterators",level:2},{value:"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\uff1f",id:"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668",level:3},{value:"\u8fed\u4ee3\u5668\u7c7b\u578b",id:"\u8fed\u4ee3\u5668\u7c7b\u578b",level:3},{value:"\u8fed\u4ee3\u5668\u64cd\u4f5c",id:"\u8fed\u4ee3\u5668\u64cd\u4f5c",level:3},{value:"\u7b97\u6cd5\uff08Algorithms\uff09",id:"\u7b97\u6cd5algorithms",level:2},{value:"\u5e38\u7528\u7b97\u6cd5\u5206\u7c7b",id:"\u5e38\u7528\u7b97\u6cd5\u5206\u7c7b",level:3},{value:"1. \u67e5\u627e\u7b97\u6cd5",id:"1-\u67e5\u627e\u7b97\u6cd5",level:3},{value:"2. \u6392\u5e8f\u7b97\u6cd5",id:"2-\u6392\u5e8f\u7b97\u6cd5",level:3},{value:"3. \u53d8\u6362\u7b97\u6cd5",id:"3-\u53d8\u6362\u7b97\u6cd5",level:3},{value:"4. \u7d2f\u52a0\u7b97\u6cd5",id:"4-\u7d2f\u52a0\u7b97\u6cd5",level:3},{value:"5. \u6700\u503c\u7b97\u6cd5",id:"5-\u6700\u503c\u7b97\u6cd5",level:3},{value:"\u51fd\u6570\u5bf9\u8c61\uff08Functors\uff09",id:"\u51fd\u6570\u5bf9\u8c61functors",level:2},{value:"\u4ec0\u4e48\u662f\u51fd\u6570\u5bf9\u8c61\uff1f",id:"\u4ec0\u4e48\u662f\u51fd\u6570\u5bf9\u8c61",level:3},{value:"STL\u5185\u7f6e\u51fd\u6570\u5bf9\u8c61",id:"stl\u5185\u7f6e\u51fd\u6570\u5bf9\u8c61",level:3},{value:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b",id:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b",level:2},{value:"\u793a\u4f8b1\uff1a\u5b66\u751f\u6210\u7ee9\u7ba1\u7406\u7cfb\u7edf",id:"\u793a\u4f8b1\u5b66\u751f\u6210\u7ee9\u7ba1\u7406\u7cfb\u7edf",level:3},{value:"\u793a\u4f8b2\uff1a\u5355\u8bcd\u9891\u7387\u7edf\u8ba1",id:"\u793a\u4f8b2\u5355\u8bcd\u9891\u7387\u7edf\u8ba1",level:3},{value:"\u793a\u4f8b3\uff1a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf",id:"\u793a\u4f8b3\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf",level:3},{value:"\u6027\u80fd\u5bf9\u6bd4",id:"\u6027\u80fd\u5bf9\u6bd4",level:2},{value:"\u5bb9\u5668\u6027\u80fd\u7279\u6027",id:"\u5bb9\u5668\u6027\u80fd\u7279\u6027",level:3},{value:"\u9009\u62e9\u6307\u5357",id:"\u9009\u62e9\u6307\u5357",level:3},{value:"\u6700\u4f73\u5b9e\u8df5",id:"\u6700\u4f73\u5b9e\u8df5",level:2},{value:"1. \u4f7f\u7528\u8303\u56f4for\u5faa\u73af",id:"1-\u4f7f\u7528\u8303\u56f4for\u5faa\u73af",level:3},{value:"2. \u4f7f\u7528auto\u7b80\u5316\u4ee3\u7801",id:"2-\u4f7f\u7528auto\u7b80\u5316\u4ee3\u7801",level:3},{value:"3. \u9884\u5206\u914d\u5bb9\u91cf",id:"3-\u9884\u5206\u914d\u5bb9\u91cf",level:3},{value:"4. \u4f7f\u7528emplace\u4ee3\u66ffpush",id:"4-\u4f7f\u7528emplace\u4ee3\u66ffpush",level:3},{value:"5. \u4f7f\u7528const\u5f15\u7528\u907f\u514d\u62f7\u8d1d",id:"5-\u4f7f\u7528const\u5f15\u7528\u907f\u514d\u62f7\u8d1d",level:3},{value:"6. \u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668",id:"6-\u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2},{value:"STL\u6838\u5fc3\u6982\u5ff5",id:"stl\u6838\u5fc3\u6982\u5ff5",level:3},{value:"\u5feb\u901f\u53c2\u8003",id:"\u5feb\u901f\u53c2\u8003",level:3},{value:"\u5b66\u4e60\u5efa\u8bae",id:"\u5b66\u4e60\u5efa\u8bae",level:3}];function o(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"c-stl-\u5b8c\u5168\u6307\u5357",children:"C++ STL \u5b8c\u5168\u6307\u5357"})}),"\n",(0,s.jsx)(e.h2,{id:"-\u76ee\u5f55",children:"\ud83d\udcda \u76ee\u5f55"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#STL%E7%AE%80%E4%BB%8B",children:"STL\u7b80\u4ecb"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E5%AE%B9%E5%99%A8Containers",children:"\u5bb9\u5668\uff08Containers\uff09"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E8%BF%AD%E4%BB%A3%E5%99%A8Iterators",children:"\u8fed\u4ee3\u5668\uff08Iterators\uff09"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E7%AE%97%E6%B3%95Algorithms",children:"\u7b97\u6cd5\uff08Algorithms\uff09"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1Functors",children:"\u51fd\u6570\u5bf9\u8c61\uff08Functors\uff09"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E9%80%82%E9%85%8D%E5%99%A8Adapters",children:"\u9002\u914d\u5668\uff08Adapters\uff09"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7",children:"\u5b9e\u7528\u5de5\u5177"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B",children:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94",children:"\u6027\u80fd\u5bf9\u6bd4"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5",children:"\u6700\u4f73\u5b9e\u8df5"})}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"stl\u7b80\u4ecb",children:"STL\u7b80\u4ecb"}),"\n",(0,s.jsx)(e.h3,{id:"\u4ec0\u4e48\u662fstl",children:"\u4ec0\u4e48\u662fSTL\uff1f"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"STL\uff08Standard Template Library\uff0c\u6807\u51c6\u6a21\u677f\u5e93\uff09"})," \u662fC++\u6807\u51c6\u5e93\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u63d0\u4f9b\u4e86\u4e00\u5957\u901a\u7528\u7684\u3001\u9ad8\u6548\u7684\u3001\u7ecf\u8fc7\u5145\u5206\u6d4b\u8bd5\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"stl\u7684\u516d\u5927\u7ec4\u4ef6",children:"STL\u7684\u516d\u5927\u7ec4\u4ef6"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              C++ STL                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1. \u5bb9\u5668 (Containers)                   \u2502\n\u2502     - \u5b58\u50a8\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784                \u2502\n\u2502                                         \u2502\n\u2502  2. \u8fed\u4ee3\u5668 (Iterators)                  \u2502\n\u2502     - \u904d\u5386\u5bb9\u5668\u7684"\u6307\u9488"                  \u2502\n\u2502                                         \u2502\n\u2502  3. \u7b97\u6cd5 (Algorithms)                   \u2502\n\u2502     - \u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u51fd\u6570              \u2502\n\u2502                                         \u2502\n\u2502  4. \u51fd\u6570\u5bf9\u8c61 (Functors)                 \u2502\n\u2502     - \u53ef\u8c03\u7528\u7684\u5bf9\u8c61                      \u2502\n\u2502                                         \u2502\n\u2502  5. \u9002\u914d\u5668 (Adapters)                   \u2502\n\u2502     - \u6539\u53d8\u63a5\u53e3\u7684\u5305\u88c5\u5668                  \u2502\n\u2502                                         \u2502\n\u2502  6. \u5206\u914d\u5668 (Allocators)                 \u2502\n\u2502     - \u7ba1\u7406\u5185\u5b58\u5206\u914d                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u4e3a\u4ec0\u4e48\u4f7f\u7528stl",children:"\u4e3a\u4ec0\u4e48\u4f7f\u7528STL\uff1f"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u274c \u4e0d\u4f7f\u7528STL - \u81ea\u5df1\u5b9e\u73b0\u52a8\u6001\u6570\u7ec4\nclass MyArray {\n    int* data;\n    int size;\n    int capacity;\npublic:\n    MyArray() : data(nullptr), size(0), capacity(0) {}\n    ~MyArray() { delete[] data; }\n    void push_back(int value) {\n        if (size == capacity) {\n            // \u9700\u8981\u81ea\u5df1\u5904\u7406\u6269\u5bb9\n            capacity = capacity == 0 ? 1 : capacity * 2;\n            int* newData = new int[capacity];\n            for (int i = 0; i < size; i++) {\n                newData[i] = data[i];\n            }\n            delete[] data;\n            data = newData;\n        }\n        data[size++] = value;\n    }\n    // ... \u8fd8\u9700\u8981\u5b9e\u73b0\u5f88\u591a\u65b9\u6cd5\n};\n\n// \u2705 \u4f7f\u7528STL - \u7b80\u5355\u9ad8\u6548\n#include <vector>\nvector<int> numbers;\nnumbers.push_back(42);\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u4f18\u52bf\uff1a"})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u8282\u7701\u65f6\u95f4"})," - \u4e0d\u9700\u8981\u91cd\u590d\u9020\u8f6e\u5b50"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u9ad8\u6548"})," - \u7ecf\u8fc7\u4f18\u5316\u7684\u5b9e\u73b0"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u53ef\u9760"})," - \u7ecf\u8fc7\u5927\u91cf\u6d4b\u8bd5"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u6807\u51c6\u5316"})," - \u6240\u6709C++\u7f16\u8bd1\u5668\u90fd\u652f\u6301"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u901a\u7528"})," - \u9002\u7528\u4e8e\u5404\u79cd\u6570\u636e\u7c7b\u578b"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u5bb9\u5668containers",children:"\u5bb9\u5668\uff08Containers\uff09"}),"\n",(0,s.jsx)(e.h3,{id:"\u5bb9\u5668\u5206\u7c7b",children:"\u5bb9\u5668\u5206\u7c7b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"\u5bb9\u5668 (Containers)\n\u2502\n\u251c\u2500\u2500 \u5e8f\u5217\u5bb9\u5668 (Sequence Containers)\n\u2502   \u251c\u2500\u2500 vector      - \u52a8\u6001\u6570\u7ec4\n\u2502   \u251c\u2500\u2500 deque       - \u53cc\u7aef\u961f\u5217\n\u2502   \u251c\u2500\u2500 list        - \u53cc\u5411\u94fe\u8868\n\u2502   \u251c\u2500\u2500 forward_list - \u5355\u5411\u94fe\u8868\n\u2502   \u2514\u2500\u2500 array       - \u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4\n\u2502\n\u251c\u2500\u2500 \u5173\u8054\u5bb9\u5668 (Associative Containers)\n\u2502   \u251c\u2500\u2500 set         - \u96c6\u5408\uff08\u552f\u4e00\uff0c\u6709\u5e8f\uff09\n\u2502   \u251c\u2500\u2500 multiset    - \u591a\u91cd\u96c6\u5408\uff08\u53ef\u91cd\u590d\uff0c\u6709\u5e8f\uff09\n\u2502   \u251c\u2500\u2500 map         - \u6620\u5c04\uff08\u952e\u503c\u5bf9\uff0c\u552f\u4e00\u952e\uff09\n\u2502   \u2514\u2500\u2500 multimap    - \u591a\u91cd\u6620\u5c04\uff08\u53ef\u91cd\u590d\u952e\uff09\n\u2502\n\u251c\u2500\u2500 \u65e0\u5e8f\u5173\u8054\u5bb9\u5668 (Unordered Containers)\n\u2502   \u251c\u2500\u2500 unordered_set      - \u54c8\u5e0c\u96c6\u5408\n\u2502   \u251c\u2500\u2500 unordered_multiset - \u54c8\u5e0c\u591a\u91cd\u96c6\u5408\n\u2502   \u251c\u2500\u2500 unordered_map      - \u54c8\u5e0c\u6620\u5c04\n\u2502   \u2514\u2500\u2500 unordered_multimap - \u54c8\u5e0c\u591a\u91cd\u6620\u5c04\n\u2502\n\u2514\u2500\u2500 \u5bb9\u5668\u9002\u914d\u5668 (Container Adapters)\n    \u251c\u2500\u2500 stack       - \u6808\uff08LIFO\uff09\n    \u251c\u2500\u2500 queue       - \u961f\u5217\uff08FIFO\uff09\n    \u2514\u2500\u2500 priority_queue - \u4f18\u5148\u961f\u5217\n"})}),"\n",(0,s.jsx)(e.h3,{id:"1-vector---\u52a8\u6001\u6570\u7ec4",children:"1. vector - \u52a8\u6001\u6570\u7ec4"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    // \u521b\u5efa vector\n    vector<int> numbers;                    // \u7a7a\n    vector<int> numbers2(10);               // 10\u4e2a\u5143\u7d20\uff0c\u9ed8\u8ba4\u503c0\n    vector<int> numbers3(10, 5);            // 10\u4e2a\u5143\u7d20\uff0c\u503c\u90fd\u662f5\n    vector<int> numbers4 = {1, 2, 3, 4, 5}; // \u521d\u59cb\u5316\u5217\u8868\n    \n    // \u6dfb\u52a0\u5143\u7d20\n    numbers.push_back(10);      // \u672b\u5c3e\u6dfb\u52a0\n    numbers.push_back(20);\n    numbers.push_back(30);\n    \n    // \u8bbf\u95ee\u5143\u7d20\n    cout << numbers[0] << endl;      // 10 (\u4e0d\u68c0\u67e5\u8d8a\u754c)\n    cout << numbers.at(1) << endl;   // 20 (\u68c0\u67e5\u8d8a\u754c)\n    cout << numbers.front() << endl; // 10 (\u7b2c\u4e00\u4e2a)\n    cout << numbers.back() << endl;  // 30 (\u6700\u540e\u4e00\u4e2a)\n    \n    // \u5927\u5c0f\u548c\u5bb9\u91cf\n    cout << "Size: " << numbers.size() << endl;       // \u5f53\u524d\u5143\u7d20\u6570\u91cf\n    cout << "Capacity: " << numbers.capacity() << endl; // \u5bb9\u91cf\n    cout << "Empty: " << numbers.empty() << endl;     // \u662f\u5426\u4e3a\u7a7a\n    \n    // \u4fee\u6539\u5143\u7d20\n    numbers[0] = 100;\n    \n    // \u5220\u9664\u5143\u7d20\n    numbers.pop_back();           // \u5220\u9664\u6700\u540e\u4e00\u4e2a\n    numbers.erase(numbers.begin()); // \u5220\u9664\u7b2c\u4e00\u4e2a\n    numbers.clear();              // \u6e05\u7a7a\u6240\u6709\u5143\u7d20\n    \n    // \u63d2\u5165\u5143\u7d20\n    numbers.insert(numbers.begin(), 99);  // \u5728\u5f00\u5934\u63d2\u5165\n    \n    // \u904d\u5386\n    for (int num : numbers) {\n        cout << num << " ";\n    }\n    cout << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u7279\u70b9\uff1a"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u2705 \u968f\u673a\u8bbf\u95ee\u5feb\uff08O(1)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u672b\u5c3e\u6dfb\u52a0/\u5220\u9664\u5feb\uff08O(1)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u274c \u4e2d\u95f4\u63d2\u5165/\u5220\u9664\u6162\uff08O(n)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u5185\u5b58\u8fde\u7eed"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-list---\u53cc\u5411\u94fe\u8868",children:"2. list - \u53cc\u5411\u94fe\u8868"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <list>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    list<int> numbers = {1, 2, 3, 4, 5};\n    \n    // \u6dfb\u52a0\u5143\u7d20\n    numbers.push_front(0);  // \u5f00\u5934\u6dfb\u52a0\n    numbers.push_back(6);   // \u672b\u5c3e\u6dfb\u52a0\n    \n    // \u5220\u9664\u5143\u7d20\n    numbers.pop_front();    // \u5220\u9664\u5f00\u5934\n    numbers.pop_back();     // \u5220\u9664\u672b\u5c3e\n    \n    // \u63d2\u5165\u5143\u7d20\uff08\u9700\u8981\u8fed\u4ee3\u5668\uff09\n    auto it = numbers.begin();\n    advance(it, 2);         // \u79fb\u52a8\u5230\u7b2c3\u4e2a\u4f4d\u7f6e\n    numbers.insert(it, 99); // \u63d2\u5165\n    \n    // \u904d\u5386\n    for (int num : numbers) {\n        cout << num << " ";\n    }\n    cout << endl;\n    \n    // \u6392\u5e8f\n    numbers.sort();\n    \n    // \u53cd\u8f6c\n    numbers.reverse();\n    \n    // \u53bb\u91cd\uff08\u9700\u8981\u5148\u6392\u5e8f\uff09\n    numbers.unique();\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u7279\u70b9\uff1a"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u274c \u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664\u5feb\uff08O(1)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u274c \u5185\u5b58\u4e0d\u8fde\u7eed"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"3-deque---\u53cc\u7aef\u961f\u5217",children:"3. deque - \u53cc\u7aef\u961f\u5217"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <deque>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    deque<int> dq = {3, 4, 5};\n    \n    // \u4e24\u7aef\u64cd\u4f5c\n    dq.push_front(2);  // \u524d\u7aef\u6dfb\u52a0\n    dq.push_back(6);   // \u540e\u7aef\u6dfb\u52a0\n    dq.pop_front();    // \u5220\u9664\u524d\u7aef\n    dq.pop_back();     // \u5220\u9664\u540e\u7aef\n    \n    // \u652f\u6301\u968f\u673a\u8bbf\u95ee\n    cout << dq[0] << endl;\n    \n    // \u904d\u5386\n    for (int num : dq) {\n        cout << num << " ";\n    }\n    cout << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u7279\u70b9\uff1a"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u2705 \u968f\u673a\u8bbf\u95ee\uff08O(1)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u4e24\u7aef\u6dfb\u52a0/\u5220\u9664\u5feb\uff08O(1)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u274c \u4e2d\u95f4\u63d2\u5165/\u5220\u9664\u6162\uff08O(n)\uff09"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"4-set---\u96c6\u5408\u552f\u4e00\u81ea\u52a8\u6392\u5e8f",children:"4. set - \u96c6\u5408\uff08\u552f\u4e00\uff0c\u81ea\u52a8\u6392\u5e8f\uff09"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <set>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    set<int> numbers = {3, 1, 4, 1, 5, 9, 2, 6};\n    \n    // \u81ea\u52a8\u53bb\u91cd\u548c\u6392\u5e8f\n    // \u8f93\u51fa: 1 2 3 4 5 6 9\n    for (int num : numbers) {\n        cout << num << " ";\n    }\n    cout << endl;\n    \n    // \u63d2\u5165\u5143\u7d20\n    numbers.insert(7);\n    numbers.insert(1);  // \u91cd\u590d\uff0c\u4e0d\u4f1a\u63d2\u5165\n    \n    // \u67e5\u627e\u5143\u7d20\n    if (numbers.find(5) != numbers.end()) {\n        cout << "Found 5" << endl;\n    }\n    \n    // \u5220\u9664\u5143\u7d20\n    numbers.erase(3);   // \u5220\u9664\u503c\u4e3a3\u7684\u5143\u7d20\n    \n    // \u8ba1\u6570\uff08\u53ea\u4f1a\u662f0\u62161\uff09\n    cout << numbers.count(5) << endl;  // 1\n    \n    // \u5927\u5c0f\n    cout << "Size: " << numbers.size() << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u7279\u70b9\uff1a"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u2705 \u5143\u7d20\u552f\u4e00"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u81ea\u52a8\u6392\u5e8f"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u67e5\u627e\u5feb\uff08O(log n)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"5-map---\u6620\u5c04\u952e\u503c\u5bf9",children:"5. map - \u6620\u5c04\uff08\u952e\u503c\u5bf9\uff09"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <map>\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    // \u521b\u5efa map\n    map<string, int> ages;\n    \n    // \u6dfb\u52a0\u5143\u7d20\n    ages["Alice"] = 25;\n    ages["Bob"] = 30;\n    ages["Charlie"] = 35;\n    ages.insert({"David", 28});\n    ages.insert(make_pair("Eve", 22));\n    \n    // \u8bbf\u95ee\u5143\u7d20\n    cout << ages["Alice"] << endl;  // 25\n    \n    // \u67e5\u627e\u5143\u7d20\n    if (ages.find("Bob") != ages.end()) {\n        cout << "Bob\'s age: " << ages["Bob"] << endl;\n    }\n    \n    // \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n    if (ages.count("Frank") == 0) {\n        cout << "Frank not found" << endl;\n    }\n    \n    // \u904d\u5386\n    for (const auto& pair : ages) {\n        cout << pair.first << ": " << pair.second << endl;\n    }\n    \n    // \u5220\u9664\u5143\u7d20\n    ages.erase("Charlie");\n    \n    // \u5927\u5c0f\n    cout << "Size: " << ages.size() << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u7279\u70b9\uff1a"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u2705 \u952e\u552f\u4e00"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u6309\u952e\u81ea\u52a8\u6392\u5e8f"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u67e5\u627e\u5feb\uff08O(log n)\uff09"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"6-unordered_map---\u54c8\u5e0c\u6620\u5c04",children:"6. unordered_map - \u54c8\u5e0c\u6620\u5c04"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <unordered_map>\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    unordered_map<string, int> scores;\n    \n    // \u6dfb\u52a0\u5143\u7d20\n    scores["Alice"] = 95;\n    scores["Bob"] = 87;\n    scores["Charlie"] = 92;\n    \n    // \u8bbf\u95ee\uff08\u6bd4 map \u66f4\u5feb\uff09\n    cout << scores["Alice"] << endl;\n    \n    // \u904d\u5386\uff08\u987a\u5e8f\u4e0d\u786e\u5b9a\uff09\n    for (const auto& pair : scores) {\n        cout << pair.first << ": " << pair.second << endl;\n    }\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\u7279\u70b9\uff1a"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u2705 \u67e5\u627e\u66f4\u5feb\uff08\u5e73\u5747O(1)\uff09"}),"\n",(0,s.jsx)(e.li,{children:"\u274c \u4e0d\u6392\u5e8f"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \u57fa\u4e8e\u54c8\u5e0c\u8868"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"7-stack---\u6808lifo",children:"7. stack - \u6808\uff08LIFO\uff09"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <stack>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    stack<int> s;\n    \n    // \u5165\u6808\n    s.push(1);\n    s.push(2);\n    s.push(3);\n    \n    // \u6808\u9876\u5143\u7d20\n    cout << s.top() << endl;  // 3\n    \n    // \u51fa\u6808\n    s.pop();  // \u79fb\u96643\n    cout << s.top() << endl;  // 2\n    \n    // \u5927\u5c0f\n    cout << "Size: " << s.size() << endl;\n    \n    // \u662f\u5426\u4e3a\u7a7a\n    if (!s.empty()) {\n        cout << "Stack is not empty" << endl;\n    }\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"8-queue---\u961f\u5217fifo",children:"8. queue - \u961f\u5217\uff08FIFO\uff09"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"#include <queue>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    queue<int> q;\n    \n    // \u5165\u961f\n    q.push(1);\n    q.push(2);\n    q.push(3);\n    \n    // \u961f\u9996\u5143\u7d20\n    cout << q.front() << endl;  // 1\n    \n    // \u961f\u5c3e\u5143\u7d20\n    cout << q.back() << endl;   // 3\n    \n    // \u51fa\u961f\n    q.pop();  // \u79fb\u96641\n    cout << q.front() << endl;  // 2\n    \n    return 0;\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"9-priority_queue---\u4f18\u5148\u961f\u5217",children:"9. priority_queue - \u4f18\u5148\u961f\u5217"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <queue>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    // \u9ed8\u8ba4\uff1a\u6700\u5927\u5806\n    priority_queue<int> pq;\n    \n    pq.push(3);\n    pq.push(1);\n    pq.push(4);\n    pq.push(2);\n    \n    // \u603b\u662f\u8fd4\u56de\u6700\u5927\u503c\n    while (!pq.empty()) {\n        cout << pq.top() << " ";  // 4 3 2 1\n        pq.pop();\n    }\n    cout << endl;\n    \n    // \u6700\u5c0f\u5806\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    \n    minHeap.push(3);\n    minHeap.push(1);\n    minHeap.push(4);\n    \n    while (!minHeap.empty()) {\n        cout << minHeap.top() << " ";  // 1 3 4\n        minHeap.pop();\n    }\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u8fed\u4ee3\u5668iterators",children:"\u8fed\u4ee3\u5668\uff08Iterators\uff09"}),"\n",(0,s.jsx)(e.h3,{id:"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668",children:"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\uff1f"}),"\n",(0,s.jsx)(e.p,{children:'\u8fed\u4ee3\u5668\u662f"\u667a\u80fd\u6307\u9488"\uff0c\u7528\u4e8e\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002'}),"\n",(0,s.jsx)(e.h3,{id:"\u8fed\u4ee3\u5668\u7c7b\u578b",children:"\u8fed\u4ee3\u5668\u7c7b\u578b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    // 1. begin() \u548c end()\n    auto it = numbers.begin();  // \u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\n    auto end = numbers.end();   // \u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n    \n    // 2. \u904d\u5386\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        cout << *it << " ";  // \u89e3\u5f15\u7528\u83b7\u53d6\u503c\n    }\n    cout << endl;\n    \n    // 3. rbegin() \u548c rend() - \u53cd\u5411\u8fed\u4ee3\u5668\n    for (auto it = numbers.rbegin(); it != numbers.rend(); ++it) {\n        cout << *it << " ";  // 5 4 3 2 1\n    }\n    cout << endl;\n    \n    // 4. const \u8fed\u4ee3\u5668\n    for (auto it = numbers.cbegin(); it != numbers.cend(); ++it) {\n        // *it = 10;  // \u9519\u8bef\uff01\u4e0d\u80fd\u4fee\u6539\n        cout << *it << " ";\n    }\n    cout << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u8fed\u4ee3\u5668\u64cd\u4f5c",children:"\u8fed\u4ee3\u5668\u64cd\u4f5c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {10, 20, 30, 40, 50};\n    \n    auto it = numbers.begin();\n    \n    // \u8bbf\u95ee\n    cout << *it << endl;      // 10\n    \n    // \u79fb\u52a8\n    ++it;                     // \u4e0b\u4e00\u4e2a\n    cout << *it << endl;      // 20\n    \n    --it;                     // \u4e0a\u4e00\u4e2a\n    cout << *it << endl;      // 10\n    \n    it += 2;                  // \u524d\u8fdb2\u4e2a\u4f4d\u7f6e\n    cout << *it << endl;      // 30\n    \n    // \u8ddd\u79bb\n    auto distance = numbers.end() - numbers.begin();\n    cout << "Distance: " << distance << endl;  // 5\n    \n    // \u6bd4\u8f83\n    if (it != numbers.end()) {\n        cout << "Not at end" << endl;\n    }\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u7b97\u6cd5algorithms",children:"\u7b97\u6cd5\uff08Algorithms\uff09"}),"\n",(0,s.jsxs)(e.p,{children:["STL\u63d0\u4f9b\u4e8680\u591a\u4e2a\u7b97\u6cd5\uff0c\u90fd\u5728 ",(0,s.jsx)(e.code,{children:"<algorithm>"})," \u5934\u6587\u4ef6\u4e2d\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"\u5e38\u7528\u7b97\u6cd5\u5206\u7c7b",children:"\u5e38\u7528\u7b97\u6cd5\u5206\u7c7b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"\u7b97\u6cd5 (Algorithms)\n\u2502\n\u251c\u2500\u2500 \u975e\u4fee\u6539\u5e8f\u5217\u7b97\u6cd5\n\u2502   \u251c\u2500\u2500 find, find_if        - \u67e5\u627e\n\u2502   \u251c\u2500\u2500 count, count_if      - \u8ba1\u6570\n\u2502   \u251c\u2500\u2500 all_of, any_of       - \u6761\u4ef6\u5224\u65ad\n\u2502   \u2514\u2500\u2500 for_each             - \u904d\u5386\n\u2502\n\u251c\u2500\u2500 \u4fee\u6539\u5e8f\u5217\u7b97\u6cd5\n\u2502   \u251c\u2500\u2500 copy, copy_if        - \u590d\u5236\n\u2502   \u251c\u2500\u2500 fill, fill_n         - \u586b\u5145\n\u2502   \u251c\u2500\u2500 transform            - \u53d8\u6362\n\u2502   \u251c\u2500\u2500 replace              - \u66ff\u6362\n\u2502   \u2514\u2500\u2500 remove, remove_if    - \u5220\u9664\n\u2502\n\u251c\u2500\u2500 \u6392\u5e8f\u7b97\u6cd5\n\u2502   \u251c\u2500\u2500 sort                 - \u6392\u5e8f\n\u2502   \u251c\u2500\u2500 stable_sort          - \u7a33\u5b9a\u6392\u5e8f\n\u2502   \u251c\u2500\u2500 partial_sort         - \u90e8\u5206\u6392\u5e8f\n\u2502   \u2514\u2500\u2500 nth_element          - \u7b2cn\u4e2a\u5143\u7d20\n\u2502\n\u251c\u2500\u2500 \u4e8c\u5206\u67e5\u627e\n\u2502   \u251c\u2500\u2500 binary_search        - \u4e8c\u5206\u67e5\u627e\n\u2502   \u251c\u2500\u2500 lower_bound          - \u4e0b\u754c\n\u2502   \u2514\u2500\u2500 upper_bound          - \u4e0a\u754c\n\u2502\n\u2514\u2500\u2500 \u5176\u4ed6\u7b97\u6cd5\n    \u251c\u2500\u2500 min, max             - \u6700\u503c\n    \u251c\u2500\u2500 min_element, max_element - \u6700\u503c\u5143\u7d20\n    \u251c\u2500\u2500 accumulate           - \u7d2f\u52a0\n    \u2514\u2500\u2500 reverse              - \u53cd\u8f6c\n"})}),"\n",(0,s.jsx)(e.h3,{id:"1-\u67e5\u627e\u7b97\u6cd5",children:"1. \u67e5\u627e\u7b97\u6cd5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <algorithm>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    // find - \u67e5\u627e\u5143\u7d20\n    auto it = find(numbers.begin(), numbers.end(), 5);\n    if (it != numbers.end()) {\n        cout << "Found: " << *it << endl;\n        cout << "Position: " << distance(numbers.begin(), it) << endl;\n    }\n    \n    // find_if - \u6761\u4ef6\u67e5\u627e\n    auto it2 = find_if(numbers.begin(), numbers.end(), [](int x) {\n        return x > 5;\n    });\n    cout << "First element > 5: " << *it2 << endl;\n    \n    // count - \u8ba1\u6570\n    int count = count(numbers.begin(), numbers.end(), 3);\n    cout << "Count of 3: " << count << endl;\n    \n    // count_if - \u6761\u4ef6\u8ba1\u6570\n    int evenCount = count_if(numbers.begin(), numbers.end(), [](int x) {\n        return x % 2 == 0;\n    });\n    cout << "Even numbers: " << evenCount << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-\u6392\u5e8f\u7b97\u6cd5",children:"2. \u6392\u5e8f\u7b97\u6cd5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <algorithm>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {5, 2, 8, 1, 9, 3, 7, 4, 6};\n    \n    // sort - \u5347\u5e8f\u6392\u5e8f\n    sort(numbers.begin(), numbers.end());\n    for (int num : numbers) cout << num << " ";\n    cout << endl;\n    \n    // sort - \u964d\u5e8f\u6392\u5e8f\n    sort(numbers.begin(), numbers.end(), greater<int>());\n    for (int num : numbers) cout << num << " ";\n    cout << endl;\n    \n    // sort - \u81ea\u5b9a\u4e49\u6bd4\u8f83\n    sort(numbers.begin(), numbers.end(), [](int a, int b) {\n        return abs(a - 5) < abs(b - 5);  // \u6309\u4e0e5\u7684\u8ddd\u79bb\u6392\u5e8f\n    });\n    \n    // reverse - \u53cd\u8f6c\n    reverse(numbers.begin(), numbers.end());\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"3-\u53d8\u6362\u7b97\u6cd5",children:"3. \u53d8\u6362\u7b97\u6cd5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <algorithm>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    vector<int> squared(5);\n    \n    // transform - \u53d8\u6362\u6bcf\u4e2a\u5143\u7d20\n    transform(numbers.begin(), numbers.end(), squared.begin(), [](int x) {\n        return x * x;\n    });\n    \n    for (int num : squared) cout << num << " ";  // 1 4 9 16 25\n    cout << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"4-\u7d2f\u52a0\u7b97\u6cd5",children:"4. \u7d2f\u52a0\u7b97\u6cd5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <numeric>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    // accumulate - \u7d2f\u52a0\n    int sum = accumulate(numbers.begin(), numbers.end(), 0);\n    cout << "Sum: " << sum << endl;  // 15\n    \n    // accumulate - \u7d2f\u4e58\n    int product = accumulate(numbers.begin(), numbers.end(), 1, \n                            [](int a, int b) { return a * b; });\n    cout << "Product: " << product << endl;  // 120\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"5-\u6700\u503c\u7b97\u6cd5",children:"5. \u6700\u503c\u7b97\u6cd5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <algorithm>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {3, 1, 4, 1, 5, 9, 2, 6};\n    \n    // min_element - \u6700\u5c0f\u5143\u7d20\n    auto minIt = min_element(numbers.begin(), numbers.end());\n    cout << "Min: " << *minIt << endl;\n    \n    // max_element - \u6700\u5927\u5143\u7d20\n    auto maxIt = max_element(numbers.begin(), numbers.end());\n    cout << "Max: " << *maxIt << endl;\n    \n    // minmax_element - \u540c\u65f6\u627e\u6700\u5c0f\u548c\u6700\u5927\n    auto [minIt2, maxIt2] = minmax_element(numbers.begin(), numbers.end());\n    cout << "Min: " << *minIt2 << ", Max: " << *maxIt2 << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u51fd\u6570\u5bf9\u8c61functors",children:"\u51fd\u6570\u5bf9\u8c61\uff08Functors\uff09"}),"\n",(0,s.jsx)(e.h3,{id:"\u4ec0\u4e48\u662f\u51fd\u6570\u5bf9\u8c61",children:"\u4ec0\u4e48\u662f\u51fd\u6570\u5bf9\u8c61\uff1f"}),"\n",(0,s.jsxs)(e.p,{children:["\u51fd\u6570\u5bf9\u8c61\u662f\u91cd\u8f7d\u4e86 ",(0,s.jsx)(e.code,{children:"operator()"})," \u7684\u7c7b\uff0c\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// \u51fd\u6570\u5bf9\u8c61\nclass Multiply {\nprivate:\n    int factor;\n    \npublic:\n    Multiply(int f) : factor(f) {}\n    \n    int operator()(int x) const {\n        return x * factor;\n    }\n};\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    // \u4f7f\u7528\u51fd\u6570\u5bf9\u8c61\n    Multiply multiplyBy3(3);\n    \n    for (int num : numbers) {\n        cout << multiplyBy3(num) << " ";  // 3 6 9 12 15\n    }\n    cout << endl;\n    \n    // \u4e0e\u7b97\u6cd5\u7ed3\u5408\n    vector<int> result(5);\n    transform(numbers.begin(), numbers.end(), result.begin(), Multiply(2));\n    \n    for (int num : result) cout << num << " ";  // 2 4 6 8 10\n    cout << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stl\u5185\u7f6e\u51fd\u6570\u5bf9\u8c61",children:"STL\u5185\u7f6e\u51fd\u6570\u5bf9\u8c61"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"#include <functional>\n#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {5, 2, 8, 1, 9};\n    \n    // \u7b97\u672f\u51fd\u6570\u5bf9\u8c61\n    plus<int> add;\n    minus<int> subtract;\n    multiplies<int> multiply;\n    \n    cout << add(3, 4) << endl;      // 7\n    cout << subtract(10, 3) << endl; // 7\n    cout << multiply(5, 6) << endl; // 30\n    \n    // \u6bd4\u8f83\u51fd\u6570\u5bf9\u8c61\n    sort(numbers.begin(), numbers.end(), greater<int>());  // \u964d\u5e8f\n    \n    // \u903b\u8f91\u51fd\u6570\u5bf9\u8c61\n    logical_and<bool> andOp;\n    logical_or<bool> orOp;\n    \n    cout << andOp(true, false) << endl;  // 0\n    cout << orOp(true, false) << endl;   // 1\n    \n    return 0;\n}\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b",children:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b"}),"\n",(0,s.jsx)(e.h3,{id:"\u793a\u4f8b1\u5b66\u751f\u6210\u7ee9\u7ba1\u7406\u7cfb\u7edf",children:"\u793a\u4f8b1\uff1a\u5b66\u751f\u6210\u7ee9\u7ba1\u7406\u7cfb\u7edf"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <string>\nusing namespace std;\n\nstruct Student {\n    string name;\n    int score;\n    \n    Student(string n, int s) : name(n), score(s) {}\n};\n\nint main() {\n    vector<Student> students = {\n        {"Alice", 85},\n        {"Bob", 92},\n        {"Charlie", 78},\n        {"David", 95},\n        {"Eve", 88}\n    };\n    \n    // 1. \u627e\u51fa\u6700\u9ad8\u5206\n    auto topStudent = max_element(students.begin(), students.end(),\n        [](const Student& a, const Student& b) {\n            return a.score < b.score;\n        });\n    cout << "Top student: " << topStudent->name \n         << " (" << topStudent->score << ")" << endl;\n    \n    // 2. \u6309\u5206\u6570\u6392\u5e8f\n    sort(students.begin(), students.end(),\n        [](const Student& a, const Student& b) {\n            return a.score > b.score;\n        });\n    \n    cout << "\\nRanking:" << endl;\n    for (const auto& student : students) {\n        cout << student.name << ": " << student.score << endl;\n    }\n    \n    // 3. \u8ba1\u7b97\u5e73\u5747\u5206\n    int total = accumulate(students.begin(), students.end(), 0,\n        [](int sum, const Student& s) {\n            return sum + s.score;\n        });\n    double average = static_cast<double>(total) / students.size();\n    cout << "\\nAverage score: " << average << endl;\n    \n    // 4. \u7edf\u8ba1\u53ca\u683c\u4eba\u6570\uff0860\u5206\u4ee5\u4e0a\uff09\n    int passCount = count_if(students.begin(), students.end(),\n        [](const Student& s) {\n            return s.score >= 60;\n        });\n    cout << "Pass rate: " << passCount << "/" << students.size() << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u793a\u4f8b2\u5355\u8bcd\u9891\u7387\u7edf\u8ba1",children:"\u793a\u4f8b2\uff1a\u5355\u8bcd\u9891\u7387\u7edf\u8ba1"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <map>\n#include <string>\n#include <sstream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string text = "the quick brown fox jumps over the lazy dog the fox";\n    \n    // 1. \u5206\u5272\u5355\u8bcd\u5e76\u7edf\u8ba1\n    map<string, int> wordCount;\n    istringstream iss(text);\n    string word;\n    \n    while (iss >> word) {\n        wordCount[word]++;\n    }\n    \n    // 2. \u663e\u793a\u7ed3\u679c\n    cout << "Word frequencies:" << endl;\n    for (const auto& pair : wordCount) {\n        cout << pair.first << ": " << pair.second << endl;\n    }\n    \n    // 3. \u627e\u51fa\u6700\u5e38\u89c1\u7684\u5355\u8bcd\n    auto mostCommon = max_element(wordCount.begin(), wordCount.end(),\n        [](const auto& a, const auto& b) {\n            return a.second < b.second;\n        });\n    \n    cout << "\\nMost common word: " << mostCommon->first \n         << " (" << mostCommon->second << " times)" << endl;\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u793a\u4f8b3\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf",children:"\u793a\u4f8b3\uff1a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <vector>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstruct Book {\n    int id;\n    string title;\n    string author;\n    int year;\n    \n    bool operator<(const Book& other) const {\n        return id < other.id;\n    }\n};\n\nclass Library {\nprivate:\n    set<Book> books;\n    map<string, vector<int>> authorIndex;  // \u4f5c\u8005 -> \u4e66\u7c4dID\u5217\u8868\n    \npublic:\n    void addBook(const Book& book) {\n        books.insert(book);\n        authorIndex[book.author].push_back(book.id);\n    }\n    \n    void findByAuthor(const string& author) {\n        if (authorIndex.count(author) == 0) {\n            cout << "No books by " << author << endl;\n            return;\n        }\n        \n        cout << "Books by " << author << ":" << endl;\n        for (int id : authorIndex[author]) {\n            auto it = find_if(books.begin(), books.end(),\n                [id](const Book& b) { return b.id == id; });\n            if (it != books.end()) {\n                cout << "  - " << it->title << " (" << it->year << ")" << endl;\n            }\n        }\n    }\n    \n    void listAllBooks() {\n        cout << "All books:" << endl;\n        for (const auto& book : books) {\n            cout << book.id << ". " << book.title \n                 << " by " << book.author \n                 << " (" << book.year << ")" << endl;\n        }\n    }\n};\n\nint main() {\n    Library library;\n    \n    library.addBook({1, "1984", "George Orwell", 1949});\n    library.addBook({2, "Animal Farm", "George Orwell", 1945});\n    library.addBook({3, "To Kill a Mockingbird", "Harper Lee", 1960});\n    library.addBook({4, "The Great Gatsby", "F. Scott Fitzgerald", 1925});\n    \n    library.listAllBooks();\n    cout << endl;\n    library.findByAuthor("George Orwell");\n    \n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u6027\u80fd\u5bf9\u6bd4",children:"\u6027\u80fd\u5bf9\u6bd4"}),"\n",(0,s.jsx)(e.h3,{id:"\u5bb9\u5668\u6027\u80fd\u7279\u6027",children:"\u5bb9\u5668\u6027\u80fd\u7279\u6027"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"\u64cd\u4f5c"}),(0,s.jsx)(e.th,{children:"vector"}),(0,s.jsx)(e.th,{children:"deque"}),(0,s.jsx)(e.th,{children:"list"}),(0,s.jsx)(e.th,{children:"set/map"}),(0,s.jsx)(e.th,{children:"unordered_set/map"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\u968f\u673a\u8bbf\u95ee"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(log n)"}),(0,s.jsx)(e.td,{children:"-"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\u5934\u90e8\u63d2\u5165"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(log n)"}),(0,s.jsx)(e.td,{children:"O(1)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\u5c3e\u90e8\u63d2\u5165"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(log n)"}),(0,s.jsx)(e.td,{children:"O(1)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\u4e2d\u95f4\u63d2\u5165"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(1)"}),(0,s.jsx)(e.td,{children:"O(log n)"}),(0,s.jsx)(e.td,{children:"-"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\u67e5\u627e"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(n)"}),(0,s.jsx)(e.td,{children:"O(log n)"}),(0,s.jsx)(e.td,{children:"O(1)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\u5185\u5b58\u8fde\u7eed"}),(0,s.jsx)(e.td,{children:"\u2705"}),(0,s.jsx)(e.td,{children:"\u274c"}),(0,s.jsx)(e.td,{children:"\u274c"}),(0,s.jsx)(e.td,{children:"\u274c"}),(0,s.jsx)(e.td,{children:"\u274c"})]})]})]}),"\n",(0,s.jsx)(e.h3,{id:"\u9009\u62e9\u6307\u5357",children:"\u9009\u62e9\u6307\u5357"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u2705 \u9700\u8981\u968f\u673a\u8bbf\u95ee \u2192 vector\nvector<int> data;\ncout << data[100];  // \u5feb\u901f\u8bbf\u95ee\n\n// \u2705 \u9891\u7e41\u5728\u4e24\u7aef\u64cd\u4f5c \u2192 deque\ndeque<int> queue;\nqueue.push_front(1);\nqueue.push_back(2);\n\n// \u2705 \u9891\u7e41\u5728\u4e2d\u95f4\u63d2\u5165/\u5220\u9664 \u2192 list\nlist<int> myList;\nmyList.insert(it, 42);  // O(1)\n\n// \u2705 \u9700\u8981\u81ea\u52a8\u6392\u5e8f\u548c\u552f\u4e00\u6027 \u2192 set\nset<int> uniqueSorted;\n\n// \u2705 \u9700\u8981\u952e\u503c\u5bf9\uff0c\u5feb\u901f\u67e5\u627e \u2192 map \u6216 unordered_map\nmap<string, int> ages;          // \u6709\u5e8f\nunordered_map<string, int> ages2; // \u66f4\u5feb\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u6700\u4f73\u5b9e\u8df5",children:"\u6700\u4f73\u5b9e\u8df5"}),"\n",(0,s.jsx)(e.h3,{id:"1-\u4f7f\u7528\u8303\u56f4for\u5faa\u73af",children:"1. \u4f7f\u7528\u8303\u56f4for\u5faa\u73af"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u2705 \u63a8\u8350\uff1a\u8303\u56f4for\u5faa\u73af\nvector<int> numbers = {1, 2, 3, 4, 5};\nfor (const auto& num : numbers) {\n    cout << num << " ";\n}\n\n// \u274c \u4e0d\u63a8\u8350\uff1a\u4f20\u7edffor\u5faa\u73af\uff08\u9664\u975e\u9700\u8981\u7d22\u5f15\uff09\nfor (size_t i = 0; i < numbers.size(); i++) {\n    cout << numbers[i] << " ";\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-\u4f7f\u7528auto\u7b80\u5316\u4ee3\u7801",children:"2. \u4f7f\u7528auto\u7b80\u5316\u4ee3\u7801"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u2705 \u63a8\u8350\nauto it = numbers.begin();\nauto result = find(numbers.begin(), numbers.end(), 5);\n\n// \u274c \u5197\u957f\nvector<int>::iterator it = numbers.begin();\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-\u9884\u5206\u914d\u5bb9\u91cf",children:"3. \u9884\u5206\u914d\u5bb9\u91cf"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u2705 \u6027\u80fd\u66f4\u597d\nvector<int> numbers;\nnumbers.reserve(1000);  // \u9884\u5206\u914d\u7a7a\u95f4\nfor (int i = 0; i < 1000; i++) {\n    numbers.push_back(i);\n}\n\n// \u274c \u53ef\u80fd\u591a\u6b21\u91cd\u65b0\u5206\u914d\nvector<int> numbers2;\nfor (int i = 0; i < 1000; i++) {\n    numbers2.push_back(i);\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"4-\u4f7f\u7528emplace\u4ee3\u66ffpush",children:"4. \u4f7f\u7528emplace\u4ee3\u66ffpush"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'struct Person {\n    string name;\n    int age;\n    Person(string n, int a) : name(n), age(a) {}\n};\n\nvector<Person> people;\n\n// \u2705 \u66f4\u9ad8\u6548\uff1a\u539f\u5730\u6784\u9020\npeople.emplace_back("Alice", 25);\n\n// \u274c \u6548\u7387\u8f83\u4f4e\uff1a\u5148\u6784\u9020\u518d\u590d\u5236/\u79fb\u52a8\npeople.push_back(Person("Bob", 30));\n'})}),"\n",(0,s.jsx)(e.h3,{id:"5-\u4f7f\u7528const\u5f15\u7528\u907f\u514d\u62f7\u8d1d",children:"5. \u4f7f\u7528const\u5f15\u7528\u907f\u514d\u62f7\u8d1d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'vector<string> names = {"Alice", "Bob", "Charlie"};\n\n// \u2705 \u4e0d\u62f7\u8d1d\nfor (const auto& name : names) {\n    cout << name << endl;\n}\n\n// \u274c \u6bcf\u6b21\u62f7\u8d1dstring\nfor (auto name : names) {\n    cout << name << endl;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"6-\u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668",children:"6. \u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u2705 \u9700\u8981\u5feb\u901f\u67e5\u627e \u2192 unordered_set\nunordered_set<int> seen;\nif (seen.count(value) == 0) {\n    seen.insert(value);\n}\n\n// \u274c \u4e0d\u9700\u8981\u6392\u5e8f\u5374\u7528\u4e86set\nset<int> seen;  // \u6d6a\u8d39\u4e86\u6392\u5e8f\u5f00\u9500\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,s.jsx)(e.h3,{id:"stl\u6838\u5fc3\u6982\u5ff5",children:"STL\u6838\u5fc3\u6982\u5ff5"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u5bb9\u5668"})," - \u5b58\u50a8\u6570\u636e"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u8fed\u4ee3\u5668"})," - \u904d\u5386\u6570\u636e"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u7b97\u6cd5"})," - \u5904\u7406\u6570\u636e"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u51fd\u6570\u5bf9\u8c61"})," - \u81ea\u5b9a\u4e49\u64cd\u4f5c"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\u5feb\u901f\u53c2\u8003",children:"\u5feb\u901f\u53c2\u8003"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// \u6700\u5e38\u7528\u7684\u5bb9\u5668\n#include <vector>      // \u52a8\u6001\u6570\u7ec4\n#include <list>        // \u94fe\u8868\n#include <deque>       // \u53cc\u7aef\u961f\u5217\n#include <set>         // \u96c6\u5408\n#include <map>         // \u6620\u5c04\n#include <unordered_map> // \u54c8\u5e0c\u6620\u5c04\n#include <stack>       // \u6808\n#include <queue>       // \u961f\u5217\n\n// \u6700\u5e38\u7528\u7684\u7b97\u6cd5\n#include <algorithm>   // \u6392\u5e8f\u3001\u67e5\u627e\u7b49\n#include <numeric>     // \u6570\u503c\u7b97\u6cd5\n\n// \u5e38\u7528\u64cd\u4f5c\nvector<int> v = {1, 2, 3};\nsort(v.begin(), v.end());           // \u6392\u5e8f\nauto it = find(v.begin(), v.end(), 2); // \u67e5\u627e\nint sum = accumulate(v.begin(), v.end(), 0); // \u6c42\u548c\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u5b66\u4e60\u5efa\u8bae",children:"\u5b66\u4e60\u5efa\u8bae"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u5148\u638c\u63e1\u5e38\u7528\u5bb9\u5668"})," - vector, map, set"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u7406\u89e3\u8fed\u4ee3\u5668"})," - \u6240\u6709\u5bb9\u5668\u64cd\u4f5c\u7684\u57fa\u7840"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u5b66\u4e60\u5e38\u7528\u7b97\u6cd5"})," - sort, find, accumulate"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u591a\u7ec3\u4e60"})," - \u901a\u8fc7\u5b9e\u9645\u9879\u76ee\u5de9\u56fa"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u5173\u6ce8\u6027\u80fd"})," - \u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668\u548c\u7b97\u6cd5"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"STL\u662fC++\u6700\u5f3a\u5927\u7684\u7279\u6027\u4e4b\u4e00\uff0c\u719f\u7ec3\u638c\u63e1STL\u80fd\u5927\u5927\u63d0\u9ad8\u7f16\u7a0b\u6548\u7387\uff01"})]})}function a(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>d});var r=i(6540);const s={},t=r.createContext(s);function l(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);