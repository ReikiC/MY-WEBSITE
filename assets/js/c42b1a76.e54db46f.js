"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7103],{3385:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/modern-cpp","title":"\u73b0\u4ee3C++\u7279\u6027 (C++11/14/17/20)","description":"\u73b0\u4ee3C++\u901a\u8fc7\u5f15\u5165\u65b0\u7279\u6027\u5927\u5e45\u63d0\u5347\u4e86\u8bed\u8a00\u7684\u8868\u8fbe\u80fd\u529b\u3001\u5b89\u5168\u6027\u548c\u6027\u80fd\uff0c\u4f7fC++\u7f16\u7a0b\u66f4\u52a0\u9ad8\u6548\u548c\u4f18\u96c5\u3002","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/c-cpp/modern-cpp.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/modern-cpp","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/modern-cpp","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/c-cpp/modern-cpp.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"knowledgSidebar","previous":{"title":"STL \u6807\u51c6\u6a21\u677f\u5e93","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/stl-containers"},"next":{"title":"C/C++\u5b9e\u8df5\u4e0e\u4f18\u5316","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/practical-optimization"}}');var s=t(4848),a=t(8453);const i={sidebar_position:5},o="\u73b0\u4ee3C++\u7279\u6027 (C++11/14/17/20)",d={},l=[{value:"C++11 \u9769\u547d\u6027\u53d8\u5316",id:"c11-\u9769\u547d\u6027\u53d8\u5316",level:2},{value:"\ud83d\ude80 <strong>\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc</strong>",id:"-\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc",level:3},{value:"<strong>auto\u5173\u952e\u5b57</strong>",id:"auto\u5173\u952e\u5b57",level:4},{value:"<strong>decltype\u5173\u952e\u5b57</strong>",id:"decltype\u5173\u952e\u5b57",level:4},{value:"\ud83c\udfaf <strong>\u8303\u56f4for\u5faa\u73af</strong>",id:"-\u8303\u56f4for\u5faa\u73af",level:3},{value:"\ud83e\udde9 <strong>lambda\u8868\u8fbe\u5f0f</strong>",id:"-lambda\u8868\u8fbe\u5f0f",level:3},{value:"\ud83c\udf81 <strong>\u521d\u59cb\u5316\u5217\u8868</strong>",id:"-\u521d\u59cb\u5316\u5217\u8868",level:3},{value:"C++14 \u589e\u5f3a\u7279\u6027",id:"c14-\u589e\u5f3a\u7279\u6027",level:2},{value:"\ud83d\udd27 <strong>\u6cdb\u578bLambda</strong>",id:"-\u6cdb\u578blambda",level:3},{value:"\ud83c\udfaf <strong>\u53d8\u91cf\u6a21\u677f</strong>",id:"-\u53d8\u91cf\u6a21\u677f",level:3},{value:"C++17 \u91cd\u5927\u6539\u8fdb",id:"c17-\u91cd\u5927\u6539\u8fdb",level:2},{value:"\ud83d\udce6 <strong>\u7ed3\u6784\u5316\u7ed1\u5b9a</strong>",id:"-\u7ed3\u6784\u5316\u7ed1\u5b9a",level:3},{value:"\ud83c\udfaf <strong>if constexpr</strong>",id:"-if-constexpr",level:3},{value:"\ud83d\udcc1 <strong>std::optional</strong>",id:"-stdoptional",level:3},{value:"C++20 \u73b0\u4ee3\u5316\u98de\u8dc3",id:"c20-\u73b0\u4ee3\u5316\u98de\u8dc3",level:2},{value:"\ud83c\udfa8 <strong>\u6982\u5ff5 (Concepts)</strong>",id:"-\u6982\u5ff5-concepts",level:3},{value:"\ud83d\udd27 <strong>Ranges\u5e93</strong>",id:"-ranges\u5e93",level:3},{value:"\u26a1 <strong>\u534f\u7a0b (Coroutines)</strong>",id:"-\u534f\u7a0b-coroutines",level:3},{value:"\ud83c\udfaf <strong>\u6a21\u5757 (Modules) - \u9884\u89c8</strong>",id:"-\u6a21\u5757-modules---\u9884\u89c8",level:3},{value:"\u73b0\u4ee3C++\u6700\u4f73\u5b9e\u8df5",id:"\u73b0\u4ee3c\u6700\u4f73\u5b9e\u8df5",level:2},{value:"\ud83d\udccb <strong>\u7f16\u7801\u89c4\u8303</strong>",id:"-\u7f16\u7801\u89c4\u8303",level:3},{value:"\ud83d\ude80 <strong>\u6027\u80fd\u4f18\u5316</strong>",id:"-\u6027\u80fd\u4f18\u5316",level:3}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\u73b0\u4ee3c\u7279\u6027-c11141720",children:"\u73b0\u4ee3C++\u7279\u6027 (C++11/14/17/20)"})}),"\n",(0,s.jsx)(e.p,{children:"\u73b0\u4ee3C++\u901a\u8fc7\u5f15\u5165\u65b0\u7279\u6027\u5927\u5e45\u63d0\u5347\u4e86\u8bed\u8a00\u7684\u8868\u8fbe\u80fd\u529b\u3001\u5b89\u5168\u6027\u548c\u6027\u80fd\uff0c\u4f7fC++\u7f16\u7a0b\u66f4\u52a0\u9ad8\u6548\u548c\u4f18\u96c5\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"c11-\u9769\u547d\u6027\u53d8\u5316",children:"C++11 \u9769\u547d\u6027\u53d8\u5316"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc",children:["\ud83d\ude80 ",(0,s.jsx)(e.strong,{children:"\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc"})]}),"\n",(0,s.jsx)(e.h4,{id:"auto\u5173\u952e\u5b57",children:(0,s.jsx)(e.strong,{children:"auto\u5173\u952e\u5b57"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// C++11\u4e4b\u524d\nstd::map<std::string, std::vector<int>>::iterator it = mymap.begin();\n\n// C++11\u4e4b\u540e\nauto it = mymap.begin();  // \u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u5bfc\u7c7b\u578b\n\nvoid auto_examples() {\n    // \u57fa\u672c\u7c7b\u578b\u63a8\u5bfc\n    auto i = 42;           // int\n    auto f = 3.14f;        // float\n    auto d = 3.14;         // double\n    auto s = "hello";      // const char*\n    \n    // \u590d\u6742\u7c7b\u578b\u63a8\u5bfc\n    std::vector<int> vec{1, 2, 3};\n    auto iter = vec.begin();              // std::vector<int>::iterator\n    auto lambda = [](int x) { return x * 2; };  // lambda\u7c7b\u578b\n    \n    // \u51fd\u6570\u8fd4\u56de\u503c\u63a8\u5bfc\n    auto result = std::make_pair(42, "answer");  // std::pair<int, const char*>\n    \n    // \u6a21\u677f\u4e2d\u7684auto\n    template<typename T>\n    auto add(T a, T b) -> decltype(a + b) {  // C++11 trailing return type\n        return a + b;\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"decltype\u5173\u952e\u5b57",children:(0,s.jsx)(e.strong,{children:"decltype\u5173\u952e\u5b57"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"void decltype_examples() {\n    int x = 10;\n    double y = 3.14;\n    \n    // decltype\u63a8\u5bfc\u8868\u8fbe\u5f0f\u7c7b\u578b\n    decltype(x) a = 20;        // int a = 20;\n    decltype(y) b = 2.71;      // double b = 2.71;\n    decltype(x + y) c = x + y; // double c = x + y;\n    \n    // \u7528\u4e8e\u6a21\u677f\u7f16\u7a0b\n    template<typename T, typename U>\n    auto multiply(T t, U u) -> decltype(t * u) {\n        return t * u;\n    }\n    \n    // decltype(auto) - C++14\n    // auto result = multiply(x, y);         // \u63a8\u5bfc\u4e3a\u503c\u7c7b\u578b\n    // decltype(auto) result2 = multiply(x, y);  // \u4fdd\u6301\u5f15\u7528\u7279\u6027\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u8303\u56f4for\u5faa\u73af",children:["\ud83c\udfaf ",(0,s.jsx)(e.strong,{children:"\u8303\u56f4for\u5faa\u73af"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'void range_for_examples() {\n    std::vector<int> numbers{1, 2, 3, 4, 5};\n    \n    // \u4f20\u7edffor\u5faa\u73af\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        std::cout << numbers[i] << " ";\n    }\n    \n    // \u8303\u56f4for\u5faa\u73af\n    for (const auto& num : numbers) {  // \u53ea\u8bfb\u8bbf\u95ee\n        std::cout << num << " ";\n    }\n    \n    // \u4fee\u6539\u5143\u7d20\n    for (auto& num : numbers) {\n        num *= 2;\n    }\n    \n    // \u81ea\u5b9a\u4e49\u7c7b\u578b\u652f\u6301\u8303\u56f4for\n    class NumberRange {\n    private:\n        int start, end;\n        \n    public:\n        NumberRange(int s, int e) : start(s), end(e) {}\n        \n        class Iterator {\n        private:\n            int current;\n        public:\n            Iterator(int c) : current(c) {}\n            int operator*() const { return current; }\n            Iterator& operator++() { ++current; return *this; }\n            bool operator!=(const Iterator& other) const {\n                return current != other.current;\n            }\n        };\n        \n        Iterator begin() const { return Iterator(start); }\n        Iterator end() const { return Iterator(end); }\n    };\n    \n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u8303\u56f4\n    NumberRange range(1, 6);\n    for (int n : range) {  // \u8f93\u51fa: 1 2 3 4 5\n        std::cout << n << " ";\n    }\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-lambda\u8868\u8fbe\u5f0f",children:["\ud83e\udde9 ",(0,s.jsx)(e.strong,{children:"lambda\u8868\u8fbe\u5f0f"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"void lambda_detailed() {\n    // lambda\u8bed\u6cd5: [\u6355\u83b7](\u53c2\u6570) -> \u8fd4\u56de\u7c7b\u578b { \u51fd\u6570\u4f53 }\n    \n    // 1. \u57fa\u672clambda\n    auto simple = []() { return 42; };\n    \n    // 2. \u5e26\u53c2\u6570\u7684lambda\n    auto add = [](int a, int b) { return a + b; };\n    \n    // 3. \u6307\u5b9a\u8fd4\u56de\u7c7b\u578b\n    auto divide = [](double a, double b) -> double {\n        return b != 0 ? a / b : 0.0;\n    };\n    \n    // 4. \u6355\u83b7\u5916\u90e8\u53d8\u91cf\n    int x = 10, y = 20;\n    \n    // \u503c\u6355\u83b7\n    auto lambda1 = [x, y]() { return x + y; };  // \u62f7\u8d1dx\u548cy\n    \n    // \u5f15\u7528\u6355\u83b7\n    auto lambda2 = [&x, &y]() { x++; y++; };    // \u5f15\u7528x\u548cy\n    \n    // \u6df7\u5408\u6355\u83b7\n    auto lambda3 = [x, &y](int z) { return x + y + z; };\n    \n    // \u5168\u90e8\u503c\u6355\u83b7\n    auto lambda4 = [=]() { return x * y; };     // \u62f7\u8d1d\u6240\u6709\u5916\u90e8\u53d8\u91cf\n    \n    // \u5168\u90e8\u5f15\u7528\u6355\u83b7\n    auto lambda5 = [&]() { x = 0; y = 0; };     // \u5f15\u7528\u6240\u6709\u5916\u90e8\u53d8\u91cf\n    \n    // mutable lambda\n    auto lambda6 = [x](int n) mutable { return x += n; };\n    \n    // lambda\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\n    std::vector<int> vec{1, 2, 3, 4, 5};\n    \n    // \u4f7f\u7528lambda\u8fdb\u884c\u53d8\u6362\n    std::transform(vec.begin(), vec.end(), vec.begin(),\n                  [](int n) { return n * n; });\n    \n    // \u4f7f\u7528lambda\u8fdb\u884c\u8fc7\u6ee4\n    auto count = std::count_if(vec.begin(), vec.end(),\n                              [](int n) { return n > 10; });\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u521d\u59cb\u5316\u5217\u8868",children:["\ud83c\udf81 ",(0,s.jsx)(e.strong,{children:"\u521d\u59cb\u5316\u5217\u8868"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <initializer_list>\n\nclass MyVector {\nprivate:\n    std::vector<int> data;\n    \npublic:\n    // \u652f\u6301\u521d\u59cb\u5316\u5217\u8868\u6784\u9020\n    MyVector(std::initializer_list<int> list) : data(list) {}\n    \n    // \u652f\u6301\u521d\u59cb\u5316\u5217\u8868\u8d4b\u503c\n    MyVector& operator=(std::initializer_list<int> list) {\n        data = list;\n        return *this;\n    }\n    \n    void print() const {\n        for (int n : data) std::cout << n << " ";\n        std::cout << std::endl;\n    }\n};\n\nvoid initializer_list_examples() {\n    // \u7edf\u4e00\u521d\u59cb\u5316\u8bed\u6cd5\n    int x{42};                    // \u76f4\u63a5\u521d\u59cb\u5316\n    std::vector<int> vec{1, 2, 3, 4, 5};  // \u5bb9\u5668\u521d\u59cb\u5316\n    std::map<int, std::string> map{{1, "one"}, {2, "two"}};  // \u6620\u5c04\u521d\u59cb\u5316\n    \n    // \u81ea\u5b9a\u4e49\u7c7b\u578b\u4f7f\u7528\n    MyVector mv{10, 20, 30, 40};\n    mv.print();\n    \n    mv = {100, 200, 300};  // \u521d\u59cb\u5316\u5217\u8868\u8d4b\u503c\n    mv.print();\n    \n    // \u9632\u6b62\u7a84\u5316\u8f6c\u6362\n    // int narrow{3.14};  // \u7f16\u8bd1\u9519\u8bef\uff1a\u4e0d\u5141\u8bb8\u7a84\u5316\u8f6c\u6362\n    int correct{3};       // OK\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"c14-\u589e\u5f3a\u7279\u6027",children:"C++14 \u589e\u5f3a\u7279\u6027"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u6cdb\u578blambda",children:["\ud83d\udd27 ",(0,s.jsx)(e.strong,{children:"\u6cdb\u578bLambda"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'void generic_lambda() {\n    // \u6cdb\u578blambda\uff08\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\uff09\n    auto generic_add = [](auto a, auto b) {\n        return a + b;\n    };\n    \n    // \u53ef\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\n    auto int_result = generic_add(5, 10);           // int + int\n    auto double_result = generic_add(3.14, 2.86);   // double + double\n    auto string_result = generic_add(std::string("Hello"), std::string(" World"));\n    \n    // \u5b8c\u7f8e\u8f6c\u53d1lambda\n    auto perfect_forward = [](auto&& args...) {\n        return some_function(std::forward<decltype(args)>(args)...);\n    };\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u53d8\u91cf\u6a21\u677f",children:["\ud83c\udfaf ",(0,s.jsx)(e.strong,{children:"\u53d8\u91cf\u6a21\u677f"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u53d8\u91cf\u6a21\u677f\u5b9a\u4e49\ntemplate<typename T>\nconstexpr T pi = T(3.1415926535897932385);\n\n// \u7279\u5316\ntemplate<>\nconstexpr const char* pi<const char*> = "3.14159";\n\nvoid variable_templates() {\n    // \u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684pi\n    float pi_f = pi<float>;\n    double pi_d = pi<double>;\n    long double pi_ld = pi<long double>;\n    \n    std::cout << "Pi as string: " << pi<const char*> << std::endl;\n    \n    // \u6807\u51c6\u5e93\u53d8\u91cf\u6a21\u677f\u793a\u4f8b\n    static_assert(std::is_integral_v<int>);  // \u7b49\u4ef7\u4e8e std::is_integral<int>::value\n    static_assert(std::is_same_v<int, int>);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"c17-\u91cd\u5927\u6539\u8fdb",children:"C++17 \u91cd\u5927\u6539\u8fdb"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u7ed3\u6784\u5316\u7ed1\u5b9a",children:["\ud83d\udce6 ",(0,s.jsx)(e.strong,{children:"\u7ed3\u6784\u5316\u7ed1\u5b9a"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'void structured_bindings() {\n    // std::pair\u89e3\u6784\n    std::pair<int, std::string> p{42, "answer"};\n    auto [number, text] = p;  // C++17\u7ed3\u6784\u5316\u7ed1\u5b9a\n    \n    // std::tuple\u89e3\u6784\n    std::tuple<int, double, std::string> t{1, 3.14, "hello"};\n    auto [i, d, s] = t;\n    \n    // \u6570\u7ec4\u89e3\u6784\n    int arr[3] = {1, 2, 3};\n    auto [a, b, c] = arr;\n    \n    // \u81ea\u5b9a\u4e49\u7c7b\u578b\u7ed3\u6784\u5316\u7ed1\u5b9a\n    struct Point { int x, y; };\n    Point pt{10, 20};\n    auto [px, py] = pt;\n    \n    // \u5728\u5bb9\u5668\u4e2d\u7684\u5e94\u7528\n    std::map<int, std::string> map{{1, "one"}, {2, "two"}};\n    for (const auto& [key, value] : map) {\n        std::cout << key << " -> " << value << std::endl;\n    }\n    \n    // \u51fd\u6570\u8fd4\u56de\u591a\u503c\n    auto divide_with_remainder = [](int a, int b) -> std::pair<int, int> {\n        return {a / b, a % b};\n    };\n    \n    auto [quotient, remainder] = divide_with_remainder(17, 5);\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-if-constexpr",children:["\ud83c\udfaf ",(0,s.jsx)(e.strong,{children:"if constexpr"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'template<typename T>\nvoid process_type() {\n    if constexpr (std::is_integral_v<T>) {\n        std::cout << "Processing integer type" << std::endl;\n        // \u53ea\u6709T\u662f\u6574\u6570\u7c7b\u578b\u65f6\uff0c\u8fd9\u6bb5\u4ee3\u7801\u624d\u4f1a\u88ab\u7f16\u8bd1\n    } else if constexpr (std::is_floating_point_v<T>) {\n        std::cout << "Processing floating point type" << std::endl;\n        // \u53ea\u6709T\u662f\u6d6e\u70b9\u7c7b\u578b\u65f6\uff0c\u8fd9\u6bb5\u4ee3\u7801\u624d\u4f1a\u88ab\u7f16\u8bd1\n    } else {\n        std::cout << "Processing other type" << std::endl;\n    }\n}\n\n// \u7f16\u8bd1\u65f6\u5206\u652f\uff0c\u907f\u514d\u6a21\u677f\u7279\u5316\ntemplate<typename Container>\nauto get_size(const Container& c) {\n    if constexpr (std::is_same_v<Container, std::string>) {\n        return c.length();  // \u5b57\u7b26\u4e32\u4f7f\u7528length()\n    } else {\n        return c.size();    // \u5176\u4ed6\u5bb9\u5668\u4f7f\u7528size()\n    }\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-stdoptional",children:["\ud83d\udcc1 ",(0,s.jsx)(e.strong,{children:"std::optional"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <optional>\n\nstd::optional<int> safe_divide(int a, int b) {\n    if (b != 0) {\n        return a / b;\n    }\n    return std::nullopt;  // \u8868\u793a\u65e0\u503c\n}\n\nstd::optional<std::string> find_user_name(int id) {\n    static std::map<int, std::string> users{{1, "Alice"}, {2, "Bob"}};\n    auto it = users.find(id);\n    if (it != users.end()) {\n        return it->second;\n    }\n    return std::nullopt;\n}\n\nvoid optional_examples() {\n    // \u57fa\u672c\u4f7f\u7528\n    auto result = safe_divide(10, 3);\n    if (result.has_value()) {\n        std::cout << "Result: " << result.value() << std::endl;\n    }\n    \n    // \u7b80\u5316\u68c0\u67e5\n    if (result) {  // \u9690\u5f0f\u8f6c\u6362\u4e3abool\n        std::cout << "Result: " << *result << std::endl;  // \u89e3\u5f15\u7528\u83b7\u53d6\u503c\n    }\n    \n    // \u63d0\u4f9b\u9ed8\u8ba4\u503c\n    auto name = find_user_name(999);\n    std::cout << "Name: " << name.value_or("Unknown") << std::endl;\n    \n    // \u94fe\u5f0f\u64cd\u4f5c\uff08C++23 monadic operations\u9884\u89c8\uff09\n    auto user_id = 1;\n    find_user_name(user_id)\n        .and_then([](const std::string& name) -> std::optional<int> {\n            return name.length();\n        })\n        .or_else([]() -> std::optional<int> {\n            return 0;\n        });\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"c20-\u73b0\u4ee3\u5316\u98de\u8dc3",children:"C++20 \u73b0\u4ee3\u5316\u98de\u8dc3"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u6982\u5ff5-concepts",children:["\ud83c\udfa8 ",(0,s.jsx)(e.strong,{children:"\u6982\u5ff5 (Concepts)"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <concepts>\n\n// \u5b9a\u4e49\u6982\u5ff5\ntemplate<typename T>\nconcept Addable = requires(T a, T b) {\n    a + b;  // \u8981\u6c42\u7c7b\u578bT\u652f\u6301\u52a0\u6cd5\u64cd\u4f5c\n};\n\ntemplate<typename T>\nconcept Printable = requires(T t) {\n    std::cout << t;  // \u8981\u6c42\u7c7b\u578bT\u53ef\u4ee5\u8f93\u51fa\u5230\u6d41\n};\n\n// \u4f7f\u7528\u6982\u5ff5\u7ea6\u675f\u6a21\u677f\ntemplate<Addable T>\nT add(T a, T b) {\n    return a + b;\n}\n\n// \u590d\u5408\u6982\u5ff5\ntemplate<typename T>\nconcept Number = std::integral<T> || std::floating_point<T>;\n\ntemplate<Number T>\nT multiply(T a, T b) {\n    return a * b;\n}\n\n// \u6982\u5ff5\u7684requires\u5b50\u53e5\ntemplate<typename T>\nrequires Addable<T> && Printable<T>\nvoid process_and_print(T value) {\n    auto result = add(value, value);\n    std::cout << result << std::endl;\n}\n\nvoid concepts_demo() {\n    // \u8fd9\u4e9b\u8c03\u7528\u4f1a\u901a\u8fc7\u6982\u5ff5\u68c0\u67e5\n    add(5, 10);        // int\u6ee1\u8db3Addable\n    add(3.14, 2.86);   // double\u6ee1\u8db3Addable\n    \n    multiply(42, 2);   // int\u6ee1\u8db3Number\n    \n    // add("hello", "world");  // \u7f16\u8bd1\u9519\u8bef\uff1a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4e0d\u6ee1\u8db3Addable\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-ranges\u5e93",children:["\ud83d\udd27 ",(0,s.jsx)(e.strong,{children:"Ranges\u5e93"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <ranges>\n#include <algorithm>\n\nvoid ranges_examples() {\n    std::vector<int> numbers{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    \n    // \u4f20\u7edfSTL\u7b97\u6cd5\n    std::vector<int> evens;\n    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(evens),\n                [](int n) { return n % 2 == 0; });\n    \n    std::vector<int> doubled;\n    std::transform(evens.begin(), evens.end(), std::back_inserter(doubled),\n                  [](int n) { return n * 2; });\n    \n    // Ranges\u5e93 - \u7ba1\u9053\u5f0f\u64cd\u4f5c\n    namespace views = std::views;\n    auto result = numbers\n                 | views::filter([](int n) { return n % 2 == 0; })\n                 | views::transform([](int n) { return n * 2; })\n                 | views::take(3);  // \u53ea\u53d6\u524d3\u4e2a\u5143\u7d20\n    \n    // \u5ef6\u8fdf\u6c42\u503c - \u53ea\u6709\u5728\u8fed\u4ee3\u65f6\u624d\u8ba1\u7b97\n    for (int n : result) {\n        std::cout << n << " ";  // \u8f93\u51fa: 4 8 12\n    }\n    \n    // \u5176\u4ed6\u6709\u7528\u7684\u89c6\u56fe\n    auto squares = views::iota(1, 6)  // \u751f\u62101,2,3,4,5\n                  | views::transform([](int n) { return n * n; });\n    \n    auto first_three = numbers | views::take(3);\n    auto skip_first_two = numbers | views::drop(2);\n    auto reverse_view = numbers | views::reverse;\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u534f\u7a0b-coroutines",children:["\u26a1 ",(0,s.jsx)(e.strong,{children:"\u534f\u7a0b (Coroutines)"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <coroutine>\n#include <iostream>\n\n// \u7b80\u5355\u7684\u751f\u6210\u5668\u534f\u7a0b\nstruct Generator {\n    struct promise_type {\n        int current_value;\n        \n        Generator get_return_object() {\n            return Generator{std::coroutine_handle<promise_type>::from_promise(*this)};\n        }\n        \n        std::suspend_always initial_suspend() { return {}; }\n        std::suspend_always final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n        \n        std::suspend_always yield_value(int value) {\n            current_value = value;\n            return {};\n        }\n        \n        void return_void() {}\n    };\n    \n    std::coroutine_handle<promise_type> h;\n    \n    explicit Generator(std::coroutine_handle<promise_type> handle) : h(handle) {}\n    \n    ~Generator() { \n        if (h) h.destroy(); \n    }\n    \n    // \u79fb\u52a8\u6784\u9020\u548c\u8d4b\u503c\n    Generator(Generator&& other) noexcept : h(other.h) { other.h = {}; }\n    Generator& operator=(Generator&& other) noexcept {\n        if (this != &other) {\n            if (h) h.destroy();\n            h = other.h;\n            other.h = {};\n        }\n        return *this;\n    }\n    \n    // \u7981\u6b62\u62f7\u8d1d\n    Generator(const Generator&) = delete;\n    Generator& operator=(const Generator&) = delete;\n    \n    bool next() {\n        h.resume();\n        return !h.done();\n    }\n    \n    int value() const {\n        return h.promise().current_value;\n    }\n};\n\n// \u534f\u7a0b\u51fd\u6570\nGenerator fibonacci() {\n    int a = 0, b = 1;\n    while (true) {\n        co_yield a;\n        auto tmp = a;\n        a = b;\n        b = tmp + b;\n    }\n}\n\nvoid coroutine_demo() {\n    auto fib = fibonacci();\n    \n    // \u751f\u6210\u524d10\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\n    for (int i = 0; i < 10; ++i) {\n        if (fib.next()) {\n            std::cout << fib.value() << " ";\n        }\n    }\n    // \u8f93\u51fa: 0 1 1 2 3 5 8 13 21 34\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u6a21\u5757-modules---\u9884\u89c8",children:["\ud83c\udfaf ",(0,s.jsx)(e.strong,{children:"\u6a21\u5757 (Modules) - \u9884\u89c8"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// math_module.cppm (\u6a21\u5757\u63a5\u53e3\u6587\u4ef6)\nexport module math_utils;\n\nexport namespace math {\n    int add(int a, int b) {\n        return a + b;\n    }\n    \n    int multiply(int a, int b) {\n        return a * b;\n    }\n}\n\n// main.cpp (\u4f7f\u7528\u6a21\u5757)\nimport math_utils;\nimport std.iostream;\n\nint main() {\n    std::cout << math::add(5, 3) << std::endl;\n    std::cout << math::multiply(4, 7) << std::endl;\n    return 0;\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u73b0\u4ee3c\u6700\u4f73\u5b9e\u8df5",children:"\u73b0\u4ee3C++\u6700\u4f73\u5b9e\u8df5"}),"\n",(0,s.jsxs)(e.h3,{id:"-\u7f16\u7801\u89c4\u8303",children:["\ud83d\udccb ",(0,s.jsx)(e.strong,{children:"\u7f16\u7801\u89c4\u8303"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"// RAII\u548c\u667a\u80fd\u6307\u9488\nclass ModernResource {\nprivate:\n    std::unique_ptr<int[]> data;\n    size_t size;\n    \npublic:\n    explicit ModernResource(size_t n) \n        : data(std::make_unique<int[]>(n)), size(n) {}\n    \n    // \u4f7f\u7528\u9ed8\u8ba4\u7684\u79fb\u52a8\u8bed\u4e49\n    ModernResource(ModernResource&&) = default;\n    ModernResource& operator=(ModernResource&&) = default;\n    \n    // \u7981\u6b62\u62f7\u8d1d\uff08\u5982\u679c\u4e0d\u9700\u8981\uff09\n    ModernResource(const ModernResource&) = delete;\n    ModernResource& operator=(const ModernResource&) = delete;\n    \n    // \u8303\u56f4\u8bbf\u95ee\n    auto begin() { return data.get(); }\n    auto end() { return data.get() + size; }\n    auto begin() const { return data.get(); }\n    auto end() const { return data.get() + size; }\n};\n\n// \u4f7f\u7528\u5f3a\u7c7b\u578b\u548cenum class\nenum class Color : uint8_t {\n    Red = 0xFF0000,\n    Green = 0x00FF00,\n    Blue = 0x0000FF\n};\n\n// \u4f7f\u7528constexpr\u8fdb\u884c\u7f16\u8bd1\u65f6\u8ba1\u7b97\nconstexpr int factorial(int n) {\n    return n <= 1 ? 1 : n * factorial(n - 1);\n}\n\n// \u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\nconstexpr auto fact10 = factorial(10);\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"-\u6027\u80fd\u4f18\u5316",children:["\ud83d\ude80 ",(0,s.jsx)(e.strong,{children:"\u6027\u80fd\u4f18\u5316"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'// \u79fb\u52a8\u8bed\u4e49\u4f18\u5316\nstd::vector<std::string> create_strings() {\n    std::vector<std::string> result;\n    result.reserve(1000);\n    \n    for (int i = 0; i < 1000; ++i) {\n        result.emplace_back("String " + std::to_string(i));  // \u539f\u5730\u6784\u9020\n    }\n    \n    return result;  // \u81ea\u52a8\u79fb\u52a8\u8fd4\u56de\n}\n\n// \u5b8c\u7f8e\u8f6c\u53d1\ntemplate<typename... Args>\nauto make_shared_wrapper(Args&&... args) {\n    return std::make_shared<SomeClass>(std::forward<Args>(args)...);\n}\n\n// \u907f\u514d\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\nvoid process_data(const std::vector<int>& data) {  // const\u5f15\u7528\n    for (const auto& item : data) {  // const\u5f15\u7528\u907f\u514d\u62f7\u8d1d\n        // \u5904\u7406item\n    }\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"\u73b0\u4ee3C++\uff1a\u66f4\u5b89\u5168\u3001\u66f4\u9ad8\u6548\u3001\u66f4\u4f18\u96c5\u7684\u7f16\u7a0b\u4f53\u9a8c"})})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);