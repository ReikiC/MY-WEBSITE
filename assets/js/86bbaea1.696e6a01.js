"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[401],{2578:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/stl-containers","title":"STL \u6807\u51c6\u6a21\u677f\u5e93","description":"STL\uff08Standard Template Library\uff09\u662fC++\u6807\u51c6\u5e93\u7684\u6838\u5fc3\u7ec4\u6210\u90e8\u5206\uff0c\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u5b9e\u73b0\u3002","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/c-cpp/stl-containers.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/stl-containers","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/stl-containers","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/c-cpp/stl-containers.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"knowledgSidebar","previous":{"title":"C++ \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/cpp-oop"},"next":{"title":"\u73b0\u4ee3C++\u7279\u6027 (C++11/14/17/20)","permalink":"/MY-WEBSITE/docs/knowledge/Computer-Science/programming-languages/c-cpp/modern-cpp"}}');var r=t(4848),d=t(8453);const i={sidebar_position:4},o="STL \u6807\u51c6\u6a21\u677f\u5e93",c={},a=[{value:"STL\u67b6\u6784",id:"stl\u67b6\u6784",level:2},{value:"\ud83c\udfd7\ufe0f <strong>STL\u516d\u5927\u7ec4\u4ef6</strong>",id:"\ufe0f-stl\u516d\u5927\u7ec4\u4ef6",level:3},{value:"<strong>1. \u5bb9\u5668\uff08Containers\uff09</strong>",id:"1-\u5bb9\u5668containers",level:4},{value:"<strong>2. \u8fed\u4ee3\u5668\uff08Iterators\uff09</strong>",id:"2-\u8fed\u4ee3\u5668iterators",level:4},{value:"<strong>3. \u7b97\u6cd5\uff08Algorithms\uff09</strong>",id:"3-\u7b97\u6cd5algorithms",level:4},{value:"<strong>4. \u51fd\u6570\u5bf9\u8c61\uff08Function Objects\uff09</strong>",id:"4-\u51fd\u6570\u5bf9\u8c61function-objects",level:4},{value:"<strong>5. \u9002\u914d\u5668\uff08Adapters\uff09</strong>",id:"5-\u9002\u914d\u5668adapters",level:4},{value:"<strong>6. \u5206\u914d\u5668\uff08Allocators\uff09</strong>",id:"6-\u5206\u914d\u5668allocators",level:4},{value:"\u5bb9\u5668\u8be6\u89e3",id:"\u5bb9\u5668\u8be6\u89e3",level:2},{value:"\ud83d\udce6 <strong>\u5e8f\u5217\u5bb9\u5668</strong>",id:"-\u5e8f\u5217\u5bb9\u5668",level:3},{value:"<strong>vector - \u52a8\u6001\u6570\u7ec4</strong>",id:"vector---\u52a8\u6001\u6570\u7ec4",level:4},{value:"<strong>deque - \u53cc\u7aef\u961f\u5217</strong>",id:"deque---\u53cc\u7aef\u961f\u5217",level:4},{value:"<strong>list - \u53cc\u5411\u94fe\u8868</strong>",id:"list---\u53cc\u5411\u94fe\u8868",level:4},{value:"\ud83d\uddc2\ufe0f <strong>\u5173\u8054\u5bb9\u5668</strong>",id:"\ufe0f-\u5173\u8054\u5bb9\u5668",level:3},{value:"<strong>set/multiset - \u96c6\u5408</strong>",id:"setmultiset---\u96c6\u5408",level:4},{value:"<strong>map/multimap - \u952e\u503c\u5bf9\u6620\u5c04</strong>",id:"mapmultimap---\u952e\u503c\u5bf9\u6620\u5c04",level:4},{value:"\ud83d\udd17 <strong>\u65e0\u5e8f\u5173\u8054\u5bb9\u5668\uff08C++11\uff09</strong>",id:"-\u65e0\u5e8f\u5173\u8054\u5bb9\u5668c11",level:3},{value:"<strong>unordered_set/unordered_map - \u54c8\u5e0c\u8868</strong>",id:"unordered_setunordered_map---\u54c8\u5e0c\u8868",level:4},{value:"\ud83d\udd04 <strong>\u5bb9\u5668\u9002\u914d\u5668</strong>",id:"-\u5bb9\u5668\u9002\u914d\u5668",level:3},{value:"<strong>stack/queue/priority_queue</strong>",id:"stackqueuepriority_queue",level:4},{value:"\u8fed\u4ee3\u5668",id:"\u8fed\u4ee3\u5668",level:2},{value:"\ud83d\udd0d <strong>\u8fed\u4ee3\u5668\u5206\u7c7b</strong>",id:"-\u8fed\u4ee3\u5668\u5206\u7c7b",level:3},{value:"<strong>\u8fed\u4ee3\u5668\u7c7b\u578b\u5c42\u6b21</strong>",id:"\u8fed\u4ee3\u5668\u7c7b\u578b\u5c42\u6b21",level:4},{value:"<strong>\u8fed\u4ee3\u5668\u9002\u914d\u5668</strong>",id:"\u8fed\u4ee3\u5668\u9002\u914d\u5668",level:4},{value:"\u7b97\u6cd5",id:"\u7b97\u6cd5",level:2},{value:"\ud83d\udd04 <strong>\u975e\u4fee\u6539\u6027\u7b97\u6cd5</strong>",id:"-\u975e\u4fee\u6539\u6027\u7b97\u6cd5",level:3},{value:"<strong>\u67e5\u627e\u7b97\u6cd5</strong>",id:"\u67e5\u627e\u7b97\u6cd5",level:4},{value:"\u270f\ufe0f <strong>\u4fee\u6539\u6027\u7b97\u6cd5</strong>",id:"\ufe0f-\u4fee\u6539\u6027\u7b97\u6cd5",level:3},{value:"<strong>\u590d\u5236\u548c\u79fb\u52a8</strong>",id:"\u590d\u5236\u548c\u79fb\u52a8",level:4},{value:"<strong>\u8f6c\u6362\u7b97\u6cd5</strong>",id:"\u8f6c\u6362\u7b97\u6cd5",level:4},{value:"\ud83d\udd00 <strong>\u6392\u5e8f\u548c\u76f8\u5173\u7b97\u6cd5</strong>",id:"-\u6392\u5e8f\u548c\u76f8\u5173\u7b97\u6cd5",level:3},{value:"<strong>\u6392\u5e8f\u7b97\u6cd5</strong>",id:"\u6392\u5e8f\u7b97\u6cd5",level:4},{value:"\u51fd\u6570\u5bf9\u8c61\u4e0eLambda",id:"\u51fd\u6570\u5bf9\u8c61\u4e0elambda",level:2},{value:"\ud83c\udfaf <strong>\u51fd\u6570\u5bf9\u8c61\uff08\u4eff\u51fd\u6570\uff09</strong>",id:"-\u51fd\u6570\u5bf9\u8c61\u4eff\u51fd\u6570",level:3},{value:"<strong>\u6807\u51c6\u51fd\u6570\u5bf9\u8c61</strong>",id:"\u6807\u51c6\u51fd\u6570\u5bf9\u8c61",level:4},{value:"<strong>\u81ea\u5b9a\u4e49\u51fd\u6570\u5bf9\u8c61</strong>",id:"\u81ea\u5b9a\u4e49\u51fd\u6570\u5bf9\u8c61",level:4},{value:"\ud83d\ude80 <strong>Lambda\u8868\u8fbe\u5f0f\uff08C++11\u53ca\u540e\u7eed\uff09</strong>",id:"-lambda\u8868\u8fbe\u5f0fc11\u53ca\u540e\u7eed",level:3},{value:"<strong>Lambda\u8bed\u6cd5\u548c\u7279\u6027</strong>",id:"lambda\u8bed\u6cd5\u548c\u7279\u6027",level:4},{value:"STL\u4f7f\u7528\u6700\u4f73\u5b9e\u8df5",id:"stl\u4f7f\u7528\u6700\u4f73\u5b9e\u8df5",level:2},{value:"\ud83d\udccb <strong>\u5bb9\u5668\u9009\u62e9\u6307\u5357</strong>",id:"-\u5bb9\u5668\u9009\u62e9\u6307\u5357",level:3},{value:"\ud83d\ude80 <strong>\u6027\u80fd\u4f18\u5316\u6280\u5de7</strong>",id:"-\u6027\u80fd\u4f18\u5316\u6280\u5de7",level:3}];function l(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"stl-\u6807\u51c6\u6a21\u677f\u5e93",children:"STL \u6807\u51c6\u6a21\u677f\u5e93"})}),"\n",(0,r.jsx)(e.p,{children:"STL\uff08Standard Template Library\uff09\u662fC++\u6807\u51c6\u5e93\u7684\u6838\u5fc3\u7ec4\u6210\u90e8\u5206\uff0c\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u5b9e\u73b0\u3002"}),"\n",(0,r.jsx)(e.h2,{id:"stl\u67b6\u6784",children:"STL\u67b6\u6784"}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-stl\u516d\u5927\u7ec4\u4ef6",children:["\ud83c\udfd7\ufe0f ",(0,r.jsx)(e.strong,{children:"STL\u516d\u5927\u7ec4\u4ef6"})]}),"\n",(0,r.jsx)(e.h4,{id:"1-\u5bb9\u5668containers",children:(0,r.jsx)(e.strong,{children:"1. \u5bb9\u5668\uff08Containers\uff09"})}),"\n",(0,r.jsx)(e.p,{children:"\u5b58\u50a8\u6570\u636e\u7684\u6a21\u677f\u7c7b"}),"\n",(0,r.jsx)(e.h4,{id:"2-\u8fed\u4ee3\u5668iterators",children:(0,r.jsx)(e.strong,{children:"2. \u8fed\u4ee3\u5668\uff08Iterators\uff09"})}),"\n",(0,r.jsx)(e.p,{children:"\u8bbf\u95ee\u5bb9\u5668\u5143\u7d20\u7684\u901a\u7528\u63a5\u53e3"}),"\n",(0,r.jsx)(e.h4,{id:"3-\u7b97\u6cd5algorithms",children:(0,r.jsx)(e.strong,{children:"3. \u7b97\u6cd5\uff08Algorithms\uff09"})}),"\n",(0,r.jsx)(e.p,{children:"\u64cd\u4f5c\u5bb9\u5668\u7684\u51fd\u6570\u6a21\u677f"}),"\n",(0,r.jsx)(e.h4,{id:"4-\u51fd\u6570\u5bf9\u8c61function-objects",children:(0,r.jsx)(e.strong,{children:"4. \u51fd\u6570\u5bf9\u8c61\uff08Function Objects\uff09"})}),"\n",(0,r.jsx)(e.p,{children:"\u53ef\u8c03\u7528\u7684\u7c7b\u5bf9\u8c61"}),"\n",(0,r.jsx)(e.h4,{id:"5-\u9002\u914d\u5668adapters",children:(0,r.jsx)(e.strong,{children:"5. \u9002\u914d\u5668\uff08Adapters\uff09"})}),"\n",(0,r.jsx)(e.p,{children:"\u4fee\u6539\u63a5\u53e3\u7684\u7ec4\u4ef6"}),"\n",(0,r.jsx)(e.h4,{id:"6-\u5206\u914d\u5668allocators",children:(0,r.jsx)(e.strong,{children:"6. \u5206\u914d\u5668\uff08Allocators\uff09"})}),"\n",(0,r.jsx)(e.p,{children:"\u5185\u5b58\u7ba1\u7406\u7ec4\u4ef6"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'// STL\u7ec4\u4ef6\u534f\u540c\u5de5\u4f5c\u793a\u4f8b\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iostream>\n\nvoid stl_demo() {\n    std::vector<int> vec = {5, 2, 8, 1, 9};  // \u5bb9\u5668\n    \n    // \u4f7f\u7528\u8fed\u4ee3\u5668\u548c\u7b97\u6cd5\n    auto it = std::find(vec.begin(), vec.end(), 8);\n    if (it != vec.end()) {\n        std::cout << "Found 8 at position: " \n                  << std::distance(vec.begin(), it) << std::endl;\n    }\n    \n    // \u4f7f\u7528\u51fd\u6570\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\n    std::sort(vec.begin(), vec.end(), std::greater<int>());\n    \n    // \u4f7f\u7528\u7b97\u6cd5\u6253\u5370\n    std::for_each(vec.begin(), vec.end(), \n                  [](int n) { std::cout << n << " "; });\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u5bb9\u5668\u8be6\u89e3",children:"\u5bb9\u5668\u8be6\u89e3"}),"\n",(0,r.jsxs)(e.h3,{id:"-\u5e8f\u5217\u5bb9\u5668",children:["\ud83d\udce6 ",(0,r.jsx)(e.strong,{children:"\u5e8f\u5217\u5bb9\u5668"})]}),"\n",(0,r.jsx)(e.h4,{id:"vector---\u52a8\u6001\u6570\u7ec4",children:(0,r.jsx)(e.strong,{children:"vector - \u52a8\u6001\u6570\u7ec4"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <vector>\n\nvoid vector_demo() {\n    // \u6784\u9020\u65b9\u5f0f\n    std::vector<int> v1;                    // \u7a7a\u5bb9\u5668\n    std::vector<int> v2(10);               // 10\u4e2a\u9ed8\u8ba4\u503c\n    std::vector<int> v3(10, 42);           // 10\u4e2a42\n    std::vector<int> v4{1, 2, 3, 4, 5};    // \u521d\u59cb\u5316\u5217\u8868\n    std::vector<int> v5(v4.begin(), v4.end()); // \u8fed\u4ee3\u5668\u8303\u56f4\n    \n    // \u5bb9\u91cf\u7ba1\u7406\n    v1.reserve(100);        // \u9884\u5206\u914d\u5bb9\u91cf\n    v1.resize(50);          // \u6539\u53d8\u5927\u5c0f\n    v1.shrink_to_fit();     // \u91ca\u653e\u591a\u4f59\u5bb9\u91cf\n    \n    // \u5143\u7d20\u8bbf\u95ee\n    int first = v4[0];              // \u4e0b\u6807\u8bbf\u95ee\uff08\u4e0d\u68c0\u67e5\u8fb9\u754c\uff09\n    int second = v4.at(1);          // \u5b89\u5168\u8bbf\u95ee\uff08\u68c0\u67e5\u8fb9\u754c\uff09\n    int& front_ref = v4.front();    // \u7b2c\u4e00\u4e2a\u5143\u7d20\u5f15\u7528\n    int& back_ref = v4.back();      // \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f15\u7528\n    int* data_ptr = v4.data();      // \u5e95\u5c42\u6570\u7ec4\u6307\u9488\n    \n    // \u4fee\u6539\u64cd\u4f5c\n    v1.push_back(100);              // \u5c3e\u90e8\u6dfb\u52a0\n    v1.pop_back();                  // \u5c3e\u90e8\u5220\u9664\n    v1.insert(v1.begin(), 200);     // \u63d2\u5165\u5143\u7d20\n    v1.erase(v1.begin());           // \u5220\u9664\u5143\u7d20\n    v1.clear();                     // \u6e05\u7a7a\u5bb9\u5668\n    \n    // \u6027\u80fd\u7279\u70b9\n    // \u968f\u673a\u8bbf\u95ee: O(1)\n    // \u5c3e\u90e8\u63d2\u5165/\u5220\u9664: \u644a\u9500O(1)\n    // \u4e2d\u95f4\u63d2\u5165/\u5220\u9664: O(n)\n}\n"})}),"\n",(0,r.jsx)(e.h4,{id:"deque---\u53cc\u7aef\u961f\u5217",children:(0,r.jsx)(e.strong,{children:"deque - \u53cc\u7aef\u961f\u5217"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <deque>\n\nvoid deque_demo() {\n    std::deque<int> dq;\n    \n    // \u53cc\u7aef\u64cd\u4f5c\n    dq.push_front(1);    // \u5934\u90e8\u63d2\u5165\n    dq.push_back(2);     // \u5c3e\u90e8\u63d2\u5165\n    dq.pop_front();      // \u5934\u90e8\u5220\u9664\n    dq.pop_back();       // \u5c3e\u90e8\u5220\u9664\n    \n    // \u968f\u673a\u8bbf\u95ee\uff08\u7c7b\u4f3cvector\uff09\n    dq[0] = 100;\n    \n    // \u6027\u80fd\u7279\u70b9\n    // \u968f\u673a\u8bbf\u95ee: O(1)\n    // \u4e24\u7aef\u63d2\u5165/\u5220\u9664: O(1)\n    // \u4e2d\u95f4\u63d2\u5165/\u5220\u9664: O(n)\n}\n"})}),"\n",(0,r.jsx)(e.h4,{id:"list---\u53cc\u5411\u94fe\u8868",children:(0,r.jsx)(e.strong,{children:"list - \u53cc\u5411\u94fe\u8868"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <list>\n\nvoid list_demo() {\n    std::list<int> lst{3, 1, 4, 1, 5};\n    \n    // \u94fe\u8868\u7279\u6709\u64cd\u4f5c\n    lst.sort();                    // \u6392\u5e8f\n    lst.unique();                  // \u53bb\u91cd\n    lst.reverse();                 // \u53cd\u8f6c\n    \n    std::list<int> other{2, 6};\n    lst.merge(other);              // \u5408\u5e76\u6709\u5e8f\u94fe\u8868\n    \n    // \u9ad8\u6548\u7684\u63d2\u5165\u5220\u9664\n    auto it = std::find(lst.begin(), lst.end(), 4);\n    lst.insert(it, 99);            // O(1)\u63d2\u5165\n    lst.erase(it);                 // O(1)\u5220\u9664\n    \n    // \u6027\u80fd\u7279\u70b9\n    // \u968f\u673a\u8bbf\u95ee: \u4e0d\u652f\u6301\n    // \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664: O(1)\n    // \u67e5\u627e: O(n)\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-\u5173\u8054\u5bb9\u5668",children:["\ud83d\uddc2\ufe0f ",(0,r.jsx)(e.strong,{children:"\u5173\u8054\u5bb9\u5668"})]}),"\n",(0,r.jsx)(e.h4,{id:"setmultiset---\u96c6\u5408",children:(0,r.jsx)(e.strong,{children:"set/multiset - \u96c6\u5408"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <set>\n\nvoid set_demo() {\n    // set: \u552f\u4e00\u952e\u503c\uff0c\u81ea\u52a8\u6392\u5e8f\n    std::set<int> s{3, 1, 4, 1, 5, 9};  // {1, 3, 4, 5, 9}\n    \n    // \u63d2\u5165\u548c\u67e5\u627e\n    auto [it, inserted] = s.insert(2);   // C++17\u7ed3\u6784\u5316\u7ed1\u5b9a\n    if (inserted) {\n        std::cout << "Inserted " << *it << std::endl;\n    }\n    \n    // \u67e5\u627e\u64cd\u4f5c\n    if (s.find(4) != s.end()) {\n        std::cout << "Found 4" << std::endl;\n    }\n    \n    // \u8303\u56f4\u67e5\u627e\n    auto lower = s.lower_bound(3);       // >= 3\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    auto upper = s.upper_bound(5);       // > 5\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    auto range = s.equal_range(4);       // [4,4]\u7684\u8303\u56f4\n    \n    // multiset: \u5141\u8bb8\u91cd\u590d\u952e\u503c\n    std::multiset<int> ms{1, 1, 2, 2, 3};\n    std::cout << "Count of 1: " << ms.count(1) << std::endl;  // \u8f93\u51fa2\n    \n    // \u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\n    auto cmp = [](int a, int b) { return a > b; };  // \u964d\u5e8f\n    std::set<int, decltype(cmp)> desc_set(cmp);\n    \n    // \u6027\u80fd\u7279\u70b9\uff08\u57fa\u4e8e\u7ea2\u9ed1\u6811\uff09\n    // \u63d2\u5165/\u5220\u9664/\u67e5\u627e: O(log n)\n    // \u6709\u5e8f\u904d\u5386: O(n)\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"mapmultimap---\u952e\u503c\u5bf9\u6620\u5c04",children:(0,r.jsx)(e.strong,{children:"map/multimap - \u952e\u503c\u5bf9\u6620\u5c04"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <map>\n#include <string>\n\nvoid map_demo() {\n    // map: \u552f\u4e00\u952e\uff0c\u81ea\u52a8\u6309\u952e\u6392\u5e8f\n    std::map<std::string, int> word_count;\n    \n    // \u63d2\u5165\u65b9\u5f0f\n    word_count["hello"] = 1;                    // \u4e0b\u6807\u8fd0\u7b97\u7b26\n    word_count.insert({"world", 1});            // insert\n    word_count.emplace("c++", 2);               // \u539f\u5730\u6784\u9020\n    \n    // \u67e5\u627e\u548c\u8bbf\u95ee\n    if (auto it = word_count.find("hello"); it != word_count.end()) {\n        std::cout << it->first << ": " << it->second << std::endl;\n    }\n    \n    // \u5b89\u5168\u8bbf\u95ee\uff08\u4e0d\u521b\u5efa\u65b0\u5143\u7d20\uff09\n    if (word_count.count("missing") > 0) {\n        std::cout << "Found missing" << std::endl;\n    }\n    \n    // \u904d\u5386\n    for (const auto& [key, value] : word_count) {  // C++17\n        std::cout << key << " appears " << value << " times\\n";\n    }\n    \n    // multimap\u793a\u4f8b\n    std::multimap<int, std::string> grade_names;\n    grade_names.emplace(90, "Alice");\n    grade_names.emplace(85, "Bob");\n    grade_names.emplace(90, "Charlie");  // \u76f8\u540c\u952e\u503c\n    \n    // \u67e5\u627e\u540c\u4e00\u952e\u503c\u7684\u6240\u6709\u5143\u7d20\n    auto range = grade_names.equal_range(90);\n    for (auto it = range.first; it != range.second; ++it) {\n        std::cout << it->second << " got " << it->first << std::endl;\n    }\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-\u65e0\u5e8f\u5173\u8054\u5bb9\u5668c11",children:["\ud83d\udd17 ",(0,r.jsx)(e.strong,{children:"\u65e0\u5e8f\u5173\u8054\u5bb9\u5668\uff08C++11\uff09"})]}),"\n",(0,r.jsx)(e.h4,{id:"unordered_setunordered_map---\u54c8\u5e0c\u8868",children:(0,r.jsx)(e.strong,{children:"unordered_set/unordered_map - \u54c8\u5e0c\u8868"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <unordered_set>\n#include <unordered_map>\n\n// \u81ea\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\nstruct Person {\n    std::string name;\n    int age;\n    \n    bool operator==(const Person& other) const {\n        return name == other.name && age == other.age;\n    }\n};\n\nstruct PersonHash {\n    std::size_t operator()(const Person& p) const {\n        return std::hash<std::string>{}(p.name) ^ \n               (std::hash<int>{}(p.age) << 1);\n    }\n};\n\nvoid unordered_containers_demo() {\n    // unordered_set\n    std::unordered_set<int> us{1, 2, 3, 4, 5};\n    \n    // \u5e73\u5747O(1)\u64cd\u4f5c\n    us.insert(6);\n    if (us.find(3) != us.end()) {\n        std::cout << "Found 3" << std::endl;\n    }\n    \n    // unordered_map\n    std::unordered_map<std::string, int> cache;\n    cache["key1"] = 100;\n    cache["key2"] = 200;\n    \n    // \u81ea\u5b9a\u4e49\u7c7b\u578b\u4f5c\u4e3a\u952e\n    std::unordered_set<Person, PersonHash> person_set;\n    person_set.insert({"Alice", 30});\n    person_set.insert({"Bob", 25});\n    \n    // \u54c8\u5e0c\u8868\u7edf\u8ba1\u4fe1\u606f\n    std::cout << "Bucket count: " << cache.bucket_count() << std::endl;\n    std::cout << "Load factor: " << cache.load_factor() << std::endl;\n    std::cout << "Max load factor: " << cache.max_load_factor() << std::endl;\n    \n    // \u6027\u80fd\u7279\u70b9\n    // \u5e73\u5747\u60c5\u51b5\u63d2\u5165/\u5220\u9664/\u67e5\u627e: O(1)\n    // \u6700\u574f\u60c5\u51b5: O(n)\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-\u5bb9\u5668\u9002\u914d\u5668",children:["\ud83d\udd04 ",(0,r.jsx)(e.strong,{children:"\u5bb9\u5668\u9002\u914d\u5668"})]}),"\n",(0,r.jsx)(e.h4,{id:"stackqueuepriority_queue",children:(0,r.jsx)(e.strong,{children:"stack/queue/priority_queue"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <stack>\n#include <queue>\n\nvoid adapter_demo() {\n    // stack - \u6808\uff08LIFO\uff09\n    std::stack<int> stk;\n    stk.push(1);\n    stk.push(2);\n    stk.push(3);\n    \n    while (!stk.empty()) {\n        std::cout << stk.top() << " ";  // 3 2 1\n        stk.pop();\n    }\n    \n    // queue - \u961f\u5217\uff08FIFO\uff09\n    std::queue<int> que;\n    que.push(1);\n    que.push(2);\n    que.push(3);\n    \n    while (!que.empty()) {\n        std::cout << que.front() << " ";  // 1 2 3\n        que.pop();\n    }\n    \n    // priority_queue - \u4f18\u5148\u961f\u5217\uff08\u9ed8\u8ba4\u5927\u9876\u5806\uff09\n    std::priority_queue<int> pq;\n    pq.push(3);\n    pq.push(1);\n    pq.push(4);\n    pq.push(2);\n    \n    while (!pq.empty()) {\n        std::cout << pq.top() << " ";  // 4 3 2 1\n        pq.pop();\n    }\n    \n    // \u5c0f\u9876\u5806\n    std::priority_queue<int, std::vector<int>, std::greater<int>> min_pq;\n    min_pq.push(3);\n    min_pq.push(1);\n    min_pq.push(4);\n    \n    while (!min_pq.empty()) {\n        std::cout << min_pq.top() << " ";  // 1 3 4\n        min_pq.pop();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u8fed\u4ee3\u5668",children:"\u8fed\u4ee3\u5668"}),"\n",(0,r.jsxs)(e.h3,{id:"-\u8fed\u4ee3\u5668\u5206\u7c7b",children:["\ud83d\udd0d ",(0,r.jsx)(e.strong,{children:"\u8fed\u4ee3\u5668\u5206\u7c7b"})]}),"\n",(0,r.jsx)(e.h4,{id:"\u8fed\u4ee3\u5668\u7c7b\u578b\u5c42\u6b21",children:(0,r.jsx)(e.strong,{children:"\u8fed\u4ee3\u5668\u7c7b\u578b\u5c42\u6b21"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <iterator>\n#include <vector>\n#include <list>\n#include <forward_list>\n\nvoid iterator_demo() {\n    // \u8f93\u5165\u8fed\u4ee3\u5668\uff08Input Iterator\uff09\n    // \u53ea\u8bfb\uff0c\u5355\u5411\u79fb\u52a8\n    std::istream_iterator<int> input_it(std::cin);\n    \n    // \u8f93\u51fa\u8fed\u4ee3\u5668\uff08Output Iterator\uff09\n    // \u53ea\u5199\uff0c\u5355\u5411\u79fb\u52a8\n    std::ostream_iterator<int> output_it(std::cout, " ");\n    \n    // \u524d\u5411\u8fed\u4ee3\u5668\uff08Forward Iterator\uff09\n    std::forward_list<int> flist{1, 2, 3};\n    for (auto it = flist.begin(); it != flist.end(); ++it) {\n        std::cout << *it << " ";\n    }\n    \n    // \u53cc\u5411\u8fed\u4ee3\u5668\uff08Bidirectional Iterator\uff09\n    std::list<int> lst{1, 2, 3, 4};\n    for (auto it = lst.rbegin(); it != lst.rend(); ++it) {\n        std::cout << *it << " ";  // \u53cd\u5411\u904d\u5386: 4 3 2 1\n    }\n    \n    // \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff08Random Access Iterator\uff09\n    std::vector<int> vec{1, 2, 3, 4, 5};\n    auto it = vec.begin();\n    it += 3;              // \u968f\u673a\u8df3\u8f6c\n    std::cout << *it << std::endl;  // \u8f93\u51fa4\n    \n    auto distance = vec.end() - vec.begin();  // \u8ddd\u79bb\u8ba1\u7b97\n    std::cout << "Vector size: " << distance << std::endl;\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"\u8fed\u4ee3\u5668\u9002\u914d\u5668",children:(0,r.jsx)(e.strong,{children:"\u8fed\u4ee3\u5668\u9002\u914d\u5668"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'void iterator_adapter_demo() {\n    std::vector<int> vec{1, 2, 3, 4, 5};\n    \n    // \u53cd\u5411\u8fed\u4ee3\u5668\n    std::reverse_iterator<std::vector<int>::iterator> rit(vec.end());\n    for (; rit != std::reverse_iterator<std::vector<int>::iterator>(vec.begin()); ++rit) {\n        std::cout << *rit << " ";  // 5 4 3 2 1\n    }\n    \n    // \u63d2\u5165\u8fed\u4ee3\u5668\n    std::vector<int> dest;\n    \n    // back_inserter\uff1a\u5c3e\u90e8\u63d2\u5165\n    std::copy(vec.begin(), vec.end(), std::back_inserter(dest));\n    \n    // front_inserter\uff1a\u5934\u90e8\u63d2\u5165\uff08\u9700\u8981\u652f\u6301push_front\u7684\u5bb9\u5668\uff09\n    std::deque<int> deq;\n    std::copy(vec.begin(), vec.end(), std::front_inserter(deq));\n    \n    // inserter\uff1a\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\n    std::vector<int> target{10, 20};\n    std::copy(vec.begin(), vec.end(), \n              std::inserter(target, target.begin() + 1));\n    \n    // \u6d41\u8fed\u4ee3\u5668\n    std::vector<int> numbers{1, 2, 3, 4, 5};\n    std::copy(numbers.begin(), numbers.end(),\n              std::ostream_iterator<int>(std::cout, " "));\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u7b97\u6cd5",children:"\u7b97\u6cd5"}),"\n",(0,r.jsxs)(e.h3,{id:"-\u975e\u4fee\u6539\u6027\u7b97\u6cd5",children:["\ud83d\udd04 ",(0,r.jsx)(e.strong,{children:"\u975e\u4fee\u6539\u6027\u7b97\u6cd5"})]}),"\n",(0,r.jsx)(e.h4,{id:"\u67e5\u627e\u7b97\u6cd5",children:(0,r.jsx)(e.strong,{children:"\u67e5\u627e\u7b97\u6cd5"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <algorithm>\n\nvoid search_algorithms() {\n    std::vector<int> vec{1, 3, 5, 7, 9, 11, 13};\n    \n    // find\u7cfb\u5217\n    auto it1 = std::find(vec.begin(), vec.end(), 7);\n    auto it2 = std::find_if(vec.begin(), vec.end(), \n                           [](int n) { return n > 10; });\n    auto it3 = std::find_if_not(vec.begin(), vec.end(),\n                               [](int n) { return n < 10; });\n    \n    // \u4e8c\u5206\u67e5\u627e\uff08\u8981\u6c42\u6709\u5e8f\uff09\n    bool found = std::binary_search(vec.begin(), vec.end(), 7);\n    auto lower = std::lower_bound(vec.begin(), vec.end(), 7);\n    auto upper = std::upper_bound(vec.begin(), vec.end(), 7);\n    \n    // \u8ba1\u6570\n    std::vector<int> nums{1, 2, 2, 3, 2, 4, 2};\n    int count = std::count(nums.begin(), nums.end(), 2);  // 4\n    int count_if = std::count_if(nums.begin(), nums.end(),\n                                [](int n) { return n > 2; });  // 2\n    \n    // \u5e8f\u5217\u641c\u7d22\n    std::vector<int> haystack{1, 2, 3, 4, 5, 6, 7};\n    std::vector<int> needle{3, 4, 5};\n    auto search_it = std::search(haystack.begin(), haystack.end(),\n                                needle.begin(), needle.end());\n    \n    // \u76f8\u90bb\u67e5\u627e\n    std::vector<int> adjacent_test{1, 2, 2, 3, 4, 4, 5};\n    auto adj_it = std::adjacent_find(adjacent_test.begin(), \n                                    adjacent_test.end());\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-\u4fee\u6539\u6027\u7b97\u6cd5",children:["\u270f\ufe0f ",(0,r.jsx)(e.strong,{children:"\u4fee\u6539\u6027\u7b97\u6cd5"})]}),"\n",(0,r.jsx)(e.h4,{id:"\u590d\u5236\u548c\u79fb\u52a8",children:(0,r.jsx)(e.strong,{children:"\u590d\u5236\u548c\u79fb\u52a8"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'void copy_move_algorithms() {\n    std::vector<int> source{1, 2, 3, 4, 5};\n    std::vector<int> dest(5);\n    \n    // \u590d\u5236\n    std::copy(source.begin(), source.end(), dest.begin());\n    \n    // \u6761\u4ef6\u590d\u5236\n    std::vector<int> evens;\n    std::copy_if(source.begin(), source.end(), \n                std::back_inserter(evens),\n                [](int n) { return n % 2 == 0; });\n    \n    // \u590d\u5236n\u4e2a\u5143\u7d20\n    std::copy_n(source.begin(), 3, dest.begin());\n    \n    // \u53cd\u5411\u590d\u5236\n    std::reverse_copy(source.begin(), source.end(),\n                     std::back_inserter(dest));\n    \n    // \u79fb\u52a8\uff08C++11\uff09\n    std::vector<std::string> strings{"hello", "world"};\n    std::vector<std::string> moved;\n    std::move(strings.begin(), strings.end(),\n              std::back_inserter(moved));\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"\u8f6c\u6362\u7b97\u6cd5",children:(0,r.jsx)(e.strong,{children:"\u8f6c\u6362\u7b97\u6cd5"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"void transform_algorithms() {\n    std::vector<int> numbers{1, 2, 3, 4, 5};\n    std::vector<int> squares;\n    \n    // \u5355\u4e00\u8f93\u5165\u8f6c\u6362\n    std::transform(numbers.begin(), numbers.end(),\n                  std::back_inserter(squares),\n                  [](int n) { return n * n; });\n    \n    // \u53cc\u8f93\u5165\u8f6c\u6362\n    std::vector<int> other{10, 20, 30, 40, 50};\n    std::vector<int> sums;\n    std::transform(numbers.begin(), numbers.end(),\n                  other.begin(),\n                  std::back_inserter(sums),\n                  [](int a, int b) { return a + b; });\n    \n    // \u539f\u5730\u8f6c\u6362\n    std::transform(numbers.begin(), numbers.end(), numbers.begin(),\n                  [](int n) { return n * 2; });\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"-\u6392\u5e8f\u548c\u76f8\u5173\u7b97\u6cd5",children:["\ud83d\udd00 ",(0,r.jsx)(e.strong,{children:"\u6392\u5e8f\u548c\u76f8\u5173\u7b97\u6cd5"})]}),"\n",(0,r.jsx)(e.h4,{id:"\u6392\u5e8f\u7b97\u6cd5",children:(0,r.jsx)(e.strong,{children:"\u6392\u5e8f\u7b97\u6cd5"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'void sorting_algorithms() {\n    std::vector<int> vec{5, 2, 8, 1, 9, 3};\n    \n    // \u5b8c\u5168\u6392\u5e8f\n    std::sort(vec.begin(), vec.end());  // \u5347\u5e8f\n    std::sort(vec.begin(), vec.end(), std::greater<int>());  // \u964d\u5e8f\n    \n    // \u7a33\u5b9a\u6392\u5e8f\n    std::stable_sort(vec.begin(), vec.end());\n    \n    // \u90e8\u5206\u6392\u5e8f\n    std::vector<int> data{9, 8, 7, 6, 5, 4, 3, 2, 1};\n    std::partial_sort(data.begin(), data.begin() + 3, data.end());\n    // \u524d3\u4e2a\u5143\u7d20\u5df2\u6392\u5e8f\uff1a{1, 2, 3, ...}\n    \n    // nth_element\uff1a\u627e\u5230\u7b2cn\u5c0f\u7684\u5143\u7d20\n    std::vector<int> nums{5, 1, 9, 3, 7, 2, 8};\n    std::nth_element(nums.begin(), nums.begin() + 3, nums.end());\n    // nums[3]\u73b0\u5728\u662f\u7b2c4\u5c0f\u7684\u5143\u7d20\uff0c\u5de6\u8fb9\u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u8fb9\u90fd\u6bd4\u5b83\u5927\n    \n    // \u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\n    struct Person { std::string name; int age; };\n    std::vector<Person> people{{"Alice", 30}, {"Bob", 25}, {"Charlie", 35}};\n    \n    std::sort(people.begin(), people.end(),\n             [](const Person& a, const Person& b) {\n                 return a.age < b.age;\n             });\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u51fd\u6570\u5bf9\u8c61\u4e0elambda",children:"\u51fd\u6570\u5bf9\u8c61\u4e0eLambda"}),"\n",(0,r.jsxs)(e.h3,{id:"-\u51fd\u6570\u5bf9\u8c61\u4eff\u51fd\u6570",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"\u51fd\u6570\u5bf9\u8c61\uff08\u4eff\u51fd\u6570\uff09"})]}),"\n",(0,r.jsx)(e.h4,{id:"\u6807\u51c6\u51fd\u6570\u5bf9\u8c61",children:(0,r.jsx)(e.strong,{children:"\u6807\u51c6\u51fd\u6570\u5bf9\u8c61"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <functional>\n\nvoid function_objects_demo() {\n    std::vector<int> vec{1, 2, 3, 4, 5};\n    \n    // \u7b97\u672f\u51fd\u6570\u5bf9\u8c61\n    std::transform(vec.begin(), vec.end(), vec.begin(),\n                  std::negate<int>());  // \u53d6\u8d1f\n    \n    // \u6bd4\u8f83\u51fd\u6570\u5bf9\u8c61\n    std::sort(vec.begin(), vec.end(), std::greater<int>());\n    \n    // \u903b\u8f91\u51fd\u6570\u5bf9\u8c61\n    std::vector<bool> bools{true, false, true, false};\n    std::transform(bools.begin(), bools.end(), bools.begin(),\n                  std::logical_not<bool>());\n    \n    // \u51fd\u6570\u9002\u914d\u5668\n    auto is_even = [](int n) { return n % 2 == 0; };\n    auto is_odd = std::not_fn(is_even);  // C++17\n    \n    // bind\u9002\u914d\u5668\n    auto multiply_by_2 = std::bind(std::multiplies<int>(), \n                                  std::placeholders::_1, 2);\n    std::transform(vec.begin(), vec.end(), vec.begin(), multiply_by_2);\n}\n"})}),"\n",(0,r.jsx)(e.h4,{id:"\u81ea\u5b9a\u4e49\u51fd\u6570\u5bf9\u8c61",children:(0,r.jsx)(e.strong,{children:"\u81ea\u5b9a\u4e49\u51fd\u6570\u5bf9\u8c61"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'class Accumulator {\nprivate:\n    int sum = 0;\n    \npublic:\n    int operator()(int value) {\n        sum += value;\n        return sum;\n    }\n    \n    int getSum() const { return sum; }\n};\n\n// \u5e26\u72b6\u6001\u7684\u51fd\u6570\u5bf9\u8c61\nclass Counter {\nprivate:\n    mutable int count = 0;\n    \npublic:\n    bool operator()(int) const {\n        return ++count > 3;  // \u524d3\u4e2a\u8fd4\u56defalse\uff0c\u4e4b\u540e\u8fd4\u56detrue\n    }\n    \n    int getCount() const { return count; }\n};\n\nvoid custom_function_objects() {\n    std::vector<int> numbers{1, 2, 3, 4, 5};\n    \n    // \u7d2f\u52a0\u5668\u4f7f\u7528\n    Accumulator acc;\n    std::for_each(numbers.begin(), numbers.end(), std::ref(acc));\n    std::cout << "Sum: " << acc.getSum() << std::endl;\n    \n    // \u8ba1\u6570\u5668\u4f7f\u7528\n    Counter counter;\n    auto it = std::find_if(numbers.begin(), numbers.end(), \n                          std::ref(counter));\n    std::cout << "Counter called " << counter.getCount() << " times" << std::endl;\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-lambda\u8868\u8fbe\u5f0fc11\u53ca\u540e\u7eed",children:["\ud83d\ude80 ",(0,r.jsx)(e.strong,{children:"Lambda\u8868\u8fbe\u5f0f\uff08C++11\u53ca\u540e\u7eed\uff09"})]}),"\n",(0,r.jsx)(e.h4,{id:"lambda\u8bed\u6cd5\u548c\u7279\u6027",children:(0,r.jsx)(e.strong,{children:"Lambda\u8bed\u6cd5\u548c\u7279\u6027"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'void lambda_expressions() {\n    std::vector<int> vec{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    \n    // \u57fa\u672clambda\n    auto is_even = [](int n) { return n % 2 == 0; };\n    \n    // \u6355\u83b7\u5916\u90e8\u53d8\u91cf\n    int threshold = 5;\n    \n    // \u503c\u6355\u83b7\n    auto greater_than_threshold = [threshold](int n) { \n        return n > threshold; \n    };\n    \n    // \u5f15\u7528\u6355\u83b7\n    int count = 0;\n    std::for_each(vec.begin(), vec.end(), \n                 [&count](int n) { if (n > 5) ++count; });\n    \n    // \u6df7\u5408\u6355\u83b7\uff08C++14\uff09\n    auto lambda = [threshold, &count](int n) mutable {\n        if (n > threshold) ++count;\n        return n * 2;\n    };\n    \n    // \u6cdb\u578blambda\uff08C++14\uff09\n    auto generic_printer = [](const auto& item) {\n        std::cout << item << " ";\n    };\n    \n    // \u521d\u59cb\u5316\u6355\u83b7\uff08C++14\uff09\n    auto unique_ptr_lambda = [ptr = std::make_unique<int>(42)](int n) {\n        return *ptr + n;\n    };\n    \n    // constexpr lambda\uff08C++17\uff09\n    constexpr auto factorial = [](int n) constexpr {\n        return n <= 1 ? 1 : n * factorial(n - 1);\n    };\n    \n    // \u7ed3\u6784\u5316\u7ed1\u5b9a\u4e0elambda\uff08C++17\uff09\n    std::vector<std::pair<int, std::string>> pairs{\n        {1, "one"}, {2, "two"}, {3, "three"}\n    };\n    \n    std::for_each(pairs.begin(), pairs.end(),\n                 [](const auto& [num, str]) {\n                     std::cout << num << ": " << str << std::endl;\n                 });\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"stl\u4f7f\u7528\u6700\u4f73\u5b9e\u8df5",children:"STL\u4f7f\u7528\u6700\u4f73\u5b9e\u8df5"}),"\n",(0,r.jsxs)(e.h3,{id:"-\u5bb9\u5668\u9009\u62e9\u6307\u5357",children:["\ud83d\udccb ",(0,r.jsx)(e.strong,{children:"\u5bb9\u5668\u9009\u62e9\u6307\u5357"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"// \u5bb9\u5668\u9009\u62e9\u51b3\u7b56\u6811\nvoid container_selection_guide() {\n    // \u9700\u8981\u968f\u673a\u8bbf\u95ee\uff1f\n    // Yes -> vector (\u901a\u5e38\u9996\u9009) \u6216 deque (\u9700\u8981\u4e24\u7aef\u64cd\u4f5c)\n    // No -> \u9700\u8981\u6392\u5e8f\uff1f\n    //       Yes -> set/map (\u552f\u4e00\u952e) \u6216 multiset/multimap (\u91cd\u590d\u952e)\n    //       No -> \u9700\u8981\u5feb\u901f\u67e5\u627e\uff1f\n    //             Yes -> unordered_set/unordered_map\n    //             No -> list (\u9891\u7e41\u4e2d\u95f4\u63d2\u5165\u5220\u9664)\n    \n    // \u793a\u4f8b\u573a\u666f\n    \n    // 1. \u52a8\u6001\u6570\u7ec4\uff0c\u9700\u8981\u968f\u673a\u8bbf\u95ee\n    std::vector<int> scores;  // \u2705 \u9996\u9009\n    \n    // 2. \u53cc\u7aef\u961f\u5217\n    std::deque<Task> task_queue;  // \u2705 \u652f\u6301\u4e24\u7aef\u9ad8\u6548\u64cd\u4f5c\n    \n    // 3. \u552f\u4e00\u5143\u7d20\u96c6\u5408\uff0c\u9700\u8981\u6392\u5e8f\n    std::set<std::string> unique_words;  // \u2705 \u81ea\u52a8\u6392\u5e8f\u53bb\u91cd\n    \n    // 4. \u952e\u503c\u6620\u5c04\uff0c\u5feb\u901f\u67e5\u627e\n    std::unordered_map<int, User> user_cache;  // \u2705 O(1)\u5e73\u5747\u67e5\u627e\n    \n    // 5. \u9891\u7e41\u4e2d\u95f4\u63d2\u5165\u5220\u9664\n    std::list<LogEntry> log_entries;  // \u2705 O(1)\u63d2\u5165\u5220\u9664\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"-\u6027\u80fd\u4f18\u5316\u6280\u5de7",children:["\ud83d\ude80 ",(0,r.jsx)(e.strong,{children:"\u6027\u80fd\u4f18\u5316\u6280\u5de7"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'void performance_tips() {\n    // 1. \u9884\u5206\u914d\u5bb9\u91cf\n    std::vector<int> vec;\n    vec.reserve(1000);  // \u907f\u514d\u9891\u7e41\u91cd\u65b0\u5206\u914d\n    \n    // 2. \u4f7f\u7528emplace\u800c\u975einsert\n    std::vector<std::string> strings;\n    strings.emplace_back("hello");  // \u539f\u5730\u6784\u9020\uff0c\u907f\u514d\u62f7\u8d1d\n    strings.push_back(std::string("world"));  // \u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\u540e\u62f7\u8d1d\n    \n    // 3. \u79fb\u52a8\u8bed\u4e49\n    std::vector<std::unique_ptr<int>> ptrs;\n    ptrs.push_back(std::make_unique<int>(42));  // \u81ea\u52a8\u79fb\u52a8\n    \n    // 4. \u7b97\u6cd5\u9009\u62e9\n    std::vector<int> data{5, 2, 8, 1, 9};\n    \n    // \u53ea\u9700\u8981\u524dk\u4e2a\u6700\u5c0f\u5143\u7d20\n    std::partial_sort(data.begin(), data.begin() + 3, data.end());\n    \n    // \u53ea\u9700\u8981\u7b2ck\u5c0f\u5143\u7d20\n    std::nth_element(data.begin(), data.begin() + 2, data.end());\n    \n    // 5. \u8fed\u4ee3\u5668vs\u4e0b\u6807\n    std::list<int> lst{1, 2, 3, 4, 5};\n    // \u2705 \u4f7f\u7528\u8fed\u4ee3\u5668\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        // \u5904\u7406*it\n    }\n    // \u274c \u4e0d\u8981\u5bf9list\u4f7f\u7528\u4e0b\u6807\u8bbf\u95ee\n    \n    // 6. \u8303\u56f4for\u5faa\u73af\n    for (const auto& item : vec) {  // \u2705 \u7b80\u6d01\u9ad8\u6548\n        // \u5904\u7406item\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"STL\uff1aC++\u7a0b\u5e8f\u5458\u7684\u5f3a\u5927\u6b66\u5668\u5e93"})})]})}function u(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var s=t(6540);const r={},d=s.createContext(r);function i(n){const e=s.useContext(d);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),s.createElement(d.Provider,{value:e},n.children)}}}]);