"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[939],{7039:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/cpp-oop","title":"C++ \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","description":"C++\u5728C\u8bed\u8a00\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u652f\u6301\uff0c\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u62bd\u8c61\u80fd\u529b\u548c\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\u3002","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/02_cpp-oop.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/01_c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/cpp-oop","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/cpp-oop","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/02_cpp-oop.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"knowledgSidebar","previous":{"title":"C\u8bed\u8a00\u57fa\u7840\u4e0e\u8fdb\u9636","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/c-fundamentals"},"next":{"title":"STL \u6807\u51c6\u6a21\u677f\u5e93","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/stl-containers"}}');var a=t(4848),o=t(8453);const s={},i="C++ \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b",c={},l=[{value:"\u9762\u5411\u5bf9\u8c61\u6838\u5fc3\u6982\u5ff5",id:"\u9762\u5411\u5bf9\u8c61\u6838\u5fc3\u6982\u5ff5",level:2},{value:"\ud83c\udfd7\ufe0f <strong>\u7c7b\u4e0e\u5bf9\u8c61\u8bbe\u8ba1</strong>",id:"\ufe0f-\u7c7b\u4e0e\u5bf9\u8c61\u8bbe\u8ba1",level:3},{value:"<strong>\u7c7b\u7684\u57fa\u672c\u7ed3\u6784</strong>",id:"\u7c7b\u7684\u57fa\u672c\u7ed3\u6784",level:4},{value:"\ud83d\udd04 <strong>\u7ee7\u627f\u4e0e\u591a\u6001</strong>",id:"-\u7ee7\u627f\u4e0e\u591a\u6001",level:3},{value:"<strong>\u7ee7\u627f\u5c42\u6b21\u8bbe\u8ba1</strong>",id:"\u7ee7\u627f\u5c42\u6b21\u8bbe\u8ba1",level:4},{value:"<strong>\u591a\u6001\u7684\u5b9e\u9645\u5e94\u7528</strong>",id:"\u591a\u6001\u7684\u5b9e\u9645\u5e94\u7528",level:4},{value:"\ud83d\udd12 <strong>\u5c01\u88c5\u4e0e\u8bbf\u95ee\u63a7\u5236</strong>",id:"-\u5c01\u88c5\u4e0e\u8bbf\u95ee\u63a7\u5236",level:3},{value:"<strong>\u8bbf\u95ee\u7ea7\u522b\u63a7\u5236</strong>",id:"\u8bbf\u95ee\u7ea7\u522b\u63a7\u5236",level:4},{value:"\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61\u7279\u6027",id:"\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61\u7279\u6027",level:2},{value:"\ud83c\udfaf <strong>\u8fd0\u7b97\u7b26\u91cd\u8f7d</strong>",id:"-\u8fd0\u7b97\u7b26\u91cd\u8f7d",level:3},{value:"<strong>\u7b97\u672f\u8fd0\u7b97\u7b26\u91cd\u8f7d</strong>",id:"\u7b97\u672f\u8fd0\u7b97\u7b26\u91cd\u8f7d",level:4},{value:"\ud83c\udfa8 <strong>\u8bbe\u8ba1\u6a21\u5f0f\u5b9e\u73b0</strong>",id:"-\u8bbe\u8ba1\u6a21\u5f0f\u5b9e\u73b0",level:3},{value:"<strong>\u5355\u4f8b\u6a21\u5f0f</strong>",id:"\u5355\u4f8b\u6a21\u5f0f",level:4},{value:"<strong>\u5de5\u5382\u6a21\u5f0f</strong>",id:"\u5de5\u5382\u6a21\u5f0f",level:4},{value:"\ud83d\udd04 <strong>RAII\u4e0e\u667a\u80fd\u6307\u9488</strong>",id:"-raii\u4e0e\u667a\u80fd\u6307\u9488",level:3},{value:"<strong>\u8d44\u6e90\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5</strong>",id:"\u8d44\u6e90\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5",level:4},{value:"\u5f02\u5e38\u5904\u7406",id:"\u5f02\u5e38\u5904\u7406",level:2},{value:"\ud83d\udee1\ufe0f <strong>\u5f02\u5e38\u5b89\u5168\u7f16\u7a0b</strong>",id:"\ufe0f-\u5f02\u5e38\u5b89\u5168\u7f16\u7a0b",level:3}];function d(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"c-\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b",children:"C++ \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"})}),"\n",(0,a.jsx)(e.p,{children:"C++\u5728C\u8bed\u8a00\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u652f\u6301\uff0c\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u62bd\u8c61\u80fd\u529b\u548c\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\u3002"}),"\n",(0,a.jsx)(e.h2,{id:"\u9762\u5411\u5bf9\u8c61\u6838\u5fc3\u6982\u5ff5",children:"\u9762\u5411\u5bf9\u8c61\u6838\u5fc3\u6982\u5ff5"}),"\n",(0,a.jsxs)(e.h3,{id:"\ufe0f-\u7c7b\u4e0e\u5bf9\u8c61\u8bbe\u8ba1",children:["\ud83c\udfd7\ufe0f ",(0,a.jsx)(e.strong,{children:"\u7c7b\u4e0e\u5bf9\u8c61\u8bbe\u8ba1"})]}),"\n",(0,a.jsx)(e.h4,{id:"\u7c7b\u7684\u57fa\u672c\u7ed3\u6784",children:(0,a.jsx)(e.strong,{children:"\u7c7b\u7684\u57fa\u672c\u7ed3\u6784"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'class BankAccount {\nprivate:\n    std::string account_number;\n    double balance;\n    static int total_accounts;  // \u9759\u6001\u6210\u5458\u53d8\u91cf\n\npublic:\n    // \u6784\u9020\u51fd\u6570\n    BankAccount(const std::string& acc_num, double initial_balance = 0.0)\n        : account_number(acc_num), balance(initial_balance) {\n        total_accounts++;\n    }\n    \n    // \u62f7\u8d1d\u6784\u9020\u51fd\u6570\n    BankAccount(const BankAccount& other) \n        : account_number(other.account_number), balance(other.balance) {\n        total_accounts++;\n    }\n    \n    // \u8d4b\u503c\u8fd0\u7b97\u7b26\n    BankAccount& operator=(const BankAccount& other) {\n        if (this != &other) {\n            account_number = other.account_number;\n            balance = other.balance;\n        }\n        return *this;\n    }\n    \n    // \u6790\u6784\u51fd\u6570\n    ~BankAccount() {\n        total_accounts--;\n    }\n    \n    // \u6210\u5458\u51fd\u6570\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n    \n    bool withdraw(double amount) {\n        if (amount > 0 && balance >= amount) {\n            balance -= amount;\n            return true;\n        }\n        return false;\n    }\n    \n    double getBalance() const { return balance; }\n    \n    // \u9759\u6001\u6210\u5458\u51fd\u6570\n    static int getTotalAccounts() { return total_accounts; }\n    \n    // \u53cb\u5143\u51fd\u6570\n    friend std::ostream& operator<<(std::ostream& os, const BankAccount& acc);\n};\n\n// \u9759\u6001\u6210\u5458\u5b9a\u4e49\nint BankAccount::total_accounts = 0;\n\n// \u53cb\u5143\u51fd\u6570\u5b9e\u73b0\nstd::ostream& operator<<(std::ostream& os, const BankAccount& acc) {\n    os << "Account: " << acc.account_number << ", Balance: $" << acc.balance;\n    return os;\n}\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"-\u7ee7\u627f\u4e0e\u591a\u6001",children:["\ud83d\udd04 ",(0,a.jsx)(e.strong,{children:"\u7ee7\u627f\u4e0e\u591a\u6001"})]}),"\n",(0,a.jsx)(e.h4,{id:"\u7ee7\u627f\u5c42\u6b21\u8bbe\u8ba1",children:(0,a.jsx)(e.strong,{children:"\u7ee7\u627f\u5c42\u6b21\u8bbe\u8ba1"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'// \u57fa\u7c7b - \u62bd\u8c61\u56fe\u5f62\u7c7b\nclass Shape {\nprotected:\n    std::string name;\n    \npublic:\n    Shape(const std::string& n) : name(n) {}\n    virtual ~Shape() = default;  // \u865a\u6790\u6784\u51fd\u6570\n    \n    // \u7eaf\u865a\u51fd\u6570 - \u62bd\u8c61\u63a5\u53e3\n    virtual double area() const = 0;\n    virtual double perimeter() const = 0;\n    virtual void draw() const = 0;\n    \n    // \u865a\u51fd\u6570 - \u53ef\u91cd\u5199\u7684\u9ed8\u8ba4\u5b9e\u73b0\n    virtual void print() const {\n        std::cout << "Shape: " << name << ", Area: " << area() << std::endl;\n    }\n    \n    // \u975e\u865a\u51fd\u6570 - \u4e0d\u53ef\u91cd\u5199\n    std::string getName() const { return name; }\n};\n\n// \u6d3e\u751f\u7c7b - \u77e9\u5f62\nclass Rectangle : public Shape {\nprivate:\n    double width, height;\n    \npublic:\n    Rectangle(double w, double h) : Shape("Rectangle"), width(w), height(h) {}\n    \n    double area() const override {\n        return width * height;\n    }\n    \n    double perimeter() const override {\n        return 2 * (width + height);\n    }\n    \n    void draw() const override {\n        std::cout << "Drawing a rectangle " << width << "x" << height << std::endl;\n    }\n};\n\n// \u6d3e\u751f\u7c7b - \u5706\u5f62\nclass Circle : public Shape {\nprivate:\n    double radius;\n    static constexpr double PI = 3.14159265359;\n    \npublic:\n    Circle(double r) : Shape("Circle"), radius(r) {}\n    \n    double area() const override {\n        return PI * radius * radius;\n    }\n    \n    double perimeter() const override {\n        return 2 * PI * radius;\n    }\n    \n    void draw() const override {\n        std::cout << "Drawing a circle with radius " << radius << std::endl;\n    }\n};\n'})}),"\n",(0,a.jsx)(e.h4,{id:"\u591a\u6001\u7684\u5b9e\u9645\u5e94\u7528",children:(0,a.jsx)(e.strong,{children:"\u591a\u6001\u7684\u5b9e\u9645\u5e94\u7528"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'// \u591a\u6001\u5bb9\u5668\nclass ShapeManager {\nprivate:\n    std::vector<std::unique_ptr<Shape>> shapes;\n    \npublic:\n    void addShape(std::unique_ptr<Shape> shape) {\n        shapes.push_back(std::move(shape));\n    }\n    \n    void drawAll() const {\n        for (const auto& shape : shapes) {\n            shape->draw();  // \u591a\u6001\u8c03\u7528\n        }\n    }\n    \n    double totalArea() const {\n        double total = 0.0;\n        for (const auto& shape : shapes) {\n            total += shape->area();  // \u591a\u6001\u8c03\u7528\n        }\n        return total;\n    }\n    \n    template<typename T>\n    std::vector<T*> getShapesOfType() const {\n        std::vector<T*> result;\n        for (const auto& shape : shapes) {\n            if (auto* typed_shape = dynamic_cast<T*>(shape.get())) {\n                result.push_back(typed_shape);\n            }\n        }\n        return result;\n    }\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nvoid demo_polymorphism() {\n    ShapeManager manager;\n    \n    manager.addShape(std::make_unique<Rectangle>(5.0, 3.0));\n    manager.addShape(std::make_unique<Circle>(2.0));\n    manager.addShape(std::make_unique<Rectangle>(4.0, 4.0));\n    \n    std::cout << "Drawing all shapes:" << std::endl;\n    manager.drawAll();\n    \n    std::cout << "Total area: " << manager.totalArea() << std::endl;\n    \n    // \u83b7\u53d6\u7279\u5b9a\u7c7b\u578b\u7684\u56fe\u5f62\n    auto rectangles = manager.getShapesOfType<Rectangle>();\n    std::cout << "Found " << rectangles.size() << " rectangles" << std::endl;\n}\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"-\u5c01\u88c5\u4e0e\u8bbf\u95ee\u63a7\u5236",children:["\ud83d\udd12 ",(0,a.jsx)(e.strong,{children:"\u5c01\u88c5\u4e0e\u8bbf\u95ee\u63a7\u5236"})]}),"\n",(0,a.jsx)(e.h4,{id:"\u8bbf\u95ee\u7ea7\u522b\u63a7\u5236",children:(0,a.jsx)(e.strong,{children:"\u8bbf\u95ee\u7ea7\u522b\u63a7\u5236"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"class AccessDemo {\nprivate:\n    int private_member;      // \u53ea\u6709\u7c7b\u5185\u90e8\u53ef\u8bbf\u95ee\n    \nprotected:\n    int protected_member;    // \u7c7b\u5185\u90e8\u548c\u6d3e\u751f\u7c7b\u53ef\u8bbf\u95ee\n    \npublic:\n    int public_member;       // \u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u8bbf\u95ee\n    \n    // \u53cb\u5143\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\n    friend class FriendClass;\n    \n    // \u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\n    friend void friend_function(const AccessDemo& obj);\n    \npublic:\n    AccessDemo(int priv, int prot, int pub) \n        : private_member(priv), protected_member(prot), public_member(pub) {}\n    \n    // \u516c\u5171\u63a5\u53e3\u63d0\u4f9b\u5bf9\u79c1\u6709\u6210\u5458\u7684\u63a7\u5236\u8bbf\u95ee\n    int getPrivateMember() const { return private_member; }\n    void setPrivateMember(int value) {\n        if (value >= 0) {  // \u6dfb\u52a0\u9a8c\u8bc1\u903b\u8f91\n            private_member = value;\n        }\n    }\n};\n\n// \u7ee7\u627f\u4e2d\u7684\u8bbf\u95ee\u63a7\u5236\nclass DerivedDemo : public AccessDemo {\npublic:\n    DerivedDemo(int priv, int prot, int pub) : AccessDemo(priv, prot, pub) {}\n    \n    void testAccess() {\n        // private_member = 10;    // \u9519\u8bef\uff1a\u65e0\u6cd5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\n        protected_member = 20;     // \u6b63\u786e\uff1a\u53ef\u4ee5\u8bbf\u95ee\u4fdd\u62a4\u6210\u5458\n        public_member = 30;        // \u6b63\u786e\uff1a\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u6210\u5458\n    }\n};\n"})}),"\n",(0,a.jsx)(e.h2,{id:"\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61\u7279\u6027",children:"\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61\u7279\u6027"}),"\n",(0,a.jsxs)(e.h3,{id:"-\u8fd0\u7b97\u7b26\u91cd\u8f7d",children:["\ud83c\udfaf ",(0,a.jsx)(e.strong,{children:"\u8fd0\u7b97\u7b26\u91cd\u8f7d"})]}),"\n",(0,a.jsx)(e.h4,{id:"\u7b97\u672f\u8fd0\u7b97\u7b26\u91cd\u8f7d",children:(0,a.jsx)(e.strong,{children:"\u7b97\u672f\u8fd0\u7b97\u7b26\u91cd\u8f7d"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'class Complex {\nprivate:\n    double real, imag;\n    \npublic:\n    Complex(double r = 0.0, double i = 0.0) : real(r), imag(i) {}\n    \n    // \u6210\u5458\u51fd\u6570\u5f62\u5f0f\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\n    Complex operator+(const Complex& other) const {\n        return Complex(real + other.real, imag + other.imag);\n    }\n    \n    Complex& operator+=(const Complex& other) {\n        real += other.real;\n        imag += other.imag;\n        return *this;\n    }\n    \n    // \u524d\u7f6e\u9012\u589e\n    Complex& operator++() {\n        ++real;\n        return *this;\n    }\n    \n    // \u540e\u7f6e\u9012\u589e\n    Complex operator++(int) {\n        Complex temp(*this);\n        ++real;\n        return temp;\n    }\n    \n    // \u6bd4\u8f83\u8fd0\u7b97\u7b26\n    bool operator==(const Complex& other) const {\n        return (real == other.real) && (imag == other.imag);\n    }\n    \n    bool operator!=(const Complex& other) const {\n        return !(*this == other);\n    }\n    \n    // \u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\n    operator double() const {\n        return std::sqrt(real * real + imag * imag);  // \u6a21\u957f\n    }\n    \n    // \u4e0b\u6807\u8fd0\u7b97\u7b26\n    double& operator[](int index) {\n        return (index == 0) ? real : imag;\n    }\n    \n    const double& operator[](int index) const {\n        return (index == 0) ? real : imag;\n    }\n    \n    // \u53cb\u5143\u51fd\u6570\u5f62\u5f0f\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\n    friend Complex operator*(const Complex& a, const Complex& b);\n    friend std::ostream& operator<<(std::ostream& os, const Complex& c);\n    friend std::istream& operator>>(std::istream& is, Complex& c);\n};\n\n// \u53cb\u5143\u8fd0\u7b97\u7b26\u5b9e\u73b0\nComplex operator*(const Complex& a, const Complex& b) {\n    return Complex(a.real * b.real - a.imag * b.imag,\n                   a.real * b.imag + a.imag * b.real);\n}\n\nstd::ostream& operator<<(std::ostream& os, const Complex& c) {\n    os << "(" << c.real;\n    if (c.imag >= 0) os << "+";\n    os << c.imag << "i)";\n    return os;\n}\n\nstd::istream& operator>>(std::istream& is, Complex& c) {\n    is >> c.real >> c.imag;\n    return is;\n}\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"-\u8bbe\u8ba1\u6a21\u5f0f\u5b9e\u73b0",children:["\ud83c\udfa8 ",(0,a.jsx)(e.strong,{children:"\u8bbe\u8ba1\u6a21\u5f0f\u5b9e\u73b0"})]}),"\n",(0,a.jsx)(e.h4,{id:"\u5355\u4f8b\u6a21\u5f0f",children:(0,a.jsx)(e.strong,{children:"\u5355\u4f8b\u6a21\u5f0f"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'class Singleton {\nprivate:\n    static std::unique_ptr<Singleton> instance;\n    static std::once_flag initialized;\n    \n    // \u79c1\u6709\u6784\u9020\u51fd\u6570\n    Singleton() = default;\n    \npublic:\n    // \u5220\u9664\u62f7\u8d1d\u6784\u9020\u548c\u8d4b\u503c\n    Singleton(const Singleton&) = delete;\n    Singleton& operator=(const Singleton&) = delete;\n    \n    static Singleton& getInstance() {\n        std::call_once(initialized, []() {\n            instance = std::unique_ptr<Singleton>(new Singleton());\n        });\n        return *instance;\n    }\n    \n    void doSomething() {\n        std::cout << "Singleton method called" << std::endl;\n    }\n};\n\n// \u9759\u6001\u6210\u5458\u5b9a\u4e49\nstd::unique_ptr<Singleton> Singleton::instance = nullptr;\nstd::once_flag Singleton::initialized;\n'})}),"\n",(0,a.jsx)(e.h4,{id:"\u5de5\u5382\u6a21\u5f0f",children:(0,a.jsx)(e.strong,{children:"\u5de5\u5382\u6a21\u5f0f"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'// \u62bd\u8c61\u4ea7\u54c1\nclass Animal {\npublic:\n    virtual ~Animal() = default;\n    virtual void makeSound() const = 0;\n    virtual std::string getType() const = 0;\n};\n\n// \u5177\u4f53\u4ea7\u54c1\nclass Dog : public Animal {\npublic:\n    void makeSound() const override {\n        std::cout << "Woof!" << std::endl;\n    }\n    \n    std::string getType() const override {\n        return "Dog";\n    }\n};\n\nclass Cat : public Animal {\npublic:\n    void makeSound() const override {\n        std::cout << "Meow!" << std::endl;\n    }\n    \n    std::string getType() const override {\n        return "Cat";\n    }\n};\n\n// \u5de5\u5382\u7c7b\nclass AnimalFactory {\npublic:\n    enum AnimalType { DOG, CAT };\n    \n    static std::unique_ptr<Animal> createAnimal(AnimalType type) {\n        switch (type) {\n            case DOG:\n                return std::make_unique<Dog>();\n            case CAT:\n                return std::make_unique<Cat>();\n            default:\n                return nullptr;\n        }\n    }\n    \n    // \u6ce8\u518c\u5f0f\u5de5\u5382\uff08\u66f4\u7075\u6d3b\uff09\n    using CreatorFunc = std::function<std::unique_ptr<Animal>()>;\n    static std::map<std::string, CreatorFunc> creators;\n    \n    template<typename T>\n    static void registerCreator(const std::string& type) {\n        creators[type] = []() { return std::make_unique<T>(); };\n    }\n    \n    static std::unique_ptr<Animal> create(const std::string& type) {\n        auto it = creators.find(type);\n        if (it != creators.end()) {\n            return it->second();\n        }\n        return nullptr;\n    }\n};\n\n// \u9759\u6001\u6210\u5458\u5b9a\u4e49\u548c\u6ce8\u518c\nstd::map<std::string, AnimalFactory::CreatorFunc> AnimalFactory::creators;\n\nvoid register_animals() {\n    AnimalFactory::registerCreator<Dog>("dog");\n    AnimalFactory::registerCreator<Cat>("cat");\n}\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"-raii\u4e0e\u667a\u80fd\u6307\u9488",children:["\ud83d\udd04 ",(0,a.jsx)(e.strong,{children:"RAII\u4e0e\u667a\u80fd\u6307\u9488"})]}),"\n",(0,a.jsx)(e.h4,{id:"\u8d44\u6e90\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5",children:(0,a.jsx)(e.strong,{children:"\u8d44\u6e90\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'// RAII\u8d44\u6e90\u7ba1\u7406\u7c7b\nclass FileManager {\nprivate:\n    std::FILE* file;\n    std::string filename;\n    \npublic:\n    explicit FileManager(const std::string& fname, const char* mode = "r") \n        : filename(fname) {\n        file = std::fopen(fname.c_str(), mode);\n        if (!file) {\n            throw std::runtime_error("Cannot open file: " + fname);\n        }\n    }\n    \n    ~FileManager() {\n        if (file) {\n            std::fclose(file);\n        }\n    }\n    \n    // \u5220\u9664\u62f7\u8d1d\uff0c\u5141\u8bb8\u79fb\u52a8\n    FileManager(const FileManager&) = delete;\n    FileManager& operator=(const FileManager&) = delete;\n    \n    FileManager(FileManager&& other) noexcept \n        : file(other.file), filename(std::move(other.filename)) {\n        other.file = nullptr;\n    }\n    \n    FileManager& operator=(FileManager&& other) noexcept {\n        if (this != &other) {\n            if (file) std::fclose(file);\n            file = other.file;\n            filename = std::move(other.filename);\n            other.file = nullptr;\n        }\n        return *this;\n    }\n    \n    std::FILE* get() const { return file; }\n    \n    bool isOpen() const { return file != nullptr; }\n};\n\n// \u667a\u80fd\u6307\u9488\u4f7f\u7528\u793a\u4f8b\nclass ResourceUser {\nprivate:\n    std::shared_ptr<int> shared_resource;\n    std::unique_ptr<double[]> array_resource;\n    std::weak_ptr<int> weak_reference;\n    \npublic:\n    ResourceUser(int size) {\n        // shared_ptr\uff1a\u5171\u4eab\u6240\u6709\u6743\n        shared_resource = std::make_shared<int>(42);\n        \n        // unique_ptr\uff1a\u72ec\u5360\u6240\u6709\u6743\n        array_resource = std::make_unique<double[]>(size);\n        \n        // weak_ptr\uff1a\u4e0d\u5f71\u54cd\u5f15\u7528\u8ba1\u6570\u7684\u89c2\u5bdf\u8005\n        weak_reference = shared_resource;\n    }\n    \n    void useResources() {\n        // \u68c0\u67e5weak_ptr\u662f\u5426\u6709\u6548\n        if (auto locked = weak_reference.lock()) {\n            std::cout << "Shared resource: " << *locked << std::endl;\n        } else {\n            std::cout << "Resource has been destroyed" << std::endl;\n        }\n        \n        // \u4f7f\u7528\u6570\u7ec4\n        for (int i = 0; i < 10; ++i) {\n            array_resource[i] = i * 1.5;\n        }\n    }\n    \n    std::shared_ptr<int> getSharedResource() {\n        return shared_resource;  // \u589e\u52a0\u5f15\u7528\u8ba1\u6570\n    }\n};\n'})}),"\n",(0,a.jsx)(e.h2,{id:"\u5f02\u5e38\u5904\u7406",children:"\u5f02\u5e38\u5904\u7406"}),"\n",(0,a.jsxs)(e.h3,{id:"\ufe0f-\u5f02\u5e38\u5b89\u5168\u7f16\u7a0b",children:["\ud83d\udee1\ufe0f ",(0,a.jsx)(e.strong,{children:"\u5f02\u5e38\u5b89\u5168\u7f16\u7a0b"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'// \u5f02\u5e38\u5c42\u6b21\u7ed3\u6784\nclass MyException : public std::exception {\nprivate:\n    std::string message;\n    \npublic:\n    explicit MyException(const std::string& msg) : message(msg) {}\n    \n    const char* what() const noexcept override {\n        return message.c_str();\n    }\n};\n\nclass InvalidArgumentException : public MyException {\npublic:\n    explicit InvalidArgumentException(const std::string& arg) \n        : MyException("Invalid argument: " + arg) {}\n};\n\n// \u5f02\u5e38\u5b89\u5168\u7684\u7c7b\u8bbe\u8ba1\nclass ExceptionSafeVector {\nprivate:\n    double* data;\n    size_t size;\n    size_t capacity;\n    \npublic:\n    explicit ExceptionSafeVector(size_t initial_capacity = 10) \n        : data(nullptr), size(0), capacity(initial_capacity) {\n        data = new double[capacity];  // \u53ef\u80fd\u629b\u51fastd::bad_alloc\n    }\n    \n    ~ExceptionSafeVector() {\n        delete[] data;\n    }\n    \n    // \u5f02\u5e38\u5b89\u5168\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n    ExceptionSafeVector(const ExceptionSafeVector& other) \n        : data(nullptr), size(other.size), capacity(other.capacity) {\n        try {\n            data = new double[capacity];\n            std::copy(other.data, other.data + size, data);\n        } catch (...) {\n            delete[] data;\n            throw;\n        }\n    }\n    \n    // \u5f3a\u5f02\u5e38\u5b89\u5168\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08copy-and-swap\uff09\n    ExceptionSafeVector& operator=(const ExceptionSafeVector& other) {\n        if (this != &other) {\n            ExceptionSafeVector temp(other);  // \u53ef\u80fd\u629b\u51fa\u5f02\u5e38\n            swap(temp);  // \u4e0d\u629b\u51fa\u5f02\u5e38\u7684\u4ea4\u6362\n        }\n        return *this;\n    }\n    \n    void push_back(double value) {\n        if (size >= capacity) {\n            resize();  // \u53ef\u80fd\u629b\u51fa\u5f02\u5e38\n        }\n        data[size++] = value;  // \u4e0d\u629b\u51fa\u5f02\u5e38\n    }\n    \nprivate:\n    void swap(ExceptionSafeVector& other) noexcept {\n        std::swap(data, other.data);\n        std::swap(size, other.size);\n        std::swap(capacity, other.capacity);\n    }\n    \n    void resize() {\n        size_t new_capacity = capacity * 2;\n        double* new_data = new double[new_capacity];  // \u53ef\u80fd\u629b\u51fa\n        \n        try {\n            std::copy(data, data + size, new_data);\n        } catch (...) {\n            delete[] new_data;\n            throw;\n        }\n        \n        delete[] data;\n        data = new_data;\n        capacity = new_capacity;\n    }\n};\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff1a\u6784\u5efa\u53ef\u7ef4\u62a4\u3001\u53ef\u6269\u5c55\u7684\u8f6f\u4ef6\u7cfb\u7edf"})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>i});var r=t(6540);const a={},o=r.createContext(a);function s(n){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);