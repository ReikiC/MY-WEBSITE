"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6862],{5386:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/c-fundamentals","title":"C\u8bed\u8a00\u57fa\u7840\u4e0e\u8fdb\u9636","description":"C\u8bed\u8a00\u4f5c\u4e3a\u7cfb\u7edf\u7f16\u7a0b\u7684\u57fa\u77f3\uff0c\u5176\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u7279\u6027\u4f7f\u5176\u5728\u5d4c\u5165\u5f0f\u548c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u4e0d\u53ef\u66ff\u4ee3\u3002","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/01_c-fundamentals.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/01_c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/c-fundamentals","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/c-fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/01_c-fundamentals.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"knowledgSidebar","previous":{"title":"C/C++ \u7f16\u7a0b\u8bed\u8a00","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/"},"next":{"title":"C++ \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/cpp-oop"}}');var t=i(4848),s=i(8453);const l={},o="C\u8bed\u8a00\u57fa\u7840\u4e0e\u8fdb\u9636",a={},d=[{value:"\u6838\u5fc3\u8bed\u6cd5\u6df1\u5165",id:"\u6838\u5fc3\u8bed\u6cd5\u6df1\u5165",level:2},{value:"\ud83c\udfaf <strong>\u6570\u636e\u7c7b\u578b\u4e0e\u5b58\u50a8</strong>",id:"-\u6570\u636e\u7c7b\u578b\u4e0e\u5b58\u50a8",level:3},{value:"<strong>\u57fa\u672c\u6570\u636e\u7c7b\u578b</strong>",id:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",level:4},{value:"<strong>\u7c7b\u578b\u4fee\u9970\u7b26</strong>",id:"\u7c7b\u578b\u4fee\u9970\u7b26",level:4},{value:"\ud83d\udd17 <strong>\u6307\u9488\u9ad8\u7ea7\u7528\u6cd5</strong>",id:"-\u6307\u9488\u9ad8\u7ea7\u7528\u6cd5",level:3},{value:"<strong>\u591a\u7ea7\u6307\u9488</strong>",id:"\u591a\u7ea7\u6307\u9488",level:4},{value:"<strong>\u51fd\u6570\u6307\u9488</strong>",id:"\u51fd\u6570\u6307\u9488",level:4},{value:"\ud83c\udfd7\ufe0f <strong>\u7ed3\u6784\u4f53\u4e0e\u8054\u5408\u4f53\u6df1\u5165</strong>",id:"\ufe0f-\u7ed3\u6784\u4f53\u4e0e\u8054\u5408\u4f53\u6df1\u5165",level:3},{value:"<strong>\u7ed3\u6784\u4f53\u5185\u5b58\u5e03\u5c40</strong>",id:"\u7ed3\u6784\u4f53\u5185\u5b58\u5e03\u5c40",level:4},{value:"<strong>\u4f4d\u57df\uff08Bit Fields\uff09</strong>",id:"\u4f4d\u57dfbit-fields",level:4},{value:"\u5185\u5b58\u7ba1\u7406\u8be6\u89e3",id:"\u5185\u5b58\u7ba1\u7406\u8be6\u89e3",level:2},{value:"\ud83d\udcbe <strong>\u52a8\u6001\u5185\u5b58\u5206\u914d</strong>",id:"-\u52a8\u6001\u5185\u5b58\u5206\u914d",level:3},{value:"<strong>malloc\u7cfb\u5217\u51fd\u6570</strong>",id:"malloc\u7cfb\u5217\u51fd\u6570",level:4},{value:"<strong>\u5185\u5b58\u9519\u8bef\u68c0\u6d4b</strong>",id:"\u5185\u5b58\u9519\u8bef\u68c0\u6d4b",level:4},{value:"\ud83d\udd12 <strong>\u5185\u5b58\u6c60\u6280\u672f</strong>",id:"-\u5185\u5b58\u6c60\u6280\u672f",level:3},{value:"\u9ad8\u7ea7\u7279\u6027",id:"\u9ad8\u7ea7\u7279\u6027",level:2},{value:"\ud83d\udccb <strong>\u5b8f\u4e0e\u9884\u5904\u7406\u5668</strong>",id:"-\u5b8f\u4e0e\u9884\u5904\u7406\u5668",level:3},{value:"<strong>\u5b8f\u5b9a\u4e49\u6280\u5de7</strong>",id:"\u5b8f\u5b9a\u4e49\u6280\u5de7",level:4},{value:"<strong>\u6761\u4ef6\u7f16\u8bd1</strong>",id:"\u6761\u4ef6\u7f16\u8bd1",level:4},{value:"\ud83d\udd04 <strong>\u53d8\u957f\u6570\u7ec4\uff08VLA\uff09</strong>",id:"-\u53d8\u957f\u6570\u7ec4vla",level:3},{value:"\u6027\u80fd\u4f18\u5316",id:"\u6027\u80fd\u4f18\u5316",level:2},{value:"\u26a1 <strong>\u7f16\u8bd1\u5668\u4f18\u5316</strong>",id:"-\u7f16\u8bd1\u5668\u4f18\u5316",level:3},{value:"\ud83d\udd27 <strong>\u6570\u636e\u7ed3\u6784\u4f18\u5316</strong>",id:"-\u6570\u636e\u7ed3\u6784\u4f18\u5316",level:3},{value:"\u8c03\u8bd5\u4e0e\u6d4b\u8bd5",id:"\u8c03\u8bd5\u4e0e\u6d4b\u8bd5",level:2},{value:"\ud83d\udc1b <strong>\u8c03\u8bd5\u6280\u5de7</strong>",id:"-\u8c03\u8bd5\u6280\u5de7",level:3},{value:"\ud83e\uddea <strong>\u5355\u5143\u6d4b\u8bd5\u6846\u67b6</strong>",id:"-\u5355\u5143\u6d4b\u8bd5\u6846\u67b6",level:3}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"c\u8bed\u8a00\u57fa\u7840\u4e0e\u8fdb\u9636",children:"C\u8bed\u8a00\u57fa\u7840\u4e0e\u8fdb\u9636"})}),"\n",(0,t.jsx)(e.p,{children:"C\u8bed\u8a00\u4f5c\u4e3a\u7cfb\u7edf\u7f16\u7a0b\u7684\u57fa\u77f3\uff0c\u5176\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u7279\u6027\u4f7f\u5176\u5728\u5d4c\u5165\u5f0f\u548c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u4e0d\u53ef\u66ff\u4ee3\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"\u6838\u5fc3\u8bed\u6cd5\u6df1\u5165",children:"\u6838\u5fc3\u8bed\u6cd5\u6df1\u5165"}),"\n",(0,t.jsxs)(e.h3,{id:"-\u6570\u636e\u7c7b\u578b\u4e0e\u5b58\u50a8",children:["\ud83c\udfaf ",(0,t.jsx)(e.strong,{children:"\u6570\u636e\u7c7b\u578b\u4e0e\u5b58\u50a8"})]}),"\n",(0,t.jsx)(e.h4,{id:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",children:(0,t.jsx)(e.strong,{children:"\u57fa\u672c\u6570\u636e\u7c7b\u578b"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u6574\u578b\u53d8\u91cf\u5927\u5c0f\uff08\u4f9d\u8d56\u4e8e\u5e73\u53f0\uff09\nprintf("char: %zu bytes\\n", sizeof(char));        // 1\u5b57\u8282\nprintf("short: %zu bytes\\n", sizeof(short));      // 2\u5b57\u8282  \nprintf("int: %zu bytes\\n", sizeof(int));          // 4\u5b57\u8282\nprintf("long: %zu bytes\\n", sizeof(long));        // 4/8\u5b57\u8282\nprintf("long long: %zu bytes\\n", sizeof(long long)); // 8\u5b57\u8282\n\n// \u6d6e\u70b9\u578b\u7cbe\u5ea6\nfloat f = 3.14159265359f;     // \u5355\u7cbe\u5ea6\uff0c\u7ea67\u4f4d\u6709\u6548\u6570\u5b57\ndouble d = 3.14159265359;     // \u53cc\u7cbe\u5ea6\uff0c\u7ea615\u4f4d\u6709\u6548\u6570\u5b57\nlong double ld = 3.14159265359L; // \u6269\u5c55\u7cbe\u5ea6\n'})}),"\n",(0,t.jsx)(e.h4,{id:"\u7c7b\u578b\u4fee\u9970\u7b26",children:(0,t.jsx)(e.strong,{children:"\u7c7b\u578b\u4fee\u9970\u7b26"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// \u5b58\u50a8\u7c7b\u8bf4\u660e\u7b26\nstatic int static_var = 0;        // \u9759\u6001\u5b58\u50a8\u671f\nextern int global_var;            // \u5916\u90e8\u94fe\u63a5\nregister int fast_var;            // \u5efa\u8bae\u5b58\u653e\u5728\u5bc4\u5b58\u5668\nauto int local_var = 10;          // \u81ea\u52a8\u5b58\u50a8\u671f\uff08\u9ed8\u8ba4\uff09\n\n// \u7c7b\u578b\u9650\u5b9a\u7b26\nconst int readonly = 100;         // \u53ea\u8bfb\nvolatile int hardware_reg;        // \u6613\u53d8\u7684\uff08\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\uff09\nrestrict char* ptr;               // \u53d7\u9650\u6307\u9488\uff08C99\uff09\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"-\u6307\u9488\u9ad8\u7ea7\u7528\u6cd5",children:["\ud83d\udd17 ",(0,t.jsx)(e.strong,{children:"\u6307\u9488\u9ad8\u7ea7\u7528\u6cd5"})]}),"\n",(0,t.jsx)(e.h4,{id:"\u591a\u7ea7\u6307\u9488",children:(0,t.jsx)(e.strong,{children:"\u591a\u7ea7\u6307\u9488"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'int value = 42;\nint *ptr1 = &value;               // \u4e00\u7ea7\u6307\u9488\nint **ptr2 = &ptr1;               // \u4e8c\u7ea7\u6307\u9488\nint ***ptr3 = &ptr2;              // \u4e09\u7ea7\u6307\u9488\n\n// \u8bbf\u95ee\u503c\nprintf("value = %d\\n", ***ptr3);  // \u901a\u8fc7\u4e09\u7ea7\u6307\u9488\u8bbf\u95ee\n\n// \u6307\u9488\u6570\u7ec4 vs \u6570\u7ec4\u6307\u9488\nint *ptr_array[10];               // \u6307\u9488\u6570\u7ec4\uff1a10\u4e2aint*\u6307\u9488\u7684\u6570\u7ec4\nint (*array_ptr)[10];             // \u6570\u7ec4\u6307\u9488\uff1a\u6307\u541110\u4e2aint\u6570\u7ec4\u7684\u6307\u9488\n'})}),"\n",(0,t.jsx)(e.h4,{id:"\u51fd\u6570\u6307\u9488",children:(0,t.jsx)(e.strong,{children:"\u51fd\u6570\u6307\u9488"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// \u51fd\u6570\u6307\u9488\u5b9a\u4e49\nint add(int a, int b) { return a + b; }\nint multiply(int a, int b) { return a * b; }\n\nint (*operation)(int, int);       // \u51fd\u6570\u6307\u9488\u58f0\u660e\n\n// \u51fd\u6570\u6307\u9488\u4f7f\u7528\noperation = add;\nint result1 = operation(5, 3);    // \u8c03\u7528add\u51fd\u6570\n\noperation = multiply;\nint result2 = operation(5, 3);    // \u8c03\u7528multiply\u51fd\u6570\n\n// \u51fd\u6570\u6307\u9488\u6570\u7ec4\nint (*operations[])(int, int) = {add, multiply};\nint result3 = operations[0](10, 5); // \u8c03\u7528add\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\ufe0f-\u7ed3\u6784\u4f53\u4e0e\u8054\u5408\u4f53\u6df1\u5165",children:["\ud83c\udfd7\ufe0f ",(0,t.jsx)(e.strong,{children:"\u7ed3\u6784\u4f53\u4e0e\u8054\u5408\u4f53\u6df1\u5165"})]}),"\n",(0,t.jsx)(e.h4,{id:"\u7ed3\u6784\u4f53\u5185\u5b58\u5e03\u5c40",children:(0,t.jsx)(e.strong,{children:"\u7ed3\u6784\u4f53\u5185\u5b58\u5e03\u5c40"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u5185\u5b58\u5bf9\u9f50\u793a\u4f8b\nstruct Example1 {\n    char a;      // 1\u5b57\u8282\n    int b;       // 4\u5b57\u8282\uff0c\u4f46\u53ef\u80fd\u4ece\u5730\u57404\u5f00\u59cb\n    char c;      // 1\u5b57\u8282\n}; // \u5b9e\u9645\u5927\u5c0f\u53ef\u80fd\u662f12\u5b57\u8282\uff08\u800c\u4e0d\u662f6\u5b57\u8282\uff09\n\n// \u4f7f\u7528#pragma pack\u63a7\u5236\u5bf9\u9f50\n#pragma pack(1)\nstruct Packed {\n    char a;\n    int b;\n    char c;\n}; // \u5b9e\u9645\u5927\u5c0f\uff1a6\u5b57\u8282\n#pragma pack()\n\n// \u8ba1\u7b97\u7ed3\u6784\u4f53\u504f\u79fb\n#include <stddef.h>\nprintf("Offset of b: %zu\\n", offsetof(struct Example1, b));\n'})}),"\n",(0,t.jsx)(e.h4,{id:"\u4f4d\u57dfbit-fields",children:(0,t.jsx)(e.strong,{children:"\u4f4d\u57df\uff08Bit Fields\uff09"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// \u4f4d\u57df\u5b9a\u4e49\uff08\u8282\u7701\u5185\u5b58\uff09\nstruct StatusRegister {\n    unsigned int flag1 : 1;       // 1\u4f4d\n    unsigned int flag2 : 1;       // 1\u4f4d\n    unsigned int counter : 6;     // 6\u4f4d\n    unsigned int mode : 2;        // 2\u4f4d\n    unsigned int reserved : 6;    // 6\u4f4d\u4fdd\u7559\n}; // \u603b\u517116\u4f4d\uff0c2\u5b57\u8282\n\n// \u4f4d\u57df\u4f7f\u7528\nstruct StatusRegister reg = {0};\nreg.flag1 = 1;\nreg.counter = 63;\nreg.mode = 2;\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u5185\u5b58\u7ba1\u7406\u8be6\u89e3",children:"\u5185\u5b58\u7ba1\u7406\u8be6\u89e3"}),"\n",(0,t.jsxs)(e.h3,{id:"-\u52a8\u6001\u5185\u5b58\u5206\u914d",children:["\ud83d\udcbe ",(0,t.jsx)(e.strong,{children:"\u52a8\u6001\u5185\u5b58\u5206\u914d"})]}),"\n",(0,t.jsx)(e.h4,{id:"malloc\u7cfb\u5217\u51fd\u6570",children:(0,t.jsx)(e.strong,{children:"malloc\u7cfb\u5217\u51fd\u6570"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'#include <stdlib.h>\n\n// \u57fa\u672c\u5206\u914d\nint *arr = malloc(sizeof(int) * 10);\nif (arr == NULL) {\n    fprintf(stderr, "Memory allocation failed\\n");\n    exit(1);\n}\n\n// calloc\uff1a\u5206\u914d\u5e76\u521d\u59cb\u5316\u4e3a0\nint *zero_arr = calloc(10, sizeof(int));\n\n// realloc\uff1a\u91cd\u65b0\u5206\u914d\u5927\u5c0f\narr = realloc(arr, sizeof(int) * 20);\nif (arr == NULL) {\n    // \u5904\u7406\u5206\u914d\u5931\u8d25\n}\n\n// \u91ca\u653e\u5185\u5b58\nfree(arr);\nfree(zero_arr);\narr = NULL;  // \u9632\u6b62\u60ac\u7a7a\u6307\u9488\nzero_arr = NULL;\n'})}),"\n",(0,t.jsx)(e.h4,{id:"\u5185\u5b58\u9519\u8bef\u68c0\u6d4b",children:(0,t.jsx)(e.strong,{children:"\u5185\u5b58\u9519\u8bef\u68c0\u6d4b"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u5e38\u89c1\u5185\u5b58\u9519\u8bef\nvoid memory_errors_demo() {\n    int *ptr = malloc(sizeof(int) * 10);\n    \n    // 1. \u5185\u5b58\u6cc4\u6f0f\n    // free(ptr);  // \u5fd8\u8bb0\u91ca\u653e\n    \n    // 2. \u91cd\u590d\u91ca\u653e\n    free(ptr);\n    // free(ptr);  // \u9519\u8bef\uff1a\u91cd\u590d\u91ca\u653e\n    \n    // 3. \u8bbf\u95ee\u5df2\u91ca\u653e\u5185\u5b58\n    ptr = malloc(sizeof(int));\n    free(ptr);\n    // *ptr = 42;  // \u9519\u8bef\uff1a\u8bbf\u95ee\u5df2\u91ca\u653e\u5185\u5b58\n    \n    // 4. \u7f13\u51b2\u533a\u6ea2\u51fa\n    char buffer[10];\n    // strcpy(buffer, "This string is too long");  // \u6ea2\u51fa\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"-\u5185\u5b58\u6c60\u6280\u672f",children:["\ud83d\udd12 ",(0,t.jsx)(e.strong,{children:"\u5185\u5b58\u6c60\u6280\u672f"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// \u7b80\u5355\u5185\u5b58\u6c60\u5b9e\u73b0\ntypedef struct MemoryPool {\n    void *memory;\n    size_t total_size;\n    size_t used_size;\n    size_t block_size;\n} MemoryPool;\n\nMemoryPool* create_pool(size_t pool_size, size_t block_size) {\n    MemoryPool *pool = malloc(sizeof(MemoryPool));\n    if (!pool) return NULL;\n    \n    pool->memory = malloc(pool_size);\n    if (!pool->memory) {\n        free(pool);\n        return NULL;\n    }\n    \n    pool->total_size = pool_size;\n    pool->used_size = 0;\n    pool->block_size = block_size;\n    return pool;\n}\n\nvoid* pool_alloc(MemoryPool *pool) {\n    if (pool->used_size + pool->block_size > pool->total_size) {\n        return NULL;  // \u6c60\u5df2\u6ee1\n    }\n    \n    void *ptr = (char*)pool->memory + pool->used_size;\n    pool->used_size += pool->block_size;\n    return ptr;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9ad8\u7ea7\u7279\u6027",children:"\u9ad8\u7ea7\u7279\u6027"}),"\n",(0,t.jsxs)(e.h3,{id:"-\u5b8f\u4e0e\u9884\u5904\u7406\u5668",children:["\ud83d\udccb ",(0,t.jsx)(e.strong,{children:"\u5b8f\u4e0e\u9884\u5904\u7406\u5668"})]}),"\n",(0,t.jsx)(e.h4,{id:"\u5b8f\u5b9a\u4e49\u6280\u5de7",children:(0,t.jsx)(e.strong,{children:"\u5b8f\u5b9a\u4e49\u6280\u5de7"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u591a\u884c\u5b8f\u5b9a\u4e49\n#define SWAP(a, b) do { \\\n    typeof(a) temp = (a); \\\n    (a) = (b); \\\n    (b) = temp; \\\n} while(0)\n\n// \u53ef\u53d8\u53c2\u6570\u5b8f\n#define DEBUG_PRINT(fmt, ...) \\\n    fprintf(stderr, "[DEBUG] " fmt "\\n", ##__VA_ARGS__)\n\n// \u5b57\u7b26\u4e32\u5316\u548c\u8fde\u63a5\n#define STRINGIFY(x) #x\n#define CONCAT(a, b) a##b\n\n// \u4f7f\u7528\u793a\u4f8b\nDEBUG_PRINT("Value: %d", 42);\nprintf("%s\\n", STRINGIFY(Hello World));  // \u8f93\u51fa: Hello World\nint CONCAT(var, 1) = 10;  // \u7b49\u4ef7\u4e8e: int var1 = 10;\n'})}),"\n",(0,t.jsx)(e.h4,{id:"\u6761\u4ef6\u7f16\u8bd1",children:(0,t.jsx)(e.strong,{children:"\u6761\u4ef6\u7f16\u8bd1"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u8c03\u8bd5\u7248\u672c\u63a7\u5236\n#ifdef DEBUG\n    #define DBG_MSG(msg) printf("DEBUG: %s\\n", msg)\n#else\n    #define DBG_MSG(msg)\n#endif\n\n// \u5e73\u53f0\u76f8\u5173\u4ee3\u7801\n#ifdef _WIN32\n    #include <windows.h>\n    #define SLEEP(ms) Sleep(ms)\n#elif defined(__linux__)\n    #include <unistd.h>\n    #define SLEEP(ms) usleep((ms) * 1000)\n#endif\n\n// \u7f16\u8bd1\u65f6\u65ad\u8a00\uff08C11\uff09\n_Static_assert(sizeof(int) == 4, "int must be 4 bytes");\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"-\u53d8\u957f\u6570\u7ec4vla",children:["\ud83d\udd04 ",(0,t.jsx)(e.strong,{children:"\u53d8\u957f\u6570\u7ec4\uff08VLA\uff09"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// C99\u53d8\u957f\u6570\u7ec4\nvoid matrix_multiply(int n, int m, int k, \n                    int a[n][m], int b[m][k], int result[n][k]) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < k; j++) {\n            result[i][j] = 0;\n            for (int l = 0; l < m; l++) {\n                result[i][j] += a[i][l] * b[l][j];\n            }\n        }\n    }\n}\n\n// \u52a8\u6001\u5206\u914d\u7684VLA\nvoid process_array(int size) {\n    int array[size];  // VLA\u5728\u6808\u4e0a\u5206\u914d\n    \n    // \u521d\u59cb\u5316\u548c\u4f7f\u7528\n    for (int i = 0; i < size; i++) {\n        array[i] = i * i;\n    }\n} // array\u81ea\u52a8\u91ca\u653e\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u6027\u80fd\u4f18\u5316",children:"\u6027\u80fd\u4f18\u5316"}),"\n",(0,t.jsxs)(e.h3,{id:"-\u7f16\u8bd1\u5668\u4f18\u5316",children:["\u26a1 ",(0,t.jsx)(e.strong,{children:"\u7f16\u8bd1\u5668\u4f18\u5316"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// \u5185\u8054\u51fd\u6570\uff08C99\uff09\nstatic inline int max(int a, int b) {\n    return (a > b) ? a : b;\n}\n\n// \u5206\u652f\u9884\u6d4b\u63d0\u793a\uff08GCC\uff09\n#define likely(x)   __builtin_expect(!!(x), 1)\n#define unlikely(x) __builtin_expect(!!(x), 0)\n\nif (likely(condition)) {\n    // \u7ecf\u5e38\u6267\u884c\u7684\u5206\u652f\n} else {\n    // \u5f88\u5c11\u6267\u884c\u7684\u5206\u652f\n}\n\n// \u5faa\u73af\u5c55\u5f00\nvoid optimized_copy(int *dest, const int *src, int count) {\n    int i;\n    // \u5faa\u73af\u5c55\u5f004\u500d\n    for (i = 0; i < count - 3; i += 4) {\n        dest[i] = src[i];\n        dest[i+1] = src[i+1];\n        dest[i+2] = src[i+2];\n        dest[i+3] = src[i+3];\n    }\n    \n    // \u5904\u7406\u5269\u4f59\u5143\u7d20\n    for (; i < count; i++) {\n        dest[i] = src[i];\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"-\u6570\u636e\u7ed3\u6784\u4f18\u5316",children:["\ud83d\udd27 ",(0,t.jsx)(e.strong,{children:"\u6570\u636e\u7ed3\u6784\u4f18\u5316"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u7f13\u5b58\u53cb\u597d\u7684\u6570\u636e\u7ed3\u6784\ntypedef struct {\n    // \u5c06\u7ecf\u5e38\u4e00\u8d77\u8bbf\u95ee\u7684\u6570\u636e\u653e\u5728\u4e00\u8d77\n    int x, y, z;        // 12\u5b57\u8282\uff0c\u4e00\u4e2a\u7f13\u5b58\u884c\n    int padding;        // \u5bf9\u9f50\u523016\u5b57\u8282\n} Point3D;\n\n// \u6570\u7ec4vs\u94fe\u8868\u6027\u80fd\u6bd4\u8f83\nvoid array_vs_list_performance() {\n    const int N = 1000000;\n    \n    // \u6570\u7ec4\uff1a\u7f13\u5b58\u53cb\u597d\uff0c\u987a\u5e8f\u8bbf\u95ee\u5feb\n    int *array = malloc(sizeof(int) * N);\n    clock_t start = clock();\n    for (int i = 0; i < N; i++) {\n        array[i] = i;  // \u987a\u5e8f\u5199\u5165\uff0c\u7f13\u5b58\u547d\u4e2d\u7387\u9ad8\n    }\n    clock_t end = clock();\n    printf("Array time: %f\\n", (double)(end - start) / CLOCKS_PER_SEC);\n    \n    free(array);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u8c03\u8bd5\u4e0e\u6d4b\u8bd5",children:"\u8c03\u8bd5\u4e0e\u6d4b\u8bd5"}),"\n",(0,t.jsxs)(e.h3,{id:"-\u8c03\u8bd5\u6280\u5de7",children:["\ud83d\udc1b ",(0,t.jsx)(e.strong,{children:"\u8c03\u8bd5\u6280\u5de7"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u65ad\u8a00\u4f7f\u7528\n#include <assert.h>\n\nvoid safe_divide(int a, int b, int *result) {\n    assert(b != 0);  // \u8fd0\u884c\u65f6\u68c0\u67e5\n    assert(result != NULL);\n    \n    *result = a / b;\n}\n\n// \u81ea\u5b9a\u4e49\u65ad\u8a00\u5b8f\n#ifdef DEBUG\n#define ASSERT(cond, msg) do { \\\n    if (!(cond)) { \\\n        fprintf(stderr, "Assertion failed: %s at %s:%d\\n", \\\n                msg, __FILE__, __LINE__); \\\n        abort(); \\\n    } \\\n} while(0)\n#else\n#define ASSERT(cond, msg)\n#endif\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"-\u5355\u5143\u6d4b\u8bd5\u6846\u67b6",children:["\ud83e\uddea ",(0,t.jsx)(e.strong,{children:"\u5355\u5143\u6d4b\u8bd5\u6846\u67b6"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// \u7b80\u5355\u7684\u6d4b\u8bd5\u6846\u67b6\n#define TEST(name) void test_##name()\n#define ASSERT_EQ(expected, actual) do { \\\n    if ((expected) != (actual)) { \\\n        printf("FAIL: %s - Expected %d, got %d\\n", \\\n               #name, expected, actual); \\\n        return; \\\n    } \\\n    printf("PASS: %s\\n", #name); \\\n} while(0)\n\n// \u6d4b\u8bd5\u7528\u4f8b\nTEST(addition) {\n    ASSERT_EQ(5, add(2, 3));\n    ASSERT_EQ(0, add(-1, 1));\n}\n\n// \u6d4b\u8bd5\u8fd0\u884c\u5668\nint main() {\n    test_addition();\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"\u638c\u63e1C\u8bed\u8a00\u7684\u7cbe\u9ad3\uff0c\u4e3a\u7cfb\u7edf\u7f16\u7a0b\u5960\u5b9a\u575a\u5b9e\u57fa\u7840"})})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function l(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);