"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2082],{1062:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>o,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"knowledge/Computer-Science/programming-languages/c-cpp/Template","title":"C++ Template \u5b8c\u5168\u6307\u5357","description":"\ud83d\udcda \u76ee\u5f55","source":"@site/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/07_Template.md","sourceDirName":"knowledge/02-Computer-Science/04_programming-languages/01_c-cpp","slug":"/knowledge/Computer-Science/programming-languages/c-cpp/Template","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/Template","draft":false,"unlisted":false,"editUrl":"https://github.com/ReikiC/MY-WEBSITE/tree/main/docs/knowledge/02-Computer-Science/04_programming-languages/01_c-cpp/07_Template.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"knowledgSidebar","previous":{"title":"\u547d\u540d\u7a7a\u95f4 namespace","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/namespace"},"next":{"title":"C++ STL \u5b8c\u5168\u6307\u5357","permalink":"/docs/knowledge/Computer-Science/programming-languages/c-cpp/STL"}}');var l=t(4848),i=t(8453);const r={},s="C++ Template \u5b8c\u5168\u6307\u5357",c={},p=[{value:"\ud83d\udcda \u76ee\u5f55",id:"-\u76ee\u5f55",level:2},{value:"\u6a21\u677f\u57fa\u7840\u6982\u5ff5",id:"\u6a21\u677f\u57fa\u7840\u6982\u5ff5",level:2},{value:"\u4ec0\u4e48\u662f\u6a21\u677f\uff1f",id:"\u4ec0\u4e48\u662f\u6a21\u677f",level:3},{value:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u6a21\u677f\uff1f",id:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u6a21\u677f",level:3},{value:"\u6a21\u677f\u7684\u4f18\u52bf",id:"\u6a21\u677f\u7684\u4f18\u52bf",level:3},{value:"\u51fd\u6570\u6a21\u677f",id:"\u51fd\u6570\u6a21\u677f",level:2},{value:"\u57fa\u672c\u8bed\u6cd5",id:"\u57fa\u672c\u8bed\u6cd5",level:3},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b",level:3},{value:"\u51fd\u6570\u6a21\u677f\u7279\u5316",id:"\u51fd\u6570\u6a21\u677f\u7279\u5316",level:3},{value:"\u51fd\u6570\u6a21\u677f\u91cd\u8f7d",id:"\u51fd\u6570\u6a21\u677f\u91cd\u8f7d",level:3},{value:"\u7c7b\u6a21\u677f",id:"\u7c7b\u6a21\u677f",level:2},{value:"\u57fa\u672c\u8bed\u6cd5",id:"\u57fa\u672c\u8bed\u6cd5-1",level:3},{value:"\u5b8c\u6574\u7684\u7c7b\u6a21\u677f\u793a\u4f8b",id:"\u5b8c\u6574\u7684\u7c7b\u6a21\u677f\u793a\u4f8b",level:3},{value:"\u7c7b\u6a21\u677f\u7684\u6210\u5458\u51fd\u6570\u5b9a\u4e49",id:"\u7c7b\u6a21\u677f\u7684\u6210\u5458\u51fd\u6570\u5b9a\u4e49",level:3},{value:"\u6a21\u677f\u53c2\u6570",id:"\u6a21\u677f\u53c2\u6570",level:2},{value:"\u7c7b\u578b\u53c2\u6570",id:"\u7c7b\u578b\u53c2\u6570",level:3},{value:"\u975e\u7c7b\u578b\u53c2\u6570",id:"\u975e\u7c7b\u578b\u53c2\u6570",level:3},{value:"\u6a21\u677f\u6a21\u677f\u53c2\u6570",id:"\u6a21\u677f\u6a21\u677f\u53c2\u6570",level:3},{value:"\u9ed8\u8ba4\u6a21\u677f\u53c2\u6570",id:"\u9ed8\u8ba4\u6a21\u677f\u53c2\u6570",level:3},{value:"\u6a21\u677f\u7279\u5316",id:"\u6a21\u677f\u7279\u5316",level:2},{value:"\u5168\u7279\u5316\uff08Full Specialization\uff09",id:"\u5168\u7279\u5316full-specialization",level:3},{value:"\u504f\u7279\u5316\uff08Partial Specialization\uff09",id:"\u504f\u7279\u5316partial-specialization",level:3},{value:"\u6a21\u677f\u5b9e\u4f8b\u5316",id:"\u6a21\u677f\u5b9e\u4f8b\u5316",level:2},{value:"\u9690\u5f0f\u5b9e\u4f8b\u5316",id:"\u9690\u5f0f\u5b9e\u4f8b\u5316",level:3},{value:"\u663e\u5f0f\u5b9e\u4f8b\u5316",id:"\u663e\u5f0f\u5b9e\u4f8b\u5316",level:3},{value:"\u663e\u5f0f\u7279\u5316\u5b9e\u4f8b\u5316",id:"\u663e\u5f0f\u7279\u5316\u5b9e\u4f8b\u5316",level:3},{value:"\u9ad8\u7ea7\u6a21\u677f\u6280\u672f",id:"\u9ad8\u7ea7\u6a21\u677f\u6280\u672f",level:2},{value:"SFINAE (Substitution Failure Is Not An Error)",id:"sfinae-substitution-failure-is-not-an-error",level:3},{value:"\u53d8\u53c2\u6a21\u677f\uff08Variadic Templates\uff09",id:"\u53d8\u53c2\u6a21\u677fvariadic-templates",level:3},{value:"\u5b8c\u7f8e\u8f6c\u53d1",id:"\u5b8c\u7f8e\u8f6c\u53d1",level:3},{value:"\u73b0\u4ee3C++\u6a21\u677f\u7279\u6027",id:"\u73b0\u4ee3c\u6a21\u677f\u7279\u6027",level:2},{value:"C++14: \u53d8\u91cf\u6a21\u677f",id:"c14-\u53d8\u91cf\u6a21\u677f",level:3},{value:"C++17: \u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc",id:"c17-\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc",level:3},{value:"C++20: \u6982\u5ff5\uff08Concepts\uff09",id:"c20-\u6982\u5ff5concepts",level:3},{value:"\u6a21\u677f\u5143\u7f16\u7a0b",id:"\u6a21\u677f\u5143\u7f16\u7a0b",level:2},{value:"\u7f16\u8bd1\u65f6\u8ba1\u7b97",id:"\u7f16\u8bd1\u65f6\u8ba1\u7b97",level:3},{value:"\u7c7b\u578b\u8403\u53d6\uff08Type Traits\uff09",id:"\u7c7b\u578b\u8403\u53d6type-traits",level:3},{value:"\u6a21\u677f\u9012\u5f52\u548c\u5217\u8868\u5904\u7406",id:"\u6a21\u677f\u9012\u5f52\u548c\u5217\u8868\u5904\u7406",level:3},{value:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b",id:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b",level:2},{value:"\u667a\u80fd\u6307\u9488\u5b9e\u73b0",id:"\u667a\u80fd\u6307\u9488\u5b9e\u73b0",level:3},{value:"\u901a\u7528\u5bb9\u5668\u9002\u914d\u5668",id:"\u901a\u7528\u5bb9\u5668\u9002\u914d\u5668",level:3},{value:"\u51fd\u6570\u5bf9\u8c61\u5305\u88c5\u5668",id:"\u51fd\u6570\u5bf9\u8c61\u5305\u88c5\u5668",level:3},{value:"\u6700\u4f73\u5b9e\u8df5",id:"\u6700\u4f73\u5b9e\u8df5",level:2},{value:"1. \u6a21\u677f\u8bbe\u8ba1\u539f\u5219",id:"1-\u6a21\u677f\u8bbe\u8ba1\u539f\u5219",level:3},{value:"2. \u9519\u8bef\u5904\u7406\u548c\u8c03\u8bd5",id:"2-\u9519\u8bef\u5904\u7406\u548c\u8c03\u8bd5",level:3},{value:"3. \u6027\u80fd\u4f18\u5316",id:"3-\u6027\u80fd\u4f18\u5316",level:3},{value:"4. \u4ee3\u7801\u7ec4\u7ec7",id:"4-\u4ee3\u7801\u7ec4\u7ec7",level:3},{value:"\u5e38\u89c1\u9519\u8bef",id:"\u5e38\u89c1\u9519\u8bef",level:2},{value:"1. \u6a21\u677f\u7f16\u8bd1\u9519\u8bef",id:"1-\u6a21\u677f\u7f16\u8bd1\u9519\u8bef",level:3},{value:"2. \u7279\u5316\u76f8\u5173\u9519\u8bef",id:"2-\u7279\u5316\u76f8\u5173\u9519\u8bef",level:3},{value:"3. \u4f9d\u8d56\u540d\u79f0\u67e5\u627e",id:"3-\u4f9d\u8d56\u540d\u79f0\u67e5\u627e",level:3},{value:"4. \u6a21\u677f\u5b9e\u4f8b\u5316\u65f6\u673a",id:"4-\u6a21\u677f\u5b9e\u4f8b\u5316\u65f6\u673a",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"c-template-\u5b8c\u5168\u6307\u5357",children:"C++ Template \u5b8c\u5168\u6307\u5357"})}),"\n",(0,l.jsx)(e.h2,{id:"-\u76ee\u5f55",children:"\ud83d\udcda \u76ee\u5f55"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E6%A8%A1%E6%9D%BF%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5",children:"\u6a21\u677f\u57fa\u7840\u6982\u5ff5"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF",children:"\u51fd\u6570\u6a21\u677f"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E7%B1%BB%E6%A8%A1%E6%9D%BF",children:"\u7c7b\u6a21\u677f"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0",children:"\u6a21\u677f\u53c2\u6570"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96",children:"\u6a21\u677f\u7279\u5316"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E6%A8%A1%E6%9D%BF%E5%AE%9E%E4%BE%8B%E5%8C%96",children:"\u6a21\u677f\u5b9e\u4f8b\u5316"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E9%AB%98%E7%BA%A7%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF",children:"\u9ad8\u7ea7\u6a21\u677f\u6280\u672f"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E7%8E%B0%E4%BB%A3C++%E6%A8%A1%E6%9D%BF%E7%89%B9%E6%80%A7",children:"\u73b0\u4ee3C++\u6a21\u677f\u7279\u6027"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B",children:"\u6a21\u677f\u5143\u7f16\u7a0b"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B",children:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5",children:"\u6700\u4f73\u5b9e\u8df5"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"#%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF",children:"\u5e38\u89c1\u9519\u8bef"})}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u6a21\u677f\u57fa\u7840\u6982\u5ff5",children:"\u6a21\u677f\u57fa\u7840\u6982\u5ff5"}),"\n",(0,l.jsx)(e.h3,{id:"\u4ec0\u4e48\u662f\u6a21\u677f",children:"\u4ec0\u4e48\u662f\u6a21\u677f\uff1f"}),"\n",(0,l.jsxs)(e.p,{children:["\u6a21\u677f\uff08Template\uff09\u662fC++\u4e2d\u7684\u4e00\u79cd\u6cdb\u578b\u7f16\u7a0b\u673a\u5236\uff0c\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u7c7b\u578b\u65e0\u5173\u7684\u4ee3\u7801\u3002\u6a21\u677f\u5728\u7f16\u8bd1\u65f6\u6839\u636e\u5b9e\u9645\u4f7f\u7528\u7684\u7c7b\u578b\u751f\u6210\u5177\u4f53\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a",(0,l.jsx)(e.strong,{children:"\u6a21\u677f\u5b9e\u4f8b\u5316"}),"\u3002"]}),"\n",(0,l.jsx)(e.h3,{id:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u6a21\u677f",children:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u6a21\u677f\uff1f"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u6ca1\u6709\u6a21\u677f\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u79cd\u7c7b\u578b\u5199\u91cd\u590d\u7684\u4ee3\u7801\nint max_int(int a, int b) {\n    return a > b ? a : b;\n}\n\ndouble max_double(double a, double b) {\n    return a > b ? a : b;\n}\n\nstring max_string(string a, string b) {\n    return a > b ? a : b;\n}\n\n// \u4f7f\u7528\u6a21\u677f\uff0c\u4e00\u4efd\u4ee3\u7801\u9002\u7528\u4e8e\u6240\u6709\u7c7b\u578b\ntemplate<typename T>\nT max_template(T a, T b) {\n    return a > b ? a : b;\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u6a21\u677f\u7684\u4f18\u52bf",children:"\u6a21\u677f\u7684\u4f18\u52bf"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u4ee3\u7801\u590d\u7528"})," - \u4e00\u4efd\u4ee3\u7801\u9002\u7528\u4e8e\u591a\u79cd\u7c7b\u578b"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u7c7b\u578b\u5b89\u5168"})," - \u7f16\u8bd1\u65f6\u7c7b\u578b\u68c0\u67e5"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u6027\u80fd\u4f18\u5316"})," - \u7f16\u8bd1\u65f6\u5c55\u5f00\uff0c\u8fd0\u884c\u65f6\u65e0\u989d\u5916\u5f00\u9500"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u7075\u6d3b\u6027"})," - \u652f\u6301\u6cdb\u578b\u7f16\u7a0b"]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u51fd\u6570\u6a21\u677f",children:"\u51fd\u6570\u6a21\u677f"}),"\n",(0,l.jsx)(e.h3,{id:"\u57fa\u672c\u8bed\u6cd5",children:"\u57fa\u672c\u8bed\u6cd5"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\n\u8fd4\u56de\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570\u5217\u8868) {\n    // \u51fd\u6570\u4f53\n}\n\n// \u6216\u8005\u4f7f\u7528 class \u5173\u952e\u5b57\uff08\u6548\u679c\u76f8\u540c\uff09\ntemplate<class T>\n\u8fd4\u56de\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570\u5217\u8868) {\n    // \u51fd\u6570\u4f53\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u7b80\u5355\u793a\u4f8b",children:"\u7b80\u5355\u793a\u4f8b"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <string>\nusing namespace std;\n\n// \u57fa\u672c\u51fd\u6570\u6a21\u677f\ntemplate<typename T>\nT add(T a, T b) {\n    return a + b;\n}\n\n// \u591a\u53c2\u6570\u6a21\u677f\ntemplate<typename T, typename U>\nauto multiply(T a, U b) -> decltype(a * b) {\n    return a * b;\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    cout << add(5, 3) << endl;           // int \u7248\u672c\n    cout << add(5.5, 3.2) << endl;      // double \u7248\u672c\n    cout << add(string("Hello"), string(" World")) << endl;  // string \u7248\u672c\n    \n    cout << multiply(3, 4.5) << endl;   // int * double\n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u51fd\u6570\u6a21\u677f\u7279\u5316",children:"\u51fd\u6570\u6a21\u677f\u7279\u5316"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u901a\u7528\u6a21\u677f\ntemplate<typename T>\nbool isEqual(T a, T b) {\n    return a == b;\n}\n\n// \u9488\u5bf9 const char* \u7684\u7279\u5316\ntemplate<>\nbool isEqual<const char*>(const char* a, const char* b) {\n    return strcmp(a, b) == 0;\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    cout << isEqual(5, 5) << endl;              // true\n    cout << isEqual("hello", "hello") << endl;  // true (\u4f7f\u7528\u7279\u5316\u7248\u672c)\n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u51fd\u6570\u6a21\u677f\u91cd\u8f7d",children:"\u51fd\u6570\u6a21\u677f\u91cd\u8f7d"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u57fa\u672c\u6a21\u677f\ntemplate<typename T>\nvoid print(T value) {\n    cout << "Template: " << value << endl;\n}\n\n// \u91cd\u8f7d\u6a21\u677f\ntemplate<typename T>\nvoid print(T* ptr) {\n    cout << "Pointer template: " << *ptr << endl;\n}\n\n// \u975e\u6a21\u677f\u51fd\u6570\u91cd\u8f7d\nvoid print(int value) {\n    cout << "Non-template int: " << value << endl;\n}\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u7c7b\u6a21\u677f",children:"\u7c7b\u6a21\u677f"}),"\n",(0,l.jsx)(e.h3,{id:"\u57fa\u672c\u8bed\u6cd5-1",children:"\u57fa\u672c\u8bed\u6cd5"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\nclass ClassName {\nprivate:\n    T member;\npublic:\n    ClassName(T value) : member(value) {}\n    T getValue() const { return member; }\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u5b8c\u6574\u7684\u7c7b\u6a21\u677f\u793a\u4f8b",children:"\u5b8c\u6574\u7684\u7c7b\u6a21\u677f\u793a\u4f8b"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <vector>\n#include <stdexcept>\n\ntemplate<typename T>\nclass Stack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    // \u5165\u6808\n    void push(const T& element) {\n        elements.push_back(element);\n    }\n    \n    // \u51fa\u6808\n    void pop() {\n        if (elements.empty()) {\n            throw std::runtime_error("Stack is empty");\n        }\n        elements.pop_back();\n    }\n    \n    // \u83b7\u53d6\u6808\u9876\u5143\u7d20\n    T& top() {\n        if (elements.empty()) {\n            throw std::runtime_error("Stack is empty");\n        }\n        return elements.back();\n    }\n    \n    const T& top() const {\n        if (elements.empty()) {\n            throw std::runtime_error("Stack is empty");\n        }\n        return elements.back();\n    }\n    \n    // \u68c0\u67e5\u662f\u5426\u4e3a\u7a7a\n    bool empty() const {\n        return elements.empty();\n    }\n    \n    // \u83b7\u53d6\u5927\u5c0f\n    size_t size() const {\n        return elements.size();\n    }\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    Stack<int> intStack;\n    intStack.push(10);\n    intStack.push(20);\n    cout << intStack.top() << endl;  // 20\n    \n    Stack<string> stringStack;\n    stringStack.push("Hello");\n    stringStack.push("World");\n    cout << stringStack.top() << endl;  // World\n    \n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u7c7b\u6a21\u677f\u7684\u6210\u5458\u51fd\u6570\u5b9a\u4e49",children:"\u7c7b\u6a21\u677f\u7684\u6210\u5458\u51fd\u6570\u5b9a\u4e49"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\nclass MyClass {\nprivate:\n    T data;\n    \npublic:\n    MyClass(T value);\n    void setValue(T value);\n    T getValue() const;\n    \n    // \u6a21\u677f\u6210\u5458\u51fd\u6570\n    template<typename U>\n    void convert(U value);\n};\n\n// \u5728\u7c7b\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\ntemplate<typename T>\nMyClass<T>::MyClass(T value) : data(value) {}\n\ntemplate<typename T>\nvoid MyClass<T>::setValue(T value) {\n    data = value;\n}\n\ntemplate<typename T>\nT MyClass<T>::getValue() const {\n    return data;\n}\n\n// \u6a21\u677f\u6210\u5458\u51fd\u6570\u5b9a\u4e49\ntemplate<typename T>\ntemplate<typename U>\nvoid MyClass<T>::convert(U value) {\n    data = static_cast<T>(value);\n}\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u6a21\u677f\u53c2\u6570",children:"\u6a21\u677f\u53c2\u6570"}),"\n",(0,l.jsx)(e.h3,{id:"\u7c7b\u578b\u53c2\u6570",children:"\u7c7b\u578b\u53c2\u6570"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u5355\u4e2a\u7c7b\u578b\u53c2\u6570\ntemplate<typename T>\nclass Container { /* ... */ };\n\n// \u591a\u4e2a\u7c7b\u578b\u53c2\u6570\ntemplate<typename T, typename U, typename V>\nclass Triple {\n    T first;\n    U second;\n    V third;\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u975e\u7c7b\u578b\u53c2\u6570",children:"\u975e\u7c7b\u578b\u53c2\u6570"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u6574\u6570\u975e\u7c7b\u578b\u53c2\u6570\ntemplate<typename T, int Size>\nclass Array {\nprivate:\n    T data[Size];\n    \npublic:\n    constexpr int size() const { return Size; }\n    T& operator[](int index) { return data[index]; }\n    const T& operator[](int index) const { return data[index]; }\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nArray<int, 10> arr;  // \u521b\u5efa\u5927\u5c0f\u4e3a10\u7684int\u6570\u7ec4\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u6a21\u677f\u6a21\u677f\u53c2\u6570",children:"\u6a21\u677f\u6a21\u677f\u53c2\u6570"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u6a21\u677f\u6a21\u677f\u53c2\u6570\ntemplate<typename T, template<typename> class Container>\nclass Adapter {\nprivate:\n    Container<T> container;\n    \npublic:\n    void add(const T& item) {\n        container.push_back(item);\n    }\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nAdapter<int, std::vector> adapter;\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u9ed8\u8ba4\u6a21\u677f\u53c2\u6570",children:"\u9ed8\u8ba4\u6a21\u677f\u53c2\u6570"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u9ed8\u8ba4\u7c7b\u578b\u53c2\u6570\ntemplate<typename T = int, int Size = 10>\nclass DefaultArray {\nprivate:\n    T data[Size];\npublic:\n    // ...\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nDefaultArray<> arr1;           // T=int, Size=10\nDefaultArray<double> arr2;     // T=double, Size=10\nDefaultArray<char, 20> arr3;   // T=char, Size=20\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u6a21\u677f\u7279\u5316",children:"\u6a21\u677f\u7279\u5316"}),"\n",(0,l.jsx)(e.h3,{id:"\u5168\u7279\u5316full-specialization",children:"\u5168\u7279\u5316\uff08Full Specialization\uff09"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u4e3b\u6a21\u677f\ntemplate<typename T>\nclass Printer {\npublic:\n    void print(const T& value) {\n        std::cout << "General: " << value << std::endl;\n    }\n};\n\n// \u9488\u5bf9 bool \u7684\u5168\u7279\u5316\ntemplate<>\nclass Printer<bool> {\npublic:\n    void print(const bool& value) {\n        std::cout << "Bool: " << (value ? "true" : "false") << std::endl;\n    }\n};\n\n// \u9488\u5bf9 char* \u7684\u5168\u7279\u5316\ntemplate<>\nclass Printer<char*> {\npublic:\n    void print(char* const& value) {\n        std::cout << "C-String: " << value << std::endl;\n    }\n};\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u504f\u7279\u5316partial-specialization",children:"\u504f\u7279\u5316\uff08Partial Specialization\uff09"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u4e3b\u6a21\u677f\ntemplate<typename T, typename U>\nclass Pair {\npublic:\n    void info() {\n        std::cout << "General pair" << std::endl;\n    }\n};\n\n// \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a int \u7684\u504f\u7279\u5316\ntemplate<typename T>\nclass Pair<T, int> {\npublic:\n    void info() {\n        std::cout << "Second parameter is int" << std::endl;\n    }\n};\n\n// \u4e24\u4e2a\u53c2\u6570\u76f8\u540c\u7684\u504f\u7279\u5316\ntemplate<typename T>\nclass Pair<T, T> {\npublic:\n    void info() {\n        std::cout << "Both parameters are the same" << std::endl;\n    }\n};\n\n// \u6307\u9488\u7c7b\u578b\u7684\u504f\u7279\u5316\ntemplate<typename T, typename U>\nclass Pair<T*, U*> {\npublic:\n    void info() {\n        std::cout << "Both parameters are pointers" << std::endl;\n    }\n};\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u6a21\u677f\u5b9e\u4f8b\u5316",children:"\u6a21\u677f\u5b9e\u4f8b\u5316"}),"\n",(0,l.jsx)(e.h3,{id:"\u9690\u5f0f\u5b9e\u4f8b\u5316",children:"\u9690\u5f0f\u5b9e\u4f8b\u5316"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\nT add(T a, T b) {\n    return a + b;\n}\n\nint main() {\n    // \u9690\u5f0f\u5b9e\u4f8b\u5316 add<int>\n    int result1 = add(5, 3);\n    \n    // \u9690\u5f0f\u5b9e\u4f8b\u5316 add<double>\n    double result2 = add(5.5, 3.2);\n    \n    return 0;\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u663e\u5f0f\u5b9e\u4f8b\u5316",children:"\u663e\u5f0f\u5b9e\u4f8b\u5316"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u58f0\u660e\ntemplate<typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\n\n// \u663e\u5f0f\u5b9e\u4f8b\u5316\u58f0\u660e\nextern template int multiply<int>(int, int);\n\n// \u663e\u5f0f\u5b9e\u4f8b\u5316\u5b9a\u4e49\uff08\u901a\u5e38\u5728 .cpp \u6587\u4ef6\u4e2d\uff09\ntemplate int multiply<int>(int, int);\ntemplate double multiply<double>(double, double);\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u663e\u5f0f\u7279\u5316\u5b9e\u4f8b\u5316",children:"\u663e\u5f0f\u7279\u5316\u5b9e\u4f8b\u5316"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'template<typename T>\nvoid func() {\n    std::cout << "General template\\n";\n}\n\n// \u663e\u5f0f\u8c03\u7528\u65f6\u6307\u5b9a\u7c7b\u578b\nint main() {\n    func<int>();     // \u663e\u5f0f\u6307\u5b9a T = int\n    func<double>();  // \u663e\u5f0f\u6307\u5b9a T = double\n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u9ad8\u7ea7\u6a21\u677f\u6280\u672f",children:"\u9ad8\u7ea7\u6a21\u677f\u6280\u672f"}),"\n",(0,l.jsx)(e.h3,{id:"sfinae-substitution-failure-is-not-an-error",children:"SFINAE (Substitution Failure Is Not An Error)"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"#include <type_traits>\n\n// \u53ea\u6709\u5f53 T \u662f\u6574\u6570\u7c7b\u578b\u65f6\u624d\u542f\u7528\ntemplate<typename T>\ntypename std::enable_if<std::is_integral<T>::value, T>::type\nprocessInteger(T value) {\n    return value * 2;\n}\n\n// \u53ea\u6709\u5f53 T \u662f\u6d6e\u70b9\u7c7b\u578b\u65f6\u624d\u542f\u7528\ntemplate<typename T>\ntypename std::enable_if<std::is_floating_point<T>::value, T>::type\nprocessFloat(T value) {\n    return value / 2.0;\n}\n\n// C++17 \u7684 if constexpr\ntemplate<typename T>\nauto process(T value) {\n    if constexpr (std::is_integral_v<T>) {\n        return value * 2;\n    } else if constexpr (std::is_floating_point_v<T>) {\n        return value / 2.0;\n    } else {\n        return value;\n    }\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u53d8\u53c2\u6a21\u677fvariadic-templates",children:"\u53d8\u53c2\u6a21\u677f\uff08Variadic Templates\uff09"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u9012\u5f52\u5c55\u5f00\u53d8\u53c2\u6a21\u677f\ntemplate<typename T>\nvoid print(T&& t) {\n    std::cout << t << std::endl;\n}\n\ntemplate<typename T, typename... Args>\nvoid print(T&& t, Args&&... args) {\n    std::cout << t << " ";\n    print(args...);\n}\n\n// C++17 \u6298\u53e0\u8868\u8fbe\u5f0f\ntemplate<typename... Args>\nvoid printFold(Args&&... args) {\n    ((std::cout << args << " "), ...);\n    std::cout << std::endl;\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    print(1, 2.5, "hello", \'c\');\n    printFold(1, 2.5, "hello", \'c\');\n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u5b8c\u7f8e\u8f6c\u53d1",children:"\u5b8c\u7f8e\u8f6c\u53d1"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'#include <utility>\n\ntemplate<typename Func, typename... Args>\nauto wrapper(Func&& func, Args&&... args) \n    -> decltype(func(std::forward<Args>(args)...)) {\n    \n    std::cout << "Calling function with " << sizeof...(args) << " arguments\\n";\n    return func(std::forward<Args>(args)...);\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nvoid testFunc(int& x) {\n    x *= 2;\n}\n\nint main() {\n    int value = 5;\n    wrapper(testFunc, value);\n    std::cout << value << std::endl;  // 10\n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u73b0\u4ee3c\u6a21\u677f\u7279\u6027",children:"\u73b0\u4ee3C++\u6a21\u677f\u7279\u6027"}),"\n",(0,l.jsx)(e.h3,{id:"c14-\u53d8\u91cf\u6a21\u677f",children:"C++14: \u53d8\u91cf\u6a21\u677f"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'template<typename T>\nconstexpr T pi = T(3.1415926535897932385);\n\ntemplate<typename T>\nconstexpr T e = T(2.7182818284590452354);\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    auto pi_f = pi<float>;\n    auto pi_d = pi<double>;\n    auto e_f = e<float>;\n    \n    std::cout << "Pi (float): " << pi_f << std::endl;\n    std::cout << "Pi (double): " << pi_d << std::endl;\n    std::cout << "E (float): " << e_f << std::endl;\n    \n    return 0;\n}\n'})}),"\n",(0,l.jsx)(e.h3,{id:"c17-\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc",children:"C++17: \u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\nclass Container {\n    T data;\npublic:\n    Container(T value) : data(value) {}\n    T get() const { return data; }\n};\n\nint main() {\n    // C++17 \u4e4b\u524d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\n    Container<int> c1(42);\n    \n    // C++17 \u53ef\u4ee5\u81ea\u52a8\u63a8\u5bfc\n    Container c2(42);        // \u63a8\u5bfc\u4e3a Container<int>\n    Container c3(3.14);      // \u63a8\u5bfc\u4e3a Container<double>\n    \n    return 0;\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"c20-\u6982\u5ff5concepts",children:"C++20: \u6982\u5ff5\uff08Concepts\uff09"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"#include <concepts>\n\n// \u5b9a\u4e49\u6982\u5ff5\ntemplate<typename T>\nconcept Numeric = std::integral<T> || std::floating_point<T>;\n\ntemplate<typename T>\nconcept Addable = requires(T a, T b) {\n    a + b;\n};\n\n// \u4f7f\u7528\u6982\u5ff5\u7ea6\u675f\u6a21\u677f\ntemplate<Numeric T>\nT add(T a, T b) {\n    return a + b;\n}\n\ntemplate<typename T>\nrequires Addable<T>\nT combine(T a, T b) {\n    return a + b;\n}\n\n// \u7b80\u5316\u7684\u8bed\u6cd5\nauto multiply(Numeric auto a, Numeric auto b) {\n    return a * b;\n}\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u6a21\u677f\u5143\u7f16\u7a0b",children:"\u6a21\u677f\u5143\u7f16\u7a0b"}),"\n",(0,l.jsx)(e.h3,{id:"\u7f16\u8bd1\u65f6\u8ba1\u7b97",children:"\u7f16\u8bd1\u65f6\u8ba1\u7b97"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u7f16\u8bd1\u65f6\u9636\u4e58\u8ba1\u7b97\ntemplate<int N>\nstruct Factorial {\n    static constexpr int value = N * Factorial<N-1>::value;\n};\n\ntemplate<>\nstruct Factorial<0> {\n    static constexpr int value = 1;\n};\n\n// C++14 constexpr \u51fd\u6570\nconstexpr int factorial(int n) {\n    return (n <= 1) ? 1 : n * factorial(n - 1);\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    constexpr int fact5_meta = Factorial<5>::value;  // 120\n    constexpr int fact5_func = factorial(5);         // 120\n    \n    static_assert(fact5_meta == 120);\n    static_assert(fact5_func == 120);\n    \n    return 0;\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u7c7b\u578b\u8403\u53d6type-traits",children:"\u7c7b\u578b\u8403\u53d6\uff08Type Traits\uff09"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'#include <type_traits>\n\ntemplate<typename T>\nvoid analyzeType() {\n    std::cout << "Type analysis:\\n";\n    std::cout << "Is integral: " << std::is_integral_v<T> << "\\n";\n    std::cout << "Is floating point: " << std::is_floating_point_v<T> << "\\n";\n    std::cout << "Is pointer: " << std::is_pointer_v<T> << "\\n";\n    std::cout << "Is const: " << std::is_const_v<T> << "\\n";\n    std::cout << "Size: " << sizeof(T) << " bytes\\n\\n";\n}\n\n// \u81ea\u5b9a\u4e49\u7c7b\u578b\u8403\u53d6\ntemplate<typename T>\nstruct remove_all_pointers {\n    using type = T;\n};\n\ntemplate<typename T>\nstruct remove_all_pointers<T*> {\n    using type = typename remove_all_pointers<T>::type;\n};\n\ntemplate<typename T>\nusing remove_all_pointers_t = typename remove_all_pointers<T>::type;\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u6a21\u677f\u9012\u5f52\u548c\u5217\u8868\u5904\u7406",children:"\u6a21\u677f\u9012\u5f52\u548c\u5217\u8868\u5904\u7406"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u7f16\u8bd1\u65f6\u5217\u8868\u5904\u7406\ntemplate<int... Ns>\nstruct IntList {};\n\ntemplate<int N, int... Ns>\nstruct Sum<IntList<N, Ns...>> {\n    static constexpr int value = N + Sum<IntList<Ns...>>::value;\n};\n\ntemplate<>\nstruct Sum<IntList<>> {\n    static constexpr int value = 0;\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nusing MyList = IntList<1, 2, 3, 4, 5>;\nconstexpr int total = Sum<MyList>::value;  // 15\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b",children:"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b"}),"\n",(0,l.jsx)(e.h3,{id:"\u667a\u80fd\u6307\u9488\u5b9e\u73b0",children:"\u667a\u80fd\u6307\u9488\u5b9e\u73b0"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\nclass UniquePtr {\nprivate:\n    T* ptr;\n    \npublic:\n    // \u6784\u9020\u51fd\u6570\n    explicit UniquePtr(T* p = nullptr) : ptr(p) {}\n    \n    // \u79fb\u52a8\u6784\u9020\u51fd\u6570\n    UniquePtr(UniquePtr&& other) noexcept : ptr(other.ptr) {\n        other.ptr = nullptr;\n    }\n    \n    // \u79fb\u52a8\u8d4b\u503c\u64cd\u4f5c\u7b26\n    UniquePtr& operator=(UniquePtr&& other) noexcept {\n        if (this != &other) {\n            delete ptr;\n            ptr = other.ptr;\n            other.ptr = nullptr;\n        }\n        return *this;\n    }\n    \n    // \u7981\u7528\u62f7\u8d1d\n    UniquePtr(const UniquePtr&) = delete;\n    UniquePtr& operator=(const UniquePtr&) = delete;\n    \n    // \u6790\u6784\u51fd\u6570\n    ~UniquePtr() {\n        delete ptr;\n    }\n    \n    // \u8bbf\u95ee\u64cd\u4f5c\u7b26\n    T& operator*() const { return *ptr; }\n    T* operator->() const { return ptr; }\n    \n    // \u83b7\u53d6\u539f\u59cb\u6307\u9488\n    T* get() const { return ptr; }\n    \n    // \u91ca\u653e\u6240\u6709\u6743\n    T* release() {\n        T* temp = ptr;\n        ptr = nullptr;\n        return temp;\n    }\n    \n    // \u91cd\u7f6e\u6307\u9488\n    void reset(T* p = nullptr) {\n        delete ptr;\n        ptr = p;\n    }\n    \n    // \u5e03\u5c14\u8f6c\u6362\n    explicit operator bool() const {\n        return ptr != nullptr;\n    }\n};\n\n// \u5de5\u5382\u51fd\u6570\ntemplate<typename T, typename... Args>\nUniquePtr<T> makeUnique(Args&&... args) {\n    return UniquePtr<T>(new T(std::forward<Args>(args)...));\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u901a\u7528\u5bb9\u5668\u9002\u914d\u5668",children:"\u901a\u7528\u5bb9\u5668\u9002\u914d\u5668"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename Container>\nclass ContainerAdapter {\nprivate:\n    Container container;\n    \npublic:\n    using value_type = typename Container::value_type;\n    using iterator = typename Container::iterator;\n    using const_iterator = typename Container::const_iterator;\n    \n    // \u8f6c\u53d1\u6784\u9020\u51fd\u6570\n    template<typename... Args>\n    ContainerAdapter(Args&&... args) : container(std::forward<Args>(args)...) {}\n    \n    // \u57fa\u672c\u64cd\u4f5c\n    void add(const value_type& item) {\n        if constexpr (requires { container.push_back(item); }) {\n            container.push_back(item);\n        } else if constexpr (requires { container.insert(item); }) {\n            container.insert(item);\n        }\n    }\n    \n    size_t size() const { return container.size(); }\n    bool empty() const { return container.empty(); }\n    \n    // \u8fed\u4ee3\u5668\u652f\u6301\n    iterator begin() { return container.begin(); }\n    iterator end() { return container.end(); }\n    const_iterator begin() const { return container.begin(); }\n    const_iterator end() const { return container.end(); }\n    \n    // \u8bbf\u95ee\u5e95\u5c42\u5bb9\u5668\n    Container& getContainer() { return container; }\n    const Container& getContainer() const { return container; }\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u51fd\u6570\u5bf9\u8c61\u5305\u88c5\u5668",children:"\u51fd\u6570\u5bf9\u8c61\u5305\u88c5\u5668"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'template<typename Signature>\nclass Function;\n\ntemplate<typename R, typename... Args>\nclass Function<R(Args...)> {\nprivate:\n    class FunctionBase {\n    public:\n        virtual ~FunctionBase() = default;\n        virtual R call(Args... args) = 0;\n        virtual std::unique_ptr<FunctionBase> clone() = 0;\n    };\n    \n    template<typename F>\n    class FunctionImpl : public FunctionBase {\n        F func;\n    public:\n        FunctionImpl(F f) : func(std::move(f)) {}\n        \n        R call(Args... args) override {\n            return func(args...);\n        }\n        \n        std::unique_ptr<FunctionBase> clone() override {\n            return std::make_unique<FunctionImpl>(func);\n        }\n    };\n    \n    std::unique_ptr<FunctionBase> impl;\n    \npublic:\n    Function() = default;\n    \n    template<typename F>\n    Function(F&& f) : impl(std::make_unique<FunctionImpl<std::decay_t<F>>>(std::forward<F>(f))) {}\n    \n    Function(const Function& other) : impl(other.impl ? other.impl->clone() : nullptr) {}\n    \n    Function& operator=(const Function& other) {\n        if (this != &other) {\n            impl = other.impl ? other.impl->clone() : nullptr;\n        }\n        return *this;\n    }\n    \n    Function(Function&&) = default;\n    Function& operator=(Function&&) = default;\n    \n    R operator()(Args... args) {\n        if (!impl) throw std::runtime_error("Function is empty");\n        return impl->call(args...);\n    }\n    \n    explicit operator bool() const { return static_cast<bool>(impl); }\n};\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u6700\u4f73\u5b9e\u8df5",children:"\u6700\u4f73\u5b9e\u8df5"}),"\n",(0,l.jsx)(e.h3,{id:"1-\u6a21\u677f\u8bbe\u8ba1\u539f\u5219",children:"1. \u6a21\u677f\u8bbe\u8ba1\u539f\u5219"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u2705 \u597d\u7684\u505a\u6cd5\uff1a\u4f7f\u7528typename\u800c\u4e0d\u662fclass\uff08\u9664\u975e\u9700\u8981\u6a21\u677f\u6a21\u677f\u53c2\u6570\uff09\ntemplate<typename T>\nclass GoodExample {};\n\n// \u2705 \u597d\u7684\u505a\u6cd5\uff1a\u63d0\u4f9b\u6e05\u6670\u7684\u7ea6\u675f\ntemplate<typename T>\nrequires std::is_arithmetic_v<T>\nT calculate(T value) { return value * 2; }\n\n// \u2705 \u597d\u7684\u505a\u6cd5\uff1a\u4f7f\u7528SFINAE\u6216concepts\u8fdb\u884c\u7c7b\u578b\u7ea6\u675f\ntemplate<typename T>\nstd::enable_if_t<std::is_integral_v<T>, T>\nprocessInteger(T value) { return value; }\n"})}),"\n",(0,l.jsx)(e.h3,{id:"2-\u9519\u8bef\u5904\u7406\u548c\u8c03\u8bd5",children:"2. \u9519\u8bef\u5904\u7406\u548c\u8c03\u8bd5"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u2705 \u63d0\u4f9b\u6709\u610f\u4e49\u7684\u9519\u8bef\u4fe1\u606f\ntemplate<typename T>\nclass SafeContainer {\n    static_assert(std::is_copy_constructible_v<T>, \n                  "T must be copy constructible");\n    static_assert(!std::is_same_v<T, void>, \n                  "T cannot be void");\n    // ...\n};\n\n// \u2705 \u4f7f\u7528\u6982\u5ff5\u63d0\u4f9b\u66f4\u597d\u7684\u9519\u8bef\u4fe1\u606f\ntemplate<typename T>\nconcept Sortable = requires(T a, T b) {\n    { a < b } -> std::convertible_to<bool>;\n};\n\ntemplate<Sortable T>\nvoid sort(std::vector<T>& vec) {\n    // \u6392\u5e8f\u5b9e\u73b0\n}\n'})}),"\n",(0,l.jsx)(e.h3,{id:"3-\u6027\u80fd\u4f18\u5316",children:"3. \u6027\u80fd\u4f18\u5316"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u2705 \u4f7f\u7528\u5b8c\u7f8e\u8f6c\u53d1\ntemplate<typename T>\nvoid wrapper(T&& value) {\n    process(std::forward<T>(value));\n}\n\n// \u2705 \u907f\u514d\u4e0d\u5fc5\u8981\u7684\u6a21\u677f\u5b9e\u4f8b\u5316\ntemplate<typename T>\nclass Optimized {\n    // \u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u5b9e\u4f8b\u5316\u6602\u8d35\u7684\u64cd\u4f5c\n    void expensiveOperation() {\n        if constexpr (requires { T{}.someMethod(); }) {\n            // \u53ea\u6709T\u6709someMethod\u65f6\u624d\u7f16\u8bd1\u8fd9\u90e8\u5206\n        }\n    }\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"4-\u4ee3\u7801\u7ec4\u7ec7",children:"4. \u4ee3\u7801\u7ec4\u7ec7"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'// \u5934\u6587\u4ef6\uff1a\u58f0\u660e\n// MyTemplate.h\ntemplate<typename T>\nclass MyTemplate {\npublic:\n    void method();\n};\n\n// \u5982\u679c\u9700\u8981\u5206\u79bb\u5b9e\u73b0\uff0c\u4f7f\u7528\u5305\u542b\u6a21\u578b\n#include "MyTemplate.tpp"\n\n// MyTemplate.tpp\ntemplate<typename T>\nvoid MyTemplate<T>::method() {\n    // \u5b9e\u73b0\n}\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u5e38\u89c1\u9519\u8bef",children:"\u5e38\u89c1\u9519\u8bef"}),"\n",(0,l.jsx)(e.h3,{id:"1-\u6a21\u677f\u7f16\u8bd1\u9519\u8bef",children:"1. \u6a21\u677f\u7f16\u8bd1\u9519\u8bef"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u274c \u9519\u8bef\uff1a\u5fd8\u8bb0typename\u5173\u952e\u5b57\ntemplate<typename T>\nclass Bad {\n    T::iterator it;  // \u9519\u8bef\uff01\u5e94\u8be5\u662f typename T::iterator it;\n};\n\n// \u2705 \u6b63\u786e\ntemplate<typename T>\nclass Good {\n    typename T::iterator it;\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"2-\u7279\u5316\u76f8\u5173\u9519\u8bef",children:"2. \u7279\u5316\u76f8\u5173\u9519\u8bef"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u274c \u9519\u8bef\uff1a\u5728\u547d\u540d\u7a7a\u95f4\u5185\u7279\u5316\nnamespace MyNamespace {\n    template<>\n    void func<int>() {}  // \u9519\u8bef\uff01\n}\n\n// \u2705 \u6b63\u786e\uff1a\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7279\u5316\ntemplate<>\nvoid MyNamespace::func<int>() {}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"3-\u4f9d\u8d56\u540d\u79f0\u67e5\u627e",children:"3. \u4f9d\u8d56\u540d\u79f0\u67e5\u627e"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"template<typename T>\nclass Base {\npublic:\n    void baseMethod() {}\n};\n\ntemplate<typename T>\nclass Derived : public Base<T> {\npublic:\n    void method() {\n        // \u274c \u9519\u8bef\uff1a\u4f9d\u8d56\u540d\u79f0\u67e5\u627e\u95ee\u9898\n        baseMethod();\n        \n        // \u2705 \u6b63\u786e\u7684\u65b9\u5f0f\n        this->baseMethod();\n        // \u6216\u8005\n        Base<T>::baseMethod();\n    }\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"4-\u6a21\u677f\u5b9e\u4f8b\u5316\u65f6\u673a",children:"4. \u6a21\u677f\u5b9e\u4f8b\u5316\u65f6\u673a"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"// \u274c \u95ee\u9898\uff1a\u53ef\u80fd\u5bfc\u81f4\u5faa\u73af\u4f9d\u8d56\ntemplate<typename T>\nclass Problem {\n    static T value;\n};\n\ntemplate<typename T>\nT Problem<T>::value = T{};  // \u53ef\u80fd\u8fc7\u65e9\u5b9e\u4f8b\u5316\n\n// \u2705 \u66f4\u597d\u7684\u65b9\u5f0f\ntemplate<typename T>\nclass Better {\npublic:\n    static T& getValue() {\n        static T value{};\n        return value;\n    }\n};\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,l.jsx)(e.p,{children:"C++\u6a21\u677f\u662f\u4e00\u4e2a\u5f3a\u5927\u800c\u590d\u6742\u7684\u7279\u6027\uff0c\u5b83\u63d0\u4f9b\u4e86\uff1a"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u6cdb\u578b\u7f16\u7a0b\u80fd\u529b"})," - \u7f16\u5199\u7c7b\u578b\u65e0\u5173\u7684\u4ee3\u7801"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u7f16\u8bd1\u65f6\u8ba1\u7b97"})," - \u5728\u7f16\u8bd1\u671f\u95f4\u8fdb\u884c\u590d\u6742\u8ba1\u7b97"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u96f6\u5f00\u9500\u62bd\u8c61"})," - \u5728\u4e0d\u635f\u5931\u6027\u80fd\u7684\u524d\u63d0\u4e0b\u63d0\u4f9b\u62bd\u8c61"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u7c7b\u578b\u5b89\u5168"})," - \u7f16\u8bd1\u65f6\u7c7b\u578b\u68c0\u67e5"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"\u638c\u63e1\u6a21\u677f\u9700\u8981\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u7406\u89e3\u6a21\u677f\u7684\u57fa\u672c\u6982\u5ff5\u548c\u8bed\u6cd5"}),"\n",(0,l.jsx)(e.li,{children:"\u719f\u6089\u7279\u5316\u3001\u5b9e\u4f8b\u5316\u7b49\u9ad8\u7ea7\u7279\u6027"}),"\n",(0,l.jsx)(e.li,{children:"\u4e86\u89e3\u73b0\u4ee3C++\u7684\u6a21\u677f\u65b0\u7279\u6027"}),"\n",(0,l.jsx)(e.li,{children:"\u9075\u5faa\u6700\u4f73\u5b9e\u8df5\uff0c\u907f\u514d\u5e38\u89c1\u9677\u9631"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"\u6a21\u677f\u662fC++\u4e2d\u6700\u5177\u8868\u8fbe\u529b\u7684\u7279\u6027\u4e4b\u4e00\uff0c\u503c\u5f97\u6df1\u5165\u5b66\u4e60\u548c\u638c\u63e1\u3002\u968f\u7740C++\u6807\u51c6\u7684\u53d1\u5c55\uff0c\u6a21\u677f\u7cfb\u7edf\u4e5f\u5728\u4e0d\u65ad\u5b8c\u5584\uff0c\u53d8\u5f97\u66f4\u52a0\u6613\u7528\u548c\u5f3a\u5927\u3002"})]})}function o(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var a=t(6540);const l={},i=a.createContext(l);function r(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);